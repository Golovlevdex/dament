{"ast":null,"code":"var _jsxFileName = \"C:\\\\vsc\\\\dament\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport WordList from \"./WordList\";\nimport GameBoard from \"./GameBoard\";\nimport Results from \"./Results\";\n// import BackButton from \"./BackButton\";\nimport BackWordBoard from \"./BackWordBoard\";\nimport { generateBoard, findAllWordsOnBoard, ROUND_DURATION, PAUSE_DURATION, letterBonuses } from \"./anagramGenerator\";\nimport { isWordInDictionary, gameDictionary } from \"./dictionary\";\nimport uiStrings from './ui-strings-categorized.json';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// ...дальнейший код компонента App без дублирующихся объявлений и мусора...\nconst getRandomWords = (count, dictionary) => {\n  const shuffled = [...dictionary].sort(() => Math.random() - 0.5);\n  return shuffled.slice(0, count);\n};\nconst App = () => {\n  _s();\n  // ВСЕ ХУКИ ДОЛЖНЫ БЫТЬ В САМОМ НАЧАЛЕ!\n  const [helpSelected, setHelpSelected] = useState([]);\n  const [helpFlashColor, setHelpFlashColor] = useState(null);\n  const [analyzerWordCount, setAnalyzerWordCount] = useState(0);\n  const [screen, setScreen] = useState('welcome');\n  const [startFlashColor, setStartFlashColor] = useState(null);\n  const [startSelected, setStartSelected] = useState([]);\n  const [loadingProgress, setLoadingProgress] = useState(0);\n  const [loadingMax, setLoadingMax] = useState(0);\n  const [loadingTimer, setLoadingTimer] = useState(5);\n  const [roundData, setRoundData] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(ROUND_DURATION);\n  const [foundWords, setFoundWords] = useState([]);\n  const [score, setScore] = useState(0);\n  const [message, setMessage] = useState(\"\");\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [currentWord, setCurrentWord] = useState(\"\");\n  const [flashColor, setFlashColor] = useState(null);\n  const [phase, setPhase] = useState(null);\n\n  // useRef тоже должен быть в начале!\n  const startTouch = React.useRef({\n    y: null\n  });\n\n  // Для свайп-старта\n  const START_WORD = 'СТАРТ';\n  // Слово СТАРТ в одну горизонтальную линию (1x5)\n  const startBoard = [[...START_WORD].map((letter, idx) => ({\n    letter,\n    bonus: 'none',\n    row: 0,\n    col: idx\n  }))];\n\n  // Параметры генерации\n  const FIELD_SIZE = 4; // размер поля (4x4)\n  const MIN_WORDS = 15; // минимальное количество слов (снизили с 20)\n  const MAX_ATTEMPTS = 500; // увеличили количество попыток\n\n  const leaderboard = [{\n    name: \"Вы\",\n    score\n  }];\n\n  // Обработка завершения пути (свайп/drag)\n  const handlePathComplete = path => {\n    if (!roundData) return;\n    if (path.length < 3) {\n      setMessage(uiStrings.ошибки.минимумБукв);\n      setFlashColor('red');\n      setTimeout(() => setFlashColor(null), 300);\n      setTimeout(() => {\n        setMessage(\"\");\n        setSelectedCells([]);\n        setCurrentWord(\"\");\n      }, 350);\n      return;\n    }\n    const word = path.map(([r, c]) => roundData.board[r][c].letter).join(\"\");\n    if (foundWords.includes(word)) {\n      setMessage(uiStrings.ошибки.ужеВводилось);\n      setFlashColor('red');\n      setTimeout(() => setFlashColor(null), 300);\n      setTimeout(() => {\n        setMessage(\"\");\n        setSelectedCells([]);\n        setCurrentWord(\"\");\n      }, 350);\n      return;\n    }\n    if (!roundData.words.includes(word) || !isWordInDictionary(word)) {\n      setMessage(uiStrings.ошибки.нетСлова);\n      setFlashColor('red');\n      setTimeout(() => setFlashColor(null), 300);\n      setTimeout(() => {\n        setMessage(\"\");\n        setSelectedCells([]);\n        setCurrentWord(\"\");\n      }, 350);\n      return;\n    }\n    // Подсчёт очков по бонусам букв\n    let wordScore = 0;\n    path.forEach(([r, c]) => {\n      const letter = roundData.board[r][c].letter.toUpperCase();\n      wordScore += letterBonuses[letter] || 0;\n    });\n    setScore(score + wordScore);\n    setFoundWords([...foundWords, word]);\n    setMessage(`+${wordScore} очков`);\n    setFlashColor('green');\n    setTimeout(() => setFlashColor(null), 300);\n    setTimeout(() => {\n      setMessage(\"\");\n      setSelectedCells([]);\n      setCurrentWord(\"\");\n    }, 350);\n  };\n\n  // Функция для возврата на стартовый экран\n  const goToWelcome = () => {\n    setScreen('welcome');\n    setPhase(null);\n    setRoundData(null);\n    setFoundWords([]);\n    setScore(0);\n    setMessage(\"\");\n    setSelectedCells([]);\n    setCurrentWord(\"\");\n  };\n\n  // useEffect для смены экранов во время загрузки\n  useEffect(() => {\n    if (screen === 'loading' && loadingTimer > 0) {\n      const timer = setTimeout(() => setLoadingTimer(loadingTimer - 1), 1000);\n      return () => clearTimeout(timer);\n    } else if (screen === 'loading' && loadingTimer === 0) {\n      setScreen('game');\n    }\n  }, [screen, loadingTimer]);\n\n  // useEffect для анимации загрузки\n  useEffect(() => {\n    if (screen === 'loading' && loadingProgress < loadingMax && loadingTimer > 0) {\n      const step = Math.ceil(loadingMax / (loadingTimer * 20));\n      const interval = setInterval(() => {\n        setLoadingProgress(prev => Math.min(prev + step, loadingMax));\n      }, 50);\n      return () => clearInterval(interval);\n    }\n  }, [screen, loadingProgress, loadingMax, loadingTimer]);\n\n  // --- ГЛАВНЫЙ ТАЙМЕР ИГРЫ И ФАЗ ---\n  // Здесь реализованы все основные таймеры и переходы между фазами:\n  //\n  // 1. Анализатор (phase === 'analyzer')\n  //    - Это пауза между раундами, когда игроку показываются все слова на поле.\n  //    - Длительность этой паузы задаётся переменной PAUSE_DURATION (например, 15 секунд).\n  //    - Если хотите изменить — ищите PAUSE_DURATION (см. импорт сверху).\n  //\n  // 2. Игра (phase === 'playing')\n  //    - Это основной игровой раунд, когда игрок ищет слова.\n  //    - Длительность раунда задаётся переменной ROUND_DURATION (например, 60 секунд).\n  //    - Если хотите изменить — ищите ROUND_DURATION (см. импорт сверху).\n  //\n  // 3. Результаты (phase === 'results')\n  //    - Это короткая пауза после окончания игры, когда показываются результаты.\n  //    - Длительность задаётся жёстко в setTimeLeft(3) (3 секунды, можно изменить на любое число).\n  //\n  // После каждой фазы происходит переход к следующей с установкой нужного таймера.\n  //\n  // Схема переходов:\n  // [Анализатор (PAUSE_DURATION сек)] → [Игра (ROUND_DURATION сек)] → [Результаты (3 сек)] → [Анализатор ...]\n  //\n  // Пример: если PAUSE_DURATION = 15, ROUND_DURATION = 60, то цикл такой:\n  // 15 сек анализатор → 60 сек игра → 3 сек результаты → 15 сек анализатор ...\n  //\n  // Чтобы изменить длительность любой фазы, меняйте соответствующую переменную!\n  useEffect(() => {\n    // --- Фаза ИГРА ---\n    if (phase === 'playing' && timeLeft > 0) {\n      // Основной игровой таймер (по умолчанию 60 сек, регулируется ROUND_DURATION)\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n    if (phase === 'playing' && timeLeft === 0) {\n      // Игра закончилась — переходим к результатам\n      setSelectedCells([]);\n      setCurrentWord(\"\");\n      setPhase('results');\n      setTimeLeft(10); // <--- Длительность экрана результатов (10 сек, можно изменить)\n    }\n    // --- Фаза РЕЗУЛЬТАТЫ ---\n    if (phase === 'results' && timeLeft > 0) {\n      // Таймер результатов (короткая пауза между игрой и анализатором)\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n    if (phase === 'results' && timeLeft === 0) {\n      // После результатов — генерируем новое поле и переходим к анализатору\n      const words = getRandomWords(6, gameDictionary);\n      const board = generateBoard({\n        name: \"\",\n        reward: \"\",\n        words\n      });\n      const allPossibleWords = findAllWordsOnBoard(board).filter(word => word.length >= 3);\n      setRoundData({\n        board,\n        words: allPossibleWords\n      });\n      setPhase('analyzer');\n      setTimeLeft(PAUSE_DURATION); // <--- Длительность анализатора (по умолчанию 15 сек, регулируется PAUSE_DURATION)\n      setAnalyzerWordCount(0); // сбрасываем счетчик для анимации\n    }\n    // --- Фаза АНАЛИЗАТОР ---\n    if (phase === 'analyzer' && timeLeft > 0) {\n      // Таймер анализатора (показывает слова перед началом игры)\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n    if (phase === 'analyzer' && timeLeft === 0) {\n      // Анализатор закончился — начинаем новый игровой раунд\n      setFoundWords([]);\n      setPhase('playing');\n      setTimeLeft(ROUND_DURATION); // <--- Длительность игры (по умолчанию 60 сек, регулируется ROUND_DURATION)\n    }\n  }, [timeLeft, phase]);\n\n  // Анимация увеличения числа найденных слов на анализаторе\n  useEffect(() => {\n    if (phase === 'analyzer' && roundData) {\n      setAnalyzerWordCount(0);\n      let current = 0;\n      const target = roundData.words.length;\n      const duration = Math.max(800, Math.min(2000, target * 40)); // 0.8-2 сек\n      const stepTime = Math.max(20, duration / (target || 1));\n      const interval = setInterval(() => {\n        current++;\n        setAnalyzerWordCount(prev => {\n          if (prev < target) return prev + 1;\n          clearInterval(interval);\n          return prev;\n        });\n        if (current >= target) {\n          clearInterval(interval);\n        }\n      }, stepTime);\n      return () => clearInterval(interval);\n    }\n  }, [phase, roundData]);\n  const phoneFrameStyle = {\n    overflow: 'hidden',\n    position: 'relative',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'stretch',\n    justifyContent: 'flex-start',\n    minWidth: 0,\n    minHeight: 0,\n    width: '100vw',\n    maxWidth: 430,\n    height: '100vh',\n    maxHeight: 932,\n    margin: '0 auto',\n    borderRadius: 36,\n    border: '8px solid #222',\n    boxShadow: '0 0 32px #0006',\n    background: '#111'\n  };\n  const phoneContentStyle = {\n    width: '100%',\n    height: '100%',\n    background: '#fff',\n    overflowY: 'auto',\n    WebkitOverflowScrolling: 'touch',\n    borderRadius: 28,\n    position: 'relative',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'stretch',\n    justifyContent: 'flex-start',\n    minWidth: 0,\n    minHeight: 0\n  };\n\n  // Свайп-старт по слову СТАРТ\n  const handleStartPath = path => {\n    const word = path.map(([r, c]) => startBoard[r][c].letter).join(\"\");\n    if (word === START_WORD) {\n      setStartFlashColor('green');\n      setTimeout(() => {\n        // Генерируем поле и слова для нового раунда\n        const words = getRandomWords(6, gameDictionary);\n        const board = generateBoard({\n          name: \"\",\n          reward: \"\",\n          words\n        });\n        const allPossibleWords = findAllWordsOnBoard(board).filter(word => word.length >= 3);\n        setRoundData({\n          board,\n          words: allPossibleWords\n        });\n        setScore(0); // сбрасываем очки\n        setPhase('analyzer'); // Запускаем анализатор\n        setTimeLeft(PAUSE_DURATION); // Длительность анализатора\n        setAnalyzerWordCount(0);\n        setStartSelected([]);\n        setStartFlashColor(null);\n      }, 350);\n    } else {\n      setStartFlashColor('red');\n      setTimeout(() => {\n        setStartSelected([]);\n        setStartFlashColor(null);\n      }, 350);\n    }\n  };\n\n  // Обёртка для любого экрана внутри рамки смартфона\n  const renderPhoneFrame = content => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: '#222',\n      minHeight: '100vh',\n      minWidth: '100vw',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: phoneFrameStyle,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: phoneContentStyle,\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 291,\n    columnNumber: 5\n  }, this);\n\n  // Экран справки\n  if (screen === 'help') {\n    return renderPhoneFrame(/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: 'sans-serif',\n        padding: '4vw',\n        width: '100%',\n        maxWidth: 430,\n        margin: '0 auto',\n        textAlign: 'center',\n        boxSizing: 'border-box',\n        position: 'relative'\n      },\n      children: [/*#__PURE__*/_jsxDEV(BackWordBoard, {\n        word: \"\\u041D\\u0410\\u0417\\u0410\\u0414\",\n        onPathComplete: () => goToWelcome()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          fontSize: '2.2rem',\n          margin: '2vw 0 2vw 0'\n        },\n        children: \"\\u0424\\u0443\\u043D\\u0434\\u0430\\u043C\\u0435\\u043D\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '1.2rem',\n          margin: '6vw 0'\n        },\n        children: \"\\u0421\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430 \\u0431\\u0443\\u0434\\u0435\\u0442 \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u0430 \\u043F\\u043E\\u0437\\u0436\\u0435.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this));\n  }\n\n  // Экран игры и анализатора\n  if (phase === 'analyzer' && roundData) {\n    return renderPhoneFrame(/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: 'sans-serif',\n        padding: '4vw',\n        width: '100%',\n        maxWidth: 430,\n        margin: '0 auto',\n        textAlign: 'center',\n        position: 'relative',\n        boxSizing: 'border-box'\n      },\n      children: [/*#__PURE__*/_jsxDEV(BackWordBoard, {\n        word: \"\\u041D\\u0410\\u0417\\u0410\\u0414\",\n        onPathComplete: () => goToWelcome()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          fontSize: '1.3rem',\n          margin: '2vw 0 2vw 0'\n        },\n        children: \"\\u0410\\u043D\\u0430\\u043B\\u0438\\u0437\\u0430\\u0442\\u043E\\u0440 \\u043F\\u043E\\u043B\\u044F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '1.1rem',\n          margin: '4vw 0'\n        },\n        children: [\"\\u041D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E \\u0441\\u043B\\u043E\\u0432: \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: analyzerWordCount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 76\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '1rem',\n          color: '#1976d2',\n          marginBottom: '3vw'\n        },\n        children: [\"\\u0414\\u043E \\u043D\\u0430\\u0447\\u0430\\u043B\\u0430 \\u0438\\u0433\\u0440\\u044B: \", timeLeft, \" \\u0441\\u0435\\u043A.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '3vw 0',\n          padding: '2vw',\n          background: '#f5f5f5',\n          borderRadius: 8,\n          fontSize: '0.95rem',\n          color: '#333',\n          maxHeight: 180,\n          overflowY: 'auto'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"\\u0412\\u0441\\u0435 \\u0441\\u043B\\u043E\\u0432\\u0430 \\u043D\\u0430 \\u043F\\u043E\\u043B\\u0435 (\\u0441 \\u043E\\u0447\\u043A\\u0430\\u043C\\u0438):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WordList, {\n          words: roundData.words.map(word => ({\n            word,\n            score: word.split('').reduce((sum, letter) => sum + (letterBonuses[letter.toUpperCase()] || 0), 0)\n          })).sort((a, b) => b.score - a.score).slice(0, analyzerWordCount).map(({\n            word\n          }) => word),\n          showScore: true,\n          getScore: word => word.split('').reduce((sum, letter) => sum + (letterBonuses[letter.toUpperCase()] || 0), 0)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this));\n  }\n  // Экран игры\n  if (roundData) {\n    return renderPhoneFrame(/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: 'sans-serif',\n        padding: '4vw',\n        width: '100%',\n        maxWidth: 430,\n        margin: '0 auto',\n        position: 'relative',\n        boxSizing: 'border-box'\n      },\n      children: [/*#__PURE__*/_jsxDEV(BackWordBoard, {\n        word: \"\\u041D\\u0410\\u0417\\u0410\\u0414\",\n        onPathComplete: () => goToWelcome()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          fontSize: '2.2rem',\n          margin: '2vw 0 2vw 0'\n        },\n        children: \"\\u0424\\u0443\\u043D\\u0434\\u0430\\u043C\\u0435\\u043D\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '1.2rem',\n          fontWeight: 600,\n          marginBottom: '2vw'\n        },\n        children: [phase === 'playing' ? uiStrings.игра.заголовок : uiStrings.результаты.заголовок, ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: '1.1rem',\n            fontWeight: 400,\n            color: '#1976d2'\n          },\n          children: [timeLeft, \" \\u0441\\u0435\\u043A.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          minHeight: 32,\n          color: message.includes(uiStrings.прочее.очков) ? 'green' : 'red',\n          fontWeight: 500\n        },\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '2vw'\n        },\n        children: [uiStrings.игра.очки, \": \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n        board: roundData.board,\n        selectedCells: selectedCells,\n        onPathComplete: phase === 'playing' ? handlePathComplete : undefined,\n        onDragUpdate: phase === 'playing' ? setSelectedCells : undefined,\n        flashColor: flashColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '3vw 0',\n          padding: '2vw',\n          background: '#f5f5f5',\n          borderRadius: 8,\n          fontSize: '0.95rem',\n          color: '#333',\n          maxHeight: 120,\n          overflowY: 'auto'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: [\"\\u0412\\u0441\\u0435 \\u0441\\u043B\\u043E\\u0432\\u0430 \\u043D\\u0430 \\u043F\\u043E\\u043B\\u0435 (\", roundData.words.length, \"):\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WordList, {\n          words: roundData.words\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this), phase === 'results' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            margin: '3vw 0',\n            padding: '2vw',\n            background: '#e3f2fd',\n            borderRadius: 8,\n            fontSize: '1.15rem',\n            color: '#1976d2',\n            textAlign: 'center',\n            fontWeight: 600\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\u0420\\u0430\\u0443\\u043D\\u0434 \\u0437\\u0430\\u0432\\u0435\\u0440\\u0448\\u0451\\u043D!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: 8\n            },\n            children: [\"\\u0412\\u0430\\u0448 \\u0440\\u0435\\u0437\\u0443\\u043B\\u044C\\u0442\\u0430\\u0442: \", /*#__PURE__*/_jsxDEV(\"b\", {\n              style: {\n                color: '#1565c0',\n                fontSize: '1.3em'\n              },\n              children: [score, \" \\u043E\\u0447\\u043A\\u043E\\u0432\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 60\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Results, {\n          foundWords: foundWords,\n          possibleWords: roundData.words,\n          leaderboard: leaderboard,\n          usedWords: roundData.words\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this));\n  }\n\n  // Стартовый экран с двумя плитками GameBoard: \"СТАРТ\" и \"СПРАВКА\"\n  const HELP_WORD = 'СПРАВКА';\n  const helpBoard = [[...HELP_WORD].map((letter, idx) => ({\n    letter,\n    bonus: 'none',\n    row: 0,\n    col: idx\n  }))];\n\n  // Обработчик свайпа по \"СПРАВКА\"\n  const handleHelpPath = path => {\n    // Проверяем, что проведены все буквы СПРАВКА подряд\n    if (path.length === HELP_WORD.length && path.every(([r, c], idx) => r === 0 && c === idx)) {\n      setScreen('help');\n      setHelpSelected([]);\n      setHelpFlashColor('green');\n      setTimeout(() => setHelpFlashColor(null), 300);\n    } else {\n      setHelpFlashColor('red');\n      setTimeout(() => setHelpFlashColor(null), 300);\n      setTimeout(() => setHelpSelected([]), 350);\n    }\n  };\n  // Обработчик свайпа вверх\n  const handleStartTouchStart = e => {\n    startTouch.current.y = e.touches[0].clientY;\n  };\n  const handleStartTouchEnd = e => {\n    if (startTouch.current.y !== null) {\n      const deltaY = startTouch.current.y - e.changedTouches[0].clientY;\n      if (deltaY > 50) {\n        // свайп вверх\n        setScreen('help');\n      }\n    }\n    startTouch.current.y = null;\n  };\n  return renderPhoneFrame(/*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontFamily: 'sans-serif',\n      padding: '4vw',\n      width: '100%',\n      maxWidth: 430,\n      margin: '0 auto',\n      textAlign: 'center',\n      boxSizing: 'border-box',\n      minHeight: '100vh',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      gap: '6vw'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        fontSize: '2.2rem',\n        margin: '2vw 0 4vw 0'\n      },\n      children: \"\\u0424\\u0443\\u043D\\u0434\\u0430\\u043C\\u0435\\u043D\\u0442\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '5vw',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          minWidth: 180,\n          width: '60vw',\n          maxWidth: 320\n        },\n        children: [/*#__PURE__*/_jsxDEV(GameBoard, {\n          board: startBoard,\n          selectedCells: startSelected,\n          onPathComplete: handleStartPath,\n          onDragUpdate: setStartSelected,\n          flashColor: startFlashColor,\n          columnsCount: START_WORD.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '1rem',\n            color: '#888',\n            margin: '1vw 0 0 0'\n          },\n          children: \"\\u041F\\u0440\\u043E\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043F\\u043E \\u0431\\u0443\\u043A\\u0432\\u0430\\u043C, \\u0447\\u0442\\u043E\\u0431\\u044B \\u043D\\u0430\\u0447\\u0430\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          minWidth: 180,\n          width: '60vw',\n          maxWidth: 320\n        },\n        children: [/*#__PURE__*/_jsxDEV(GameBoard, {\n          board: helpBoard,\n          selectedCells: helpSelected,\n          onPathComplete: handleHelpPath,\n          onDragUpdate: setHelpSelected,\n          flashColor: helpFlashColor,\n          columnsCount: HELP_WORD.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '1rem',\n            color: '#888',\n            margin: '1vw 0 0 0'\n          },\n          children: \"\\u041F\\u0440\\u043E\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043F\\u043E \\u0431\\u0443\\u043A\\u0432\\u0430\\u043C, \\u0447\\u0442\\u043E\\u0431\\u044B \\u043E\\u0442\\u043A\\u0440\\u044B\\u0442\\u044C \\u0441\\u043F\\u0440\\u0430\\u0432\\u043A\\u0443\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 435,\n    columnNumber: 5\n  }, this));\n};\n_s(App, \"IV9usurGiqzu65Ca0ddwBgHVbIQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","WordList","GameBoard","Results","BackWordBoard","generateBoard","findAllWordsOnBoard","ROUND_DURATION","PAUSE_DURATION","letterBonuses","isWordInDictionary","gameDictionary","uiStrings","jsxDEV","_jsxDEV","Fragment","_Fragment","getRandomWords","count","dictionary","shuffled","sort","Math","random","slice","App","_s","helpSelected","setHelpSelected","helpFlashColor","setHelpFlashColor","analyzerWordCount","setAnalyzerWordCount","screen","setScreen","startFlashColor","setStartFlashColor","startSelected","setStartSelected","loadingProgress","setLoadingProgress","loadingMax","setLoadingMax","loadingTimer","setLoadingTimer","roundData","setRoundData","timeLeft","setTimeLeft","foundWords","setFoundWords","score","setScore","message","setMessage","selectedCells","setSelectedCells","currentWord","setCurrentWord","flashColor","setFlashColor","phase","setPhase","startTouch","useRef","y","START_WORD","startBoard","map","letter","idx","bonus","row","col","FIELD_SIZE","MIN_WORDS","MAX_ATTEMPTS","leaderboard","name","handlePathComplete","path","length","ошибки","минимумБукв","setTimeout","word","r","c","board","join","includes","ужеВводилось","words","нетСлова","wordScore","forEach","toUpperCase","goToWelcome","timer","clearTimeout","step","ceil","interval","setInterval","prev","min","clearInterval","reward","allPossibleWords","filter","current","target","duration","max","stepTime","phoneFrameStyle","overflow","position","display","flexDirection","alignItems","justifyContent","minWidth","minHeight","width","maxWidth","height","maxHeight","margin","borderRadius","border","boxShadow","background","phoneContentStyle","overflowY","WebkitOverflowScrolling","handleStartPath","renderPhoneFrame","content","style","children","fileName","_jsxFileName","lineNumber","columnNumber","fontFamily","padding","textAlign","boxSizing","onPathComplete","fontSize","color","marginBottom","split","reduce","sum","a","b","showScore","getScore","fontWeight","игра","заголовок","результаты","прочее","очков","очки","undefined","onDragUpdate","marginTop","possibleWords","usedWords","HELP_WORD","helpBoard","handleHelpPath","every","handleStartTouchStart","e","touches","clientY","handleStartTouchEnd","deltaY","changedTouches","gap","columnsCount","_c","$RefreshReg$"],"sources":["C:/vsc/dament/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport WordList from \"./WordList\";\r\nimport type { Cell as CellType } from \"./anagramGenerator\";\r\nimport GameBoard from \"./GameBoard\";\r\nimport Timer from \"./Timer\";\r\nimport Results from \"./Results\";\r\n// import BackButton from \"./BackButton\";\r\nimport BackWordBoard from \"./BackWordBoard\";\r\nimport { generateBoard, findAllWordsOnBoard, ROUND_DURATION, PAUSE_DURATION, Cell, letterBonuses } from \"./anagramGenerator\";\r\nimport { BonusType } from \"./anagramGenerator\";\r\nimport { isWordInDictionary, gameDictionary } from \"./dictionary\";\r\nimport uiStrings from './ui-strings-categorized.json';\r\nimport { canFormWordOnBoard } from \"./anagramGenerator\";\r\n\r\n// ...дальнейший код компонента App без дублирующихся объявлений и мусора...\r\nconst getRandomWords = (count: number, dictionary: string[]): string[] => {\r\n  const shuffled = [...dictionary].sort(() => Math.random() - 0.5);\r\n  return shuffled.slice(0, count);\r\n};\r\n\r\nconst App: React.FC = () => {\r\n  // ВСЕ ХУКИ ДОЛЖНЫ БЫТЬ В САМОМ НАЧАЛЕ!\r\n  const [helpSelected, setHelpSelected] = useState<Array<[number, number]>>([]);\r\n  const [helpFlashColor, setHelpFlashColor] = useState<string | null>(null);\r\n  const [analyzerWordCount, setAnalyzerWordCount] = useState(0);\r\n  const [screen, setScreen] = useState<'welcome' | 'loading' | 'game' | 'help'>('welcome');\r\n  const [startFlashColor, setStartFlashColor] = useState<string | null>(null);\r\n  const [startSelected, setStartSelected] = useState<Array<[number, number]>>([]);\r\n  const [loadingProgress, setLoadingProgress] = useState<number>(0);\r\n  const [loadingMax, setLoadingMax] = useState<number>(0);\r\n  const [loadingTimer, setLoadingTimer] = useState<number>(5);\r\n  const [roundData, setRoundData] = useState<{ board: Cell[][], words: string[] } | null>(null);\r\n  const [timeLeft, setTimeLeft] = useState<number>(ROUND_DURATION);\r\n  const [foundWords, setFoundWords] = useState<string[]>([]);\r\n  const [score, setScore] = useState<number>(0);\r\n  const [message, setMessage] = useState<string>(\"\");\r\n  const [selectedCells, setSelectedCells] = useState<Array<[number, number]>>([]);\r\n  const [currentWord, setCurrentWord] = useState<string>(\"\");\r\n  const [flashColor, setFlashColor] = useState<string | null>(null);\r\n  const [phase, setPhase] = useState<'playing' | 'results' | 'analyzer' | null>(null);\r\n  \r\n  // useRef тоже должен быть в начале!\r\n  const startTouch = React.useRef<{y: number|null}>({y: null});\r\n\r\n  // Для свайп-старта\r\n  const START_WORD = 'СТАРТ';\r\n  // Слово СТАРТ в одну горизонтальную линию (1x5)\r\n  const startBoard: CellType[][] = [\r\n    [...START_WORD].map((letter, idx) => ({ letter, bonus: 'none', row: 0, col: idx }))\r\n  ];\r\n  \r\n  // Параметры генерации\r\n  const FIELD_SIZE = 4; // размер поля (4x4)\r\n  const MIN_WORDS = 15; // минимальное количество слов (снизили с 20)\r\n  const MAX_ATTEMPTS = 500; // увеличили количество попыток\r\n\r\n  const leaderboard = [\r\n    { name: \"Вы\", score }\r\n  ];\r\n\r\n  // Обработка завершения пути (свайп/drag)\r\n  const handlePathComplete = (path: Array<[number, number]>) => {\r\n    if (!roundData) return;\r\n    if (path.length < 3) {\r\n      setMessage(uiStrings.ошибки.минимумБукв);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    const word = path.map(([r, c]) => roundData.board[r][c].letter).join(\"\");\r\n    if (foundWords.includes(word)) {\r\n      setMessage(uiStrings.ошибки.ужеВводилось);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    if (!roundData.words.includes(word) || !isWordInDictionary(word)) {\r\n      setMessage(uiStrings.ошибки.нетСлова);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    // Подсчёт очков по бонусам букв\r\n    let wordScore = 0;\r\n    path.forEach(([r, c]) => {\r\n      const letter = roundData.board[r][c].letter.toUpperCase();\r\n      wordScore += letterBonuses[letter] || 0;\r\n    });\r\n    setScore(score + wordScore);\r\n    setFoundWords([...foundWords, word]);\r\n    setMessage(`+${wordScore} очков`);\r\n    setFlashColor('green');\r\n    setTimeout(() => setFlashColor(null), 300);\r\n    setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n  };\r\n\r\n  // Функция для возврата на стартовый экран\r\n  const goToWelcome = () => {\r\n    setScreen('welcome');\r\n    setPhase(null);\r\n    setRoundData(null);\r\n    setFoundWords([]);\r\n    setScore(0);\r\n    setMessage(\"\");\r\n    setSelectedCells([]);\r\n    setCurrentWord(\"\");\r\n  };\r\n\r\n  // useEffect для смены экранов во время загрузки\r\n  useEffect(() => {\r\n    if (screen === 'loading' && loadingTimer > 0) {\r\n      const timer = setTimeout(() => setLoadingTimer(loadingTimer - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    } else if (screen === 'loading' && loadingTimer === 0) {\r\n      setScreen('game');\r\n    }\r\n  }, [screen, loadingTimer]);\r\n\r\n  // useEffect для анимации загрузки\r\n  useEffect(() => {\r\n    if (screen === 'loading' && loadingProgress < loadingMax && loadingTimer > 0) {\r\n      const step = Math.ceil(loadingMax / (loadingTimer * 20));\r\n      const interval = setInterval(() => {\r\n        setLoadingProgress(prev => Math.min(prev + step, loadingMax));\r\n      }, 50);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [screen, loadingProgress, loadingMax, loadingTimer]);\r\n\r\n  // --- ГЛАВНЫЙ ТАЙМЕР ИГРЫ И ФАЗ ---\r\n  // Здесь реализованы все основные таймеры и переходы между фазами:\r\n  //\r\n  // 1. Анализатор (phase === 'analyzer')\r\n  //    - Это пауза между раундами, когда игроку показываются все слова на поле.\r\n  //    - Длительность этой паузы задаётся переменной PAUSE_DURATION (например, 15 секунд).\r\n  //    - Если хотите изменить — ищите PAUSE_DURATION (см. импорт сверху).\r\n  //\r\n  // 2. Игра (phase === 'playing')\r\n  //    - Это основной игровой раунд, когда игрок ищет слова.\r\n  //    - Длительность раунда задаётся переменной ROUND_DURATION (например, 60 секунд).\r\n  //    - Если хотите изменить — ищите ROUND_DURATION (см. импорт сверху).\r\n  //\r\n  // 3. Результаты (phase === 'results')\r\n  //    - Это короткая пауза после окончания игры, когда показываются результаты.\r\n  //    - Длительность задаётся жёстко в setTimeLeft(3) (3 секунды, можно изменить на любое число).\r\n  //\r\n  // После каждой фазы происходит переход к следующей с установкой нужного таймера.\r\n  //\r\n  // Схема переходов:\r\n  // [Анализатор (PAUSE_DURATION сек)] → [Игра (ROUND_DURATION сек)] → [Результаты (3 сек)] → [Анализатор ...]\r\n  //\r\n  // Пример: если PAUSE_DURATION = 15, ROUND_DURATION = 60, то цикл такой:\r\n  // 15 сек анализатор → 60 сек игра → 3 сек результаты → 15 сек анализатор ...\r\n  //\r\n  // Чтобы изменить длительность любой фазы, меняйте соответствующую переменную!\r\n  useEffect(() => {\r\n    // --- Фаза ИГРА ---\r\n    if (phase === 'playing' && timeLeft > 0) {\r\n      // Основной игровой таймер (по умолчанию 60 сек, регулируется ROUND_DURATION)\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'playing' && timeLeft === 0) {\r\n      // Игра закончилась — переходим к результатам\r\n      setSelectedCells([]);\r\n      setCurrentWord(\"\");\r\n      setPhase('results');\r\n      setTimeLeft(10); // <--- Длительность экрана результатов (10 сек, можно изменить)\r\n    }\r\n    // --- Фаза РЕЗУЛЬТАТЫ ---\r\n    if (phase === 'results' && timeLeft > 0) {\r\n      // Таймер результатов (короткая пауза между игрой и анализатором)\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'results' && timeLeft === 0) {\r\n      // После результатов — генерируем новое поле и переходим к анализатору\r\n      const words = getRandomWords(6, gameDictionary);\r\n      const board = generateBoard({ name: \"\", reward: \"\", words });\r\n      const allPossibleWords = findAllWordsOnBoard(board).filter(word => word.length >= 3);\r\n      setRoundData({ board, words: allPossibleWords });\r\n      setPhase('analyzer');\r\n      setTimeLeft(PAUSE_DURATION); // <--- Длительность анализатора (по умолчанию 15 сек, регулируется PAUSE_DURATION)\r\n      setAnalyzerWordCount(0); // сбрасываем счетчик для анимации\r\n    }\r\n    // --- Фаза АНАЛИЗАТОР ---\r\n    if (phase === 'analyzer' && timeLeft > 0) {\r\n      // Таймер анализатора (показывает слова перед началом игры)\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'analyzer' && timeLeft === 0) {\r\n      // Анализатор закончился — начинаем новый игровой раунд\r\n      setFoundWords([]);\r\n      setPhase('playing');\r\n      setTimeLeft(ROUND_DURATION); // <--- Длительность игры (по умолчанию 60 сек, регулируется ROUND_DURATION)\r\n    }\r\n  }, [timeLeft, phase]);\r\n\r\n  // Анимация увеличения числа найденных слов на анализаторе\r\n  useEffect(() => {\r\n    if (phase === 'analyzer' && roundData) {\r\n      setAnalyzerWordCount(0);\r\n      let current = 0;\r\n      const target = roundData.words.length;\r\n      const duration = Math.max(800, Math.min(2000, target * 40)); // 0.8-2 сек\r\n      const stepTime = Math.max(20, duration / (target || 1));\r\n      const interval = setInterval(() => {\r\n        current++;\r\n        setAnalyzerWordCount(prev => {\r\n          if (prev < target) return prev + 1;\r\n          clearInterval(interval);\r\n          return prev;\r\n        });\r\n        if (current >= target) {\r\n          clearInterval(interval);\r\n        }\r\n      }, stepTime);\r\n      \r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [phase, roundData]);\r\n\r\n  const phoneFrameStyle: React.CSSProperties = {\r\n    overflow: 'hidden',\r\n    position: 'relative',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'stretch',\r\n    justifyContent: 'flex-start',\r\n    minWidth: 0,\r\n    minHeight: 0,\r\n    width: '100vw',\r\n    maxWidth: 430,\r\n    height: '100vh',\r\n    maxHeight: 932,\r\n    margin: '0 auto',\r\n    borderRadius: 36,\r\n    border: '8px solid #222',\r\n    boxShadow: '0 0 32px #0006',\r\n    background: '#111',\r\n  };\r\n  const phoneContentStyle: React.CSSProperties = {\r\n    width: '100%',\r\n    height: '100%',\r\n    background: '#fff',\r\n    overflowY: 'auto',\r\n    WebkitOverflowScrolling: 'touch',\r\n    borderRadius: 28,\r\n    position: 'relative',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'stretch',\r\n    justifyContent: 'flex-start',\r\n    minWidth: 0,\r\n    minHeight: 0\r\n  };\r\n\r\n  // Свайп-старт по слову СТАРТ\r\n  const handleStartPath = (path: Array<[number, number]>) => {\r\n    const word = path.map(([r, c]) => startBoard[r][c].letter).join(\"\");\r\n    if (word === START_WORD) {\r\n      setStartFlashColor('green');\r\n      setTimeout(() => {\r\n        // Генерируем поле и слова для нового раунда\r\n        const words = getRandomWords(6, gameDictionary);\r\n        const board = generateBoard({ name: \"\", reward: \"\", words });\r\n        const allPossibleWords = findAllWordsOnBoard(board).filter(word => word.length >= 3);\r\n        setRoundData({ board, words: allPossibleWords });\r\n        setScore(0); // сбрасываем очки\r\n        setPhase('analyzer'); // Запускаем анализатор\r\n        setTimeLeft(PAUSE_DURATION); // Длительность анализатора\r\n        setAnalyzerWordCount(0);\r\n        setStartSelected([]);\r\n        setStartFlashColor(null);\r\n      }, 350);\r\n    } else {\r\n      setStartFlashColor('red');\r\n      setTimeout(() => {\r\n        setStartSelected([]);\r\n        setStartFlashColor(null);\r\n      }, 350);\r\n    }\r\n    };\r\n\r\n  // Обёртка для любого экрана внутри рамки смартфона\r\n  const renderPhoneFrame = (content: React.ReactNode) => (\r\n    <div style={{ background: '#222', minHeight: '100vh', minWidth: '100vw', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n      <div style={phoneFrameStyle}>\r\n        <div style={phoneContentStyle}>\r\n          {content}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // Экран справки\r\n  if (screen === 'help') {\r\n    return renderPhoneFrame(\r\n      <div style={{ fontFamily: 'sans-serif', padding: '4vw', width: '100%', maxWidth: 430, margin: '0 auto', textAlign: 'center', boxSizing: 'border-box', position: 'relative' }}>\r\n        <BackWordBoard\r\n          word=\"НАЗАД\"\r\n          onPathComplete={() => goToWelcome()}\r\n        />\r\n        <h1 style={{ fontSize: '2.2rem', margin: '2vw 0 2vw 0' }}>Фундамент</h1>\r\n        <div style={{ fontSize: '1.2rem', margin: '6vw 0' }}>Справка будет добавлена позже.</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Экран игры и анализатора\r\n  if (phase === 'analyzer' && roundData) {\r\n    return renderPhoneFrame(\r\n      <div style={{ fontFamily: 'sans-serif', padding: '4vw', width: '100%', maxWidth: 430, margin: '0 auto', textAlign: 'center', position: 'relative', boxSizing: 'border-box' }}>\r\n        <BackWordBoard\r\n          word=\"НАЗАД\"\r\n          onPathComplete={() => goToWelcome()}\r\n        />\r\n        <h2 style={{ fontSize: '1.3rem', margin: '2vw 0 2vw 0' }}>Анализатор поля</h2>\r\n        <div style={{ fontSize: '1.1rem', margin: '4vw 0' }}>Найдено слов: <b>{analyzerWordCount}</b></div>\r\n        <div style={{ fontSize: '1rem', color: '#1976d2', marginBottom: '3vw' }}>До начала игры: {timeLeft} сек.</div>\r\n        <div style={{ margin: '3vw 0', padding: '2vw', background: '#f5f5f5', borderRadius: 8, fontSize: '0.95rem', color: '#333', maxHeight: 180, overflowY: 'auto' }}>\r\n          <b>Все слова на поле (с очками):</b>\r\n          <WordList\r\n            words={roundData.words\r\n              .map(word => ({\r\n                word,\r\n                score: word.split('').reduce((sum, letter) => sum + (letterBonuses[letter.toUpperCase()] || 0), 0)\r\n              }))\r\n              .sort((a, b) => b.score - a.score)\r\n              .slice(0, analyzerWordCount)\r\n              .map(({ word }) => word)\r\n            }\r\n            showScore={true}\r\n            getScore={word => word.split('').reduce((sum, letter) => sum + (letterBonuses[letter.toUpperCase()] || 0), 0)}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  // Экран игры\r\n  if (roundData) {\r\n    return renderPhoneFrame(\r\n      <div style={{ fontFamily: 'sans-serif', padding: '4vw', width: '100%', maxWidth: 430, margin: '0 auto', position: 'relative', boxSizing: 'border-box' }}>\r\n        <BackWordBoard\r\n          word=\"НАЗАД\"\r\n          onPathComplete={() => goToWelcome()}\r\n        />\r\n        <h1 style={{ fontSize: '2.2rem', margin: '2vw 0 2vw 0' }}>Фундамент</h1>\r\n        <div style={{ fontSize: '1.2rem', fontWeight: 600, marginBottom: '2vw' }}>\r\n          {phase === 'playing' ? uiStrings.игра.заголовок : uiStrings.результаты.заголовок}\r\n          {' '}\r\n          <span style={{ fontSize: '1.1rem', fontWeight: 400, color: '#1976d2' }}>\r\n            {timeLeft} сек.\r\n          </span>\r\n        </div>\r\n        <div style={{ minHeight: 32, color: message.includes(uiStrings.прочее.очков) ? 'green' : 'red', fontWeight: 500 }}>{message}</div>\r\n        <div style={{ marginBottom: '2vw' }}>{uiStrings.игра.очки}: {score}</div>\r\n        <GameBoard \r\n          board={roundData.board} \r\n          selectedCells={selectedCells}\r\n          onPathComplete={phase === 'playing' ? handlePathComplete : undefined}\r\n          onDragUpdate={phase === 'playing' ? setSelectedCells : undefined}\r\n          flashColor={flashColor}\r\n        />\r\n        {/* ОТЛАДКА: выводим все возможные слова на этом поле */}\r\n        <div style={{ margin: '3vw 0', padding: '2vw', background: '#f5f5f5', borderRadius: 8, fontSize: '0.95rem', color: '#333', maxHeight: 120, overflowY: 'auto' }}>\r\n          <b>Все слова на поле ({roundData.words.length}):</b>\r\n          <WordList words={roundData.words} />\r\n        </div>\r\n        {phase === 'results' && (\r\n          <>\r\n            <div style={{\r\n              margin: '3vw 0',\r\n              padding: '2vw',\r\n              background: '#e3f2fd',\r\n              borderRadius: 8,\r\n              fontSize: '1.15rem',\r\n              color: '#1976d2',\r\n              textAlign: 'center',\r\n              fontWeight: 600\r\n            }}>\r\n              <div>Раунд завершён!</div>\r\n              <div style={{ marginTop: 8 }}>Ваш результат: <b style={{ color: '#1565c0', fontSize: '1.3em' }}>{score} очков</b></div>\r\n            </div>\r\n            <Results \r\n              foundWords={foundWords} \r\n              possibleWords={roundData.words} \r\n              leaderboard={leaderboard}\r\n              usedWords={roundData.words}\r\n            />\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // Стартовый экран с двумя плитками GameBoard: \"СТАРТ\" и \"СПРАВКА\"\r\n  const HELP_WORD = 'СПРАВКА';\r\n  const helpBoard: CellType[][] = [\r\n    [...HELP_WORD].map((letter, idx) => ({ letter, bonus: 'none', row: 0, col: idx }))\r\n  ];\r\n\r\n  // Обработчик свайпа по \"СПРАВКА\"\r\n  const handleHelpPath = (path: Array<[number, number]>) => {\r\n    // Проверяем, что проведены все буквы СПРАВКА подряд\r\n    if (path.length === HELP_WORD.length && path.every(([r, c], idx) => r === 0 && c === idx)) {\r\n      setScreen('help');\r\n      setHelpSelected([]);\r\n      setHelpFlashColor('green');\r\n      setTimeout(() => setHelpFlashColor(null), 300);\r\n    } else {\r\n      setHelpFlashColor('red');\r\n      setTimeout(() => setHelpFlashColor(null), 300);\r\n      setTimeout(() => setHelpSelected([]), 350);\r\n    }\r\n  };\r\n  // Обработчик свайпа вверх\r\n  const handleStartTouchStart = (e: React.TouchEvent) => {\r\n    startTouch.current.y = e.touches[0].clientY;\r\n  };\r\n  const handleStartTouchEnd = (e: React.TouchEvent) => {\r\n    if (startTouch.current.y !== null) {\r\n      const deltaY = startTouch.current.y - e.changedTouches[0].clientY;\r\n      if (deltaY > 50) { // свайп вверх\r\n        setScreen('help');\r\n      }\r\n    }\r\n    startTouch.current.y = null;\r\n  };\r\n  return renderPhoneFrame(\r\n    <div\r\n      style={{ fontFamily: 'sans-serif', padding: '4vw', width: '100%', maxWidth: 430, margin: '0 auto', textAlign: 'center', boxSizing: 'border-box', minHeight: '100vh', display: 'flex', flexDirection: 'column', justifyContent: 'center', gap: '6vw' }}\r\n    >\r\n      <h1 style={{ fontSize: '2.2rem', margin: '2vw 0 4vw 0' }}>Фундамент</h1>\r\n      <div style={{ display: 'flex', flexDirection: 'column', gap: '5vw', alignItems: 'center' }}>\r\n        <div style={{ minWidth: 180, width: '60vw', maxWidth: 320 }}>\r\n          <GameBoard\r\n            board={startBoard}\r\n            selectedCells={startSelected}\r\n            onPathComplete={handleStartPath}\r\n            onDragUpdate={setStartSelected}\r\n            flashColor={startFlashColor}\r\n            columnsCount={START_WORD.length}\r\n          />\r\n          <div style={{ fontSize: '1rem', color: '#888', margin: '1vw 0 0 0' }}>Проведите по буквам, чтобы начать</div>\r\n        </div>\r\n        <div style={{ minWidth: 180, width: '60vw', maxWidth: 320 }}>\r\n          <GameBoard\r\n            board={helpBoard}\r\n            selectedCells={helpSelected}\r\n            onPathComplete={handleHelpPath}\r\n            onDragUpdate={setHelpSelected}\r\n            flashColor={helpFlashColor}\r\n            columnsCount={HELP_WORD.length}\r\n          />\r\n          <div style={{ fontSize: '1rem', color: '#888', margin: '1vw 0 0 0' }}>Проведите по буквам, чтобы открыть справку</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
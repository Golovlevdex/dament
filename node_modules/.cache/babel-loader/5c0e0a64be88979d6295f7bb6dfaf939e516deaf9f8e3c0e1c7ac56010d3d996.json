{"ast":null,"code":"var _jsxFileName = \"C:\\\\vsc\\\\dament\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport GameBoard from \"./GameBoard\";\n// import WordInput from \"./WordInput\";\nimport Results from \"./Results\";\n// Импортируем игровую логику\nimport { generateBoard, findAllWordsOnBoard, ROUND_DURATION, PAUSE_DURATION, letterBonuses } from \"./anagramGenerator\";\nimport { isWordInDictionary, gameDictionary } from \"./dictionary\";\nimport uiStrings from './ui-strings-categorized.json';\nimport { canFormWordOnBoard } from \"./anagramGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getRandomWords = (count, dictionary) => {\n  const shuffled = [...dictionary].sort(() => Math.random() - 0.5);\n  return shuffled.slice(0, count);\n};\nconst App = () => {\n  _s();\n  const [screen, setScreen] = useState('welcome');\n  const [usedWords, setUsedWords] = useState([]);\n  const [board, setBoard] = useState(() => {\n    // Генерируем поле, а потом находим все слова, которые реально можно составить\n    const words = getRandomWords(6, gameDictionary);\n    const board = generateBoard({\n      name: \"\",\n      reward: \"\",\n      words\n    });\n    // После генерации поля ищем все возможные слова\n    const allPossibleWords = findAllWordsOnBoard(board);\n    setUsedWords(allPossibleWords);\n    return board;\n  });\n  const [timeLeft, setTimeLeft] = useState(ROUND_DURATION);\n  const [foundWords, setFoundWords] = useState([]);\n  const [score, setScore] = useState(0);\n  const [message, setMessage] = useState(\"\");\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [currentWord, setCurrentWord] = useState(\"\");\n  const [flashColor, setFlashColor] = useState(null);\n  const [phase, setPhase] = useState('playing');\n  const [possibleWords, setPossibleWords] = useState([]);\n  const leaderboard = [{\n    name: \"Вы\",\n    score\n  }];\n\n  // Таймер\n  useEffect(() => {\n    if (phase === 'playing' && timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n    if (phase === 'playing' && timeLeft === 0) {\n      // Переход к результатам\n      setPossibleWords(usedWords.filter(word => canFormWordOnBoard(word, board)));\n      setSelectedCells([]); // сброс выделения\n      setCurrentWord(\"\"); // сброс текущего слова\n      setPhase('results');\n      setTimeLeft(PAUSE_DURATION);\n    }\n    if (phase === 'results' && timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n    if (phase === 'results' && timeLeft === 0) {\n      // Новый раунд\n      const words = getRandomWords(6, gameDictionary);\n      const board = generateBoard({\n        name: \"\",\n        reward: \"\",\n        words\n      });\n      // После генерации поля ищем все возможные слова\n      const allPossibleWords = findAllWordsOnBoard(board);\n      setUsedWords(allPossibleWords);\n      setBoard(board);\n      setFoundWords([]);\n      setPhase('playing');\n      setTimeLeft(ROUND_DURATION);\n    }\n  }, [timeLeft, phase, board]);\n\n  // Обработка завершения пути (свайп/drag)\n  const handlePathComplete = path => {\n    if (path.length < 3) {\n      setMessage(uiStrings.ошибки.минимумБукв);\n      setFlashColor('red');\n      setTimeout(() => setFlashColor(null), 300);\n      setTimeout(() => {\n        setMessage(\"\");\n        setSelectedCells([]);\n        setCurrentWord(\"\");\n      }, 350);\n      return;\n    }\n    const word = path.map(([r, c]) => board[r][c].letter).join(\"\");\n    const allWords = findAllWordsOnBoard(board);\n    if (foundWords.includes(word)) {\n      setMessage(uiStrings.ошибки.ужеВводилось);\n      setFlashColor('red');\n      setTimeout(() => setFlashColor(null), 300);\n      setTimeout(() => {\n        setMessage(\"\");\n        setSelectedCells([]);\n        setCurrentWord(\"\");\n      }, 350);\n      return;\n    }\n    if (!allWords.includes(word) || !isWordInDictionary(word)) {\n      setMessage(uiStrings.ошибки.нетСлова);\n      setFlashColor('red');\n      setTimeout(() => setFlashColor(null), 300);\n      setTimeout(() => {\n        setMessage(\"\");\n        setSelectedCells([]);\n        setCurrentWord(\"\");\n      }, 350);\n      return;\n    }\n    // Подсчёт очков по бонусам букв\n    let wordScore = 0;\n    path.forEach(([r, c]) => {\n      const letter = board[r][c].letter.toUpperCase();\n      wordScore += letterBonuses[letter] || 0;\n    });\n    setScore(score + wordScore);\n    setFoundWords([...foundWords, word]);\n    setMessage(`+${wordScore} очков`);\n    setFlashColor('green');\n    setTimeout(() => setFlashColor(null), 300);\n    setTimeout(() => {\n      setMessage(\"\");\n      setSelectedCells([]);\n      setCurrentWord(\"\");\n    }, 350);\n  };\n\n  // Проверка слова при завершении выбора (например, тап по последней клетке или авто)\n  useEffect(() => {\n    // Проверяем только если длина слова >= 3\n    if (currentWord.length >= 3) {\n      // Проверяем, есть ли слово в возможных\n      const allWords = findAllWordsOnBoard(board);\n      if (allWords.includes(currentWord) && !foundWords.includes(currentWord)) {\n        setFoundWords([...foundWords, currentWord]);\n        setFlashColor('green');\n        setTimeout(() => setFlashColor(null), 300);\n        setTimeout(() => {\n          setSelectedCells([]);\n          setCurrentWord(\"\");\n        }, 350);\n      } else if (currentWord.length > 3 && !allWords.includes(currentWord)) {\n        setFlashColor('red');\n        setTimeout(() => setFlashColor(null), 300);\n        setTimeout(() => {\n          setSelectedCells([]);\n          setCurrentWord(\"\");\n        }, 350);\n      }\n    }\n  }, [currentWord]);\n  if (screen === 'welcome') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: 'sans-serif',\n        padding: 24,\n        maxWidth: 600,\n        margin: '0 auto',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0424\\u0443\\u043D\\u0434\\u0430\\u043C\\u0435\\u043D\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          margin: 12,\n          padding: '12px 32px',\n          fontSize: 18,\n          cursor: 'pointer'\n        },\n        onClick: () => setScreen('game'),\n        children: \"\\u0421\\u0442\\u0430\\u0440\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          margin: 12,\n          padding: '12px 32px',\n          fontSize: 18,\n          cursor: 'pointer'\n        },\n        onClick: () => setScreen('help'),\n        children: \"\\u0421\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this);\n  }\n  if (screen === 'help') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: 'sans-serif',\n        padding: 24,\n        maxWidth: 600,\n        margin: '0 auto',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0424\\u0443\\u043D\\u0434\\u0430\\u043C\\u0435\\u043D\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: 20,\n          margin: '32px 0'\n        },\n        children: \"\\u0421\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430 \\u0431\\u0443\\u0434\\u0435\\u0442 \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u0430 \\u043F\\u043E\\u0437\\u0436\\u0435.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          margin: 12,\n          padding: '12px 32px',\n          fontSize: 18,\n          cursor: 'pointer'\n        },\n        onClick: () => setScreen('welcome'),\n        children: \"\\u041D\\u0430\\u0437\\u0430\\u0434\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this);\n  }\n  // Экран игры\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontFamily: 'sans-serif',\n      padding: 24,\n      maxWidth: 600,\n      margin: '0 auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0424\\u0443\\u043D\\u0434\\u0430\\u043C\\u0435\\u043D\\u0442\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: 20,\n        fontWeight: 600,\n        marginBottom: 8\n      },\n      children: [phase === 'playing' ? uiStrings.игра.заголовок : uiStrings.результаты.заголовок, ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontSize: 18,\n          fontWeight: 400,\n          color: '#1976d2'\n        },\n        children: [timeLeft, \" \\u0441\\u0435\\u043A.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        minHeight: 32,\n        color: message.includes(uiStrings.прочее.очков) ? 'green' : 'red',\n        fontWeight: 500\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 8\n      },\n      children: [uiStrings.игра.очки, \": \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n      board: board,\n      selectedCells: selectedCells,\n      onPathComplete: phase === 'playing' ? handlePathComplete : undefined,\n      onDragUpdate: phase === 'playing' ? setSelectedCells : undefined,\n      flashColor: flashColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), phase === 'results' && /*#__PURE__*/_jsxDEV(Results, {\n      foundWords: foundWords,\n      possibleWords: possibleWords,\n      leaderboard: leaderboard,\n      usedWords: usedWords\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"fIPVqchB1sbV5s7xysi9ED5hBdo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","GameBoard","Results","generateBoard","findAllWordsOnBoard","ROUND_DURATION","PAUSE_DURATION","letterBonuses","isWordInDictionary","gameDictionary","uiStrings","canFormWordOnBoard","jsxDEV","_jsxDEV","getRandomWords","count","dictionary","shuffled","sort","Math","random","slice","App","_s","screen","setScreen","usedWords","setUsedWords","board","setBoard","words","name","reward","allPossibleWords","timeLeft","setTimeLeft","foundWords","setFoundWords","score","setScore","message","setMessage","selectedCells","setSelectedCells","currentWord","setCurrentWord","flashColor","setFlashColor","phase","setPhase","possibleWords","setPossibleWords","leaderboard","timer","setTimeout","clearTimeout","filter","word","handlePathComplete","path","length","ошибки","минимумБукв","map","r","c","letter","join","allWords","includes","ужеВводилось","нетСлова","wordScore","forEach","toUpperCase","style","fontFamily","padding","maxWidth","margin","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","cursor","onClick","fontWeight","marginBottom","игра","заголовок","результаты","color","minHeight","прочее","очков","очки","onPathComplete","undefined","onDragUpdate","_c","$RefreshReg$"],"sources":["C:/vsc/dament/src/App.tsx"],"sourcesContent":["\r\nimport React, { useState, useEffect } from \"react\";\r\nimport GameBoard from \"./GameBoard\";\r\nimport Timer from \"./Timer\";\r\n// import WordInput from \"./WordInput\";\r\nimport Results from \"./Results\";\r\n// Импортируем игровую логику\r\nimport { generateBoard, findAllWordsOnBoard, ROUND_DURATION, PAUSE_DURATION, Cell, letterBonuses } from \"./anagramGenerator\";\r\nimport { isWordInDictionary, gameDictionary } from \"./dictionary\";\r\nimport uiStrings from './ui-strings-categorized.json';\r\nimport { canFormWordOnBoard } from \"./anagramGenerator\";\r\n\r\n\r\n\r\nconst getRandomWords = (count: number, dictionary: string[]): string[] => {\r\n  const shuffled = [...dictionary].sort(() => Math.random() - 0.5);\r\n  return shuffled.slice(0, count);\r\n};\r\n\r\nconst App: React.FC = () => {\r\n  const [screen, setScreen] = useState<'welcome' | 'game' | 'help'>('welcome');\r\n  const [usedWords, setUsedWords] = useState<string[]>([]);\r\n  const [board, setBoard] = useState<Cell[][]>(() => {\r\n    // Генерируем поле, а потом находим все слова, которые реально можно составить\r\n    const words = getRandomWords(6, gameDictionary);\r\n    const board = generateBoard({ name: \"\", reward: \"\", words });\r\n    // После генерации поля ищем все возможные слова\r\n    const allPossibleWords = findAllWordsOnBoard(board);\r\n    setUsedWords(allPossibleWords);\r\n    return board;\r\n  });\r\n  const [timeLeft, setTimeLeft] = useState<number>(ROUND_DURATION);\r\n  const [foundWords, setFoundWords] = useState<string[]>([]);\r\n  const [score, setScore] = useState<number>(0);\r\n  const [message, setMessage] = useState<string>(\"\");\r\n  const [selectedCells, setSelectedCells] = useState<Array<[number, number]>>([]);\r\n  const [currentWord, setCurrentWord] = useState<string>(\"\");\r\n  const [flashColor, setFlashColor] = useState<string | null>(null);\r\n  const [phase, setPhase] = useState<'playing' | 'results'>('playing');\r\n  const [possibleWords, setPossibleWords] = useState<string[]>([]);\r\n  const leaderboard = [\r\n    { name: \"Вы\", score }\r\n  ];\r\n\r\n  // Таймер\r\n  useEffect(() => {\r\n    if (phase === 'playing' && timeLeft > 0) {\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'playing' && timeLeft === 0) {\r\n      // Переход к результатам\r\n      setPossibleWords(usedWords.filter(word => canFormWordOnBoard(word, board)));\r\n      setSelectedCells([]); // сброс выделения\r\n      setCurrentWord(\"\"); // сброс текущего слова\r\n      setPhase('results');\r\n      setTimeLeft(PAUSE_DURATION);\r\n    }\r\n    if (phase === 'results' && timeLeft > 0) {\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'results' && timeLeft === 0) {\r\n      // Новый раунд\r\n      const words = getRandomWords(6, gameDictionary);\r\n      const board = generateBoard({ name: \"\", reward: \"\", words });\r\n      // После генерации поля ищем все возможные слова\r\n      const allPossibleWords = findAllWordsOnBoard(board);\r\n      setUsedWords(allPossibleWords);\r\n      setBoard(board);\r\n      setFoundWords([]);\r\n      setPhase('playing');\r\n      setTimeLeft(ROUND_DURATION);\r\n    }\r\n  }, [timeLeft, phase, board]);\r\n\r\n\r\n\r\n  // Обработка завершения пути (свайп/drag)\r\n  const handlePathComplete = (path: Array<[number, number]>) => {\r\n    if (path.length < 3) {\r\n      setMessage(uiStrings.ошибки.минимумБукв);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    const word = path.map(([r, c]) => board[r][c].letter).join(\"\");\r\n    const allWords = findAllWordsOnBoard(board);\r\n    if (foundWords.includes(word)) {\r\n      setMessage(uiStrings.ошибки.ужеВводилось);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    if (!allWords.includes(word) || !isWordInDictionary(word)) {\r\n      setMessage(uiStrings.ошибки.нетСлова);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    // Подсчёт очков по бонусам букв\r\n    let wordScore = 0;\r\n    path.forEach(([r, c]) => {\r\n      const letter = board[r][c].letter.toUpperCase();\r\n      wordScore += letterBonuses[letter] || 0;\r\n    });\r\n    setScore(score + wordScore);\r\n    setFoundWords([...foundWords, word]);\r\n    setMessage(`+${wordScore} очков`);\r\n    setFlashColor('green');\r\n    setTimeout(() => setFlashColor(null), 300);\r\n    setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n  };\r\n\r\n  // Проверка слова при завершении выбора (например, тап по последней клетке или авто)\r\n  useEffect(() => {\r\n    // Проверяем только если длина слова >= 3\r\n    if (currentWord.length >= 3) {\r\n      // Проверяем, есть ли слово в возможных\r\n      const allWords = findAllWordsOnBoard(board);\r\n      if (allWords.includes(currentWord) && !foundWords.includes(currentWord)) {\r\n        setFoundWords([...foundWords, currentWord]);\r\n        setFlashColor('green');\r\n        setTimeout(() => setFlashColor(null), 300);\r\n        setTimeout(() => {\r\n          setSelectedCells([]);\r\n          setCurrentWord(\"\");\r\n        }, 350);\r\n      } else if (currentWord.length > 3 && !allWords.includes(currentWord)) {\r\n        setFlashColor('red');\r\n        setTimeout(() => setFlashColor(null), 300);\r\n        setTimeout(() => {\r\n          setSelectedCells([]);\r\n          setCurrentWord(\"\");\r\n        }, 350);\r\n      }\r\n    }\r\n  }, [currentWord]);\r\n\r\n  if (screen === 'welcome') {\r\n    return (\r\n      <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto', textAlign: 'center' }}>\r\n        <h1>Фундамент</h1>\r\n        <button style={{ margin: 12, padding: '12px 32px', fontSize: 18, cursor: 'pointer' }} onClick={() => setScreen('game')}>Старт</button>\r\n        <button style={{ margin: 12, padding: '12px 32px', fontSize: 18, cursor: 'pointer' }} onClick={() => setScreen('help')}>Справка</button>\r\n      </div>\r\n    );\r\n  }\r\n  if (screen === 'help') {\r\n    return (\r\n      <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto', textAlign: 'center' }}>\r\n        <h1>Фундамент</h1>\r\n        <div style={{ fontSize: 20, margin: '32px 0' }}>Справка будет добавлена позже.</div>\r\n        <button style={{ margin: 12, padding: '12px 32px', fontSize: 18, cursor: 'pointer' }} onClick={() => setScreen('welcome')}>Назад</button>\r\n      </div>\r\n    );\r\n  }\r\n  // Экран игры\r\n  return (\r\n    <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto' }}>\r\n      <h1>Фундамент</h1>\r\n      <div style={{ fontSize: 20, fontWeight: 600, marginBottom: 8 }}>\r\n        {phase === 'playing' ? uiStrings.игра.заголовок : uiStrings.результаты.заголовок}\r\n        {' '}\r\n        <span style={{ fontSize: 18, fontWeight: 400, color: '#1976d2' }}>\r\n          {timeLeft} сек.\r\n        </span>\r\n      </div>\r\n      <div style={{ minHeight: 32, color: message.includes(uiStrings.прочее.очков) ? 'green' : 'red', fontWeight: 500 }}>{message}</div>\r\n      <div style={{ marginBottom: 8 }}>{uiStrings.игра.очки}: {score}</div>\r\n      <GameBoard \r\n        board={board} \r\n        selectedCells={selectedCells}\r\n        onPathComplete={phase === 'playing' ? handlePathComplete : undefined}\r\n        onDragUpdate={phase === 'playing' ? setSelectedCells : undefined}\r\n        flashColor={flashColor}\r\n      />\r\n      {phase === 'results' && (\r\n        <Results \r\n          foundWords={foundWords} \r\n          possibleWords={possibleWords} \r\n          leaderboard={leaderboard}\r\n          usedWords={usedWords}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
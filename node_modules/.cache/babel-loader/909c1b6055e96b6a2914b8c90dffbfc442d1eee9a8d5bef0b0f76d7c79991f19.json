{"ast":null,"code":"var _jsxFileName = \"C:\\\\vsc\\\\dament\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport GameBoard from \"./GameBoard.tsx\";\nimport Timer from \"./Timer.tsx\";\n// import WordInput from \"./WordInput.tsx\";\nimport Results from \"./Results.tsx\";\n// Импортируем игровую логику\nimport { generateBoard, findAllWordsOnBoard, ROUND_DURATION, PAUSE_DURATION } from \"./anagramGenerator.ts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockLeaderboard = [{\n  name: \"Игрок 1\",\n  score: 12\n}, {\n  name: \"Игрок 2\",\n  score: 8\n}, {\n  name: \"Игрок 3\",\n  score: 5\n}];\nconst App = () => {\n  _s();\n  const [board, setBoard] = useState(generateBoard());\n  const [timeLeft, setTimeLeft] = useState(ROUND_DURATION);\n  const [foundWords, setFoundWords] = useState([]);\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [currentWord, setCurrentWord] = useState(\"\");\n  const [flashColor, setFlashColor] = useState(null); // 'green' | 'red' | null\n  const [phase, setPhase] = useState('playing');\n  const [possibleWords, setPossibleWords] = useState([]);\n\n  // Таймер\n  useEffect(() => {\n    if (phase === 'playing' && timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n    if (phase === 'playing' && timeLeft === 0) {\n      // Переход к результатам\n      setPossibleWords(findAllWordsOnBoard(board));\n      setPhase('results');\n      setTimeLeft(PAUSE_DURATION);\n    }\n    if (phase === 'results' && timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n    if (phase === 'results' && timeLeft === 0) {\n      // Новый раунд\n      setBoard(generateBoard());\n      setFoundWords([]);\n      setPhase('playing');\n      setTimeLeft(ROUND_DURATION);\n    }\n  }, [timeLeft, phase, board]);\n\n  // Обработка выбора клетки\n  const handleCellSelect = (row, col) => {\n    // Не даём выбрать одну клетку дважды\n    if (selectedCells.some(([r, c]) => r === row && c === col)) return;\n    setSelectedCells([...selectedCells, [row, col]]);\n    setCurrentWord(currentWord + board[row][col]);\n  };\n\n  // Проверка слова при завершении выбора (например, тап по последней клетке или авто)\n  useEffect(() => {\n    // Проверяем только если длина слова >= 3\n    if (currentWord.length >= 3) {\n      // Проверяем, есть ли слово в возможных\n      const allWords = findAllWordsOnBoard(board);\n      if (allWords.includes(currentWord) && !foundWords.includes(currentWord)) {\n        setFoundWords([...foundWords, currentWord]);\n        setFlashColor('green');\n        setTimeout(() => setFlashColor(null), 300);\n        setTimeout(() => {\n          setSelectedCells([]);\n          setCurrentWord(\"\");\n        }, 350);\n      } else if (currentWord.length > 3 && !allWords.includes(currentWord)) {\n        setFlashColor('red');\n        setTimeout(() => setFlashColor(null), 300);\n        setTimeout(() => {\n          setSelectedCells([]);\n          setCurrentWord(\"\");\n        }, 350);\n      }\n    }\n  }, [currentWord]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontFamily: 'sans-serif',\n      padding: 24,\n      maxWidth: 600,\n      margin: '0 auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dament\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Timer, {\n      seconds: timeLeft\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n      board: board,\n      selectedCells: selectedCells,\n      onCellSelect: phase === 'playing' ? handleCellSelect : undefined,\n      flashColor: flashColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), phase === 'results' && /*#__PURE__*/_jsxDEV(Results, {\n      foundWords: foundWords,\n      possibleWords: possibleWords,\n      leaderboard: mockLeaderboard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"q784mnxZQW7AvU8y4NbNo2BohTw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","GameBoard","Timer","Results","generateBoard","findAllWordsOnBoard","ROUND_DURATION","PAUSE_DURATION","jsxDEV","_jsxDEV","mockLeaderboard","name","score","App","_s","board","setBoard","timeLeft","setTimeLeft","foundWords","setFoundWords","selectedCells","setSelectedCells","currentWord","setCurrentWord","flashColor","setFlashColor","phase","setPhase","possibleWords","setPossibleWords","timer","setTimeout","clearTimeout","handleCellSelect","row","col","some","r","c","length","allWords","includes","style","fontFamily","padding","maxWidth","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","seconds","onCellSelect","undefined","leaderboard","_c","$RefreshReg$"],"sources":["C:/vsc/dament/src/App.tsx"],"sourcesContent":["\r\nimport React, { useState, useEffect } from \"react\";\r\nimport GameBoard from \"./GameBoard.tsx\";\r\nimport Timer from \"./Timer.tsx\";\r\n// import WordInput from \"./WordInput.tsx\";\r\nimport Results from \"./Results.tsx\";\r\n// Импортируем игровую логику\r\nimport { generateBoard, findAllWordsOnBoard, ROUND_DURATION, PAUSE_DURATION } from \"./anagramGenerator.ts\";\r\n\r\nconst mockLeaderboard = [\r\n  { name: \"Игрок 1\", score: 12 },\r\n  { name: \"Игрок 2\", score: 8 },\r\n  { name: \"Игрок 3\", score: 5 }\r\n];\r\n\r\nconst App: React.FC = () => {\r\n  const [board, setBoard] = useState<string[][]>(generateBoard());\r\n  const [timeLeft, setTimeLeft] = useState<number>(ROUND_DURATION);\r\n  const [foundWords, setFoundWords] = useState<string[]>([]);\r\n  const [selectedCells, setSelectedCells] = useState<Array<[number, number]>>([]);\r\n  const [currentWord, setCurrentWord] = useState<string>(\"\");\r\n  const [flashColor, setFlashColor] = useState<string | null>(null); // 'green' | 'red' | null\r\n  const [phase, setPhase] = useState<'playing' | 'results'>('playing');\r\n  const [possibleWords, setPossibleWords] = useState<string[]>([]);\r\n\r\n  // Таймер\r\n  useEffect(() => {\r\n    if (phase === 'playing' && timeLeft > 0) {\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'playing' && timeLeft === 0) {\r\n      // Переход к результатам\r\n      setPossibleWords(findAllWordsOnBoard(board));\r\n      setPhase('results');\r\n      setTimeLeft(PAUSE_DURATION);\r\n    }\r\n    if (phase === 'results' && timeLeft > 0) {\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'results' && timeLeft === 0) {\r\n      // Новый раунд\r\n      setBoard(generateBoard());\r\n      setFoundWords([]);\r\n      setPhase('playing');\r\n      setTimeLeft(ROUND_DURATION);\r\n    }\r\n  }, [timeLeft, phase, board]);\r\n\r\n\r\n  // Обработка выбора клетки\r\n  const handleCellSelect = (row: number, col: number) => {\r\n    // Не даём выбрать одну клетку дважды\r\n    if (selectedCells.some(([r, c]) => r === row && c === col)) return;\r\n    setSelectedCells([...selectedCells, [row, col]]);\r\n    setCurrentWord(currentWord + board[row][col]);\r\n  };\r\n\r\n  // Проверка слова при завершении выбора (например, тап по последней клетке или авто)\r\n  useEffect(() => {\r\n    // Проверяем только если длина слова >= 3\r\n    if (currentWord.length >= 3) {\r\n      // Проверяем, есть ли слово в возможных\r\n      const allWords = findAllWordsOnBoard(board);\r\n      if (allWords.includes(currentWord) && !foundWords.includes(currentWord)) {\r\n        setFoundWords([...foundWords, currentWord]);\r\n        setFlashColor('green');\r\n        setTimeout(() => setFlashColor(null), 300);\r\n        setTimeout(() => {\r\n          setSelectedCells([]);\r\n          setCurrentWord(\"\");\r\n        }, 350);\r\n      } else if (currentWord.length > 3 && !allWords.includes(currentWord)) {\r\n        setFlashColor('red');\r\n        setTimeout(() => setFlashColor(null), 300);\r\n        setTimeout(() => {\r\n          setSelectedCells([]);\r\n          setCurrentWord(\"\");\r\n        }, 350);\r\n      }\r\n    }\r\n  }, [currentWord]);\r\n\r\n  return (\r\n    <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto' }}>\r\n      <h1>Dament</h1>\r\n      <Timer seconds={timeLeft} />\r\n      <GameBoard \r\n        board={board} \r\n        selectedCells={selectedCells}\r\n        onCellSelect={phase === 'playing' ? handleCellSelect : undefined}\r\n        flashColor={flashColor}\r\n      />\r\n      {phase === 'results' && (\r\n        <Results foundWords={foundWords} possibleWords={possibleWords} leaderboard={mockLeaderboard} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
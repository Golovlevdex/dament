{"ast":null,"code":"var _jsxFileName = \"C:\\\\vsc\\\\dament\\\\src\\\\WordList.tsx\";\n// Универсальный компонент для вывода списка слов (с очками или без)\n// Используйте showScore и getScore, чтобы показывать очки рядом со словом\n// Все стили можно менять здесь — изменения применятся везде, где используется WordList\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordList = ({\n  words,\n  showScore = false,\n  getScore,\n  style\n}) =>\n/*#__PURE__*/\n// Контейнер для списка слов (меняйте flexDirection/gap/alignItems для управления расположением)\n_jsxDEV(\"div\", {\n  style: {\n    display: 'flex',\n    // Контейнер — flex, чтобы слова шли в столбик\n    flexDirection: 'column',\n    // Слова идут друг под другом\n    gap: 2,\n    // Минимальный отступ между словами (можно менять на ваше усмотрение)\n    alignItems: 'flex-start',\n    // Выравнивание по левому краю\n    ...style\n  },\n  children: words.map(word =>\n  /*#__PURE__*/\n  // Каждый элемент — отдельное слово\n  _jsxDEV(\"span\", {\n    className: \"word-item\",\n    style: {\n      display: 'flex',\n      // Для выравнивания слова и очков по горизонтали\n      alignItems: 'center',\n      // Центрирование по вертикали\n      gap: 6,\n      // Отступ между словом и очками\n      fontFamily: 'inherit',\n      // Наследовать шрифт от родителя (можно заменить на любой)\n      fontSize: '1rem',\n      // Размер шрифта (меняйте здесь)\n      color: '#333' // Цвет текста и очков (меняйте здесь)\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: word\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), showScore && getScore && /*#__PURE__*/_jsxDEV(\"span\", {\n      children: getScore(word)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }, this)]\n  }, word, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 7\n  }, this))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 16,\n  columnNumber: 3\n}, this);\n_c = WordList;\nexport default WordList;\nvar _c;\n$RefreshReg$(_c, \"WordList\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","WordList","words","showScore","getScore","style","display","flexDirection","gap","alignItems","children","map","word","className","fontFamily","fontSize","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/vsc/dament/src/WordList.tsx"],"sourcesContent":["\r\n// Универсальный компонент для вывода списка слов (с очками или без)\r\n// Используйте showScore и getScore, чтобы показывать очки рядом со словом\r\n// Все стили можно менять здесь — изменения применятся везде, где используется WordList\r\nimport React from \"react\";\r\n\r\ntype WordListProps = {\r\n  words: string[]; // Массив слов для вывода\r\n  showScore?: boolean; // Показывать ли очки рядом со словом\r\n  getScore?: (word: string) => number; // Функция для подсчёта очков за слово\r\n  style?: React.CSSProperties; // Дополнительные стили для контейнера (опционально)\r\n};\r\n\r\nconst WordList: React.FC<WordListProps> = ({ words, showScore = false, getScore, style }) => (\r\n  // Контейнер для списка слов (меняйте flexDirection/gap/alignItems для управления расположением)\r\n  <div\r\n    style={{\r\n      display: 'flex', // Контейнер — flex, чтобы слова шли в столбик\r\n      flexDirection: 'column', // Слова идут друг под другом\r\n      gap: 2, // Минимальный отступ между словами (можно менять на ваше усмотрение)\r\n      alignItems: 'flex-start', // Выравнивание по левому краю\r\n      ...style,\r\n    }}\r\n  >\r\n    {words.map(word => (\r\n      // Каждый элемент — отдельное слово\r\n      <span\r\n        key={word}\r\n        className=\"word-item\"\r\n        style={{\r\n          display: 'flex', // Для выравнивания слова и очков по горизонтали\r\n          alignItems: 'center', // Центрирование по вертикали\r\n          gap: 6, // Отступ между словом и очками\r\n          fontFamily: 'inherit', // Наследовать шрифт от родителя (можно заменить на любой)\r\n          fontSize: '1rem', // Размер шрифта (меняйте здесь)\r\n          color: '#333', // Цвет текста и очков (меняйте здесь)\r\n        }}\r\n      >\r\n        {/* Само слово */}\r\n        <span>{word}</span>\r\n        {/* Очки за слово (если showScore=true и передан getScore) */}\r\n        {showScore && getScore && (\r\n          <span>{getScore(word)}</span>\r\n        )}\r\n      </span>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default WordList;\r\n"],"mappings":";AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS1B,MAAMC,QAAiC,GAAGA,CAAC;EAAEC,KAAK;EAAEC,SAAS,GAAG,KAAK;EAAEC,QAAQ;EAAEC;AAAM,CAAC;AAAA;AACtF;AACAL,OAAA;EACEK,KAAK,EAAE;IACLC,OAAO,EAAE,MAAM;IAAE;IACjBC,aAAa,EAAE,QAAQ;IAAE;IACzBC,GAAG,EAAE,CAAC;IAAE;IACRC,UAAU,EAAE,YAAY;IAAE;IAC1B,GAAGJ;EACL,CAAE;EAAAK,QAAA,EAEDR,KAAK,CAACS,GAAG,CAACC,IAAI;EAAA;EACb;EACAZ,OAAA;IAEEa,SAAS,EAAC,WAAW;IACrBR,KAAK,EAAE;MACLC,OAAO,EAAE,MAAM;MAAE;MACjBG,UAAU,EAAE,QAAQ;MAAE;MACtBD,GAAG,EAAE,CAAC;MAAE;MACRM,UAAU,EAAE,SAAS;MAAE;MACvBC,QAAQ,EAAE,MAAM;MAAE;MAClBC,KAAK,EAAE,MAAM,CAAE;IACjB,CAAE;IAAAN,QAAA,gBAGFV,OAAA;MAAAU,QAAA,EAAOE;IAAI;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,EAElBjB,SAAS,IAAIC,QAAQ,iBACpBJ,OAAA;MAAAU,QAAA,EAAON,QAAQ,CAACQ,IAAI;IAAC;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAC7B;EAAA,GAhBIR,IAAI;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAiBL,CACP;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACC,CACN;AAACC,EAAA,GAlCIpB,QAAiC;AAoCvC,eAAeA,QAAQ;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
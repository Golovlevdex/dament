{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import GameBoard from\"./GameBoard\";// import WordInput from \"./WordInput\";\nimport Results from\"./Results\";// Импортируем игровую логику\nimport{generateBoard,findAllWordsOnBoard,ROUND_DURATION,PAUSE_DURATION,letterBonuses}from\"./anagramGenerator\";import{isWordInDictionary,gameDictionary}from\"./dictionary\";import uiStrings from'./ui-strings-categorized.json';import{canFormWordOnBoard}from\"./anagramGenerator\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const getRandomWords=(count,dictionary)=>{const shuffled=[...dictionary].sort(()=>Math.random()-0.5);return shuffled.slice(0,count);};const App=()=>{const[screen,setScreen]=useState('welcome');// Для свайп-старта\nconst START_WORD='СТАРТ';// Слово СТАРТ в одну горизонтальную линию (1x5)\nconst startBoard=[[...START_WORD].map((letter,idx)=>({letter,bonus:'none',row:0,col:idx}))];const[startFlashColor,setStartFlashColor]=useState(null);const[startSelected,setStartSelected]=useState([]);const[loadingProgress,setLoadingProgress]=useState(0);const[loadingMax,setLoadingMax]=useState(0);const[loadingTimer,setLoadingTimer]=useState(5);const[usedWords,setUsedWords]=useState([]);// Параметры генерации\nconst FIELD_SIZE=4;// размер поля (4x4)\nconst MIN_WORDS=15;// минимальное количество слов (снизили с 20)\nconst MAX_ATTEMPTS=500;// увеличили количество попыток\n// Сохраняем поле, сгенерированное для анализа, чтобы использовать его для первого раунда\nconst[initialBoard,setInitialBoard]=useState(null);const[board,setBoard]=useState(()=>{// Новый генератор: ищем поле с максимальным количеством слов\nlet bestBoard=null;let bestWords=[];let maxWords=0;// Создаём список частых букв из словаря для лучшей генерации\nconst allLetters=gameDictionary.join('').toUpperCase().split('');const letterFreq={};allLetters.forEach(letter=>letterFreq[letter]=(letterFreq[letter]||0)+1);const frequentLetters=Object.keys(letterFreq).sort((a,b)=>letterFreq[b]-letterFreq[a]);// Анализируем длинные слова для получения хороших комбинаций букв\nconst longWords=gameDictionary.filter(word=>word.length>=5&&word.length<=8);const longWordLetters=[];longWords.slice(0,50).forEach(word=>{// берём первые 50 длинных слов\nlongWordLetters.push(...word.toUpperCase().split(''));});console.log(\"Генерируем поле, попыток:\",MAX_ATTEMPTS);for(let attempts=0;attempts<MAX_ATTEMPTS;attempts++){// Генерируем поле с учётом частоты букв и длинных слов\nconst letters=[];for(let i=0;i<FIELD_SIZE*FIELD_SIZE;i++){const rand=Math.random();if(rand<0.3&&longWordLetters.length>0){// 30% - буквы из длинных слов\nconst longIndex=Math.floor(Math.random()*longWordLetters.length);letters.push(longWordLetters[longIndex]);}else if(rand<0.8){// 50% - частые буквы\nconst freqIndex=Math.floor(Math.random()*Math.min(10,frequentLetters.length));letters.push(frequentLetters[freqIndex]);}else{// 20% - случайные буквы\nconst randIndex=Math.floor(Math.random()*frequentLetters.length);letters.push(frequentLetters[randIndex]);}}// Преобразуем в матрицу Cell[][] с бонусами\nconst matrix=[];for(let r=0;r<FIELD_SIZE;r++){matrix.push(letters.slice(r*FIELD_SIZE,(r+1)*FIELD_SIZE).map((letter,c)=>{let rawBonus=letterBonuses[letter.toUpperCase()];let bonus=typeof rawBonus==='string'?rawBonus:'none';return{letter,row:r,col:c,bonus};}));}// Находим все слова\nconst possibleWords=findAllWordsOnBoard(matrix);if(possibleWords.length>maxWords){bestBoard=matrix;bestWords=possibleWords;maxWords=possibleWords.length;console.log(`Попытка ${attempts}: найдено ${maxWords} слов`);// Если нашли поле с достаточным количеством слов — сразу используем\nif(maxWords>=MIN_WORDS){console.log(\"Достигнуто минимальное количество слов, выбираем это поле\");break;}}}console.log(`Финальное поле: ${maxWords} слов`);setUsedWords(bestWords.filter(word=>word.length>=3));setInitialBoard(bestBoard);// Если не удалось — возвращаем случайное поле\nif(!bestBoard){console.log(\"Не удалось найти поле с нужным количеством слов, генерируем случайное\");const letters=[];for(let i=0;i<FIELD_SIZE*FIELD_SIZE;i++){const randIndex=Math.floor(Math.random()*gameDictionary.join('').length);letters.push(gameDictionary.join('')[randIndex]);}const matrix=[];for(let r=0;r<FIELD_SIZE;r++){matrix.push(letters.slice(r*FIELD_SIZE,(r+1)*FIELD_SIZE).map((letter,c)=>{let rawBonus=letterBonuses[letter.toUpperCase()];let bonus=typeof rawBonus==='string'?rawBonus:'none';return{letter,row:r,col:c,bonus};}));}return matrix;}return bestBoard;});const[timeLeft,setTimeLeft]=useState(ROUND_DURATION);const[foundWords,setFoundWords]=useState([]);const[score,setScore]=useState(0);const[message,setMessage]=useState(\"\");const[selectedCells,setSelectedCells]=useState([]);const[currentWord,setCurrentWord]=useState(\"\");const[flashColor,setFlashColor]=useState(null);const[phase,setPhase]=useState('playing');const[possibleWords,setPossibleWords]=useState([]);const leaderboard=[{name:\"Вы\",score}];// useEffect для анимации загрузки (теперь строго после всех useState)\nuseEffect(()=>{if(screen==='loading'&&loadingProgress<loadingMax&&loadingTimer>0){const step=Math.ceil(loadingMax/(loadingTimer*20));const interval=setInterval(()=>{setLoadingProgress(prev=>Math.min(prev+step,loadingMax));},50);return()=>clearInterval(interval);}// Когда загрузка закончилась, используем initialBoard для первого раунда\nif(screen==='loading'&&loadingTimer===0&&initialBoard){setBoard(initialBoard);}},[screen,loadingProgress,loadingMax,loadingTimer,initialBoard]);useEffect(()=>{if(screen==='loading'&&loadingTimer>0){const timer=setTimeout(()=>setLoadingTimer(loadingTimer-1),1000);return()=>clearTimeout(timer);}else if(screen==='loading'&&loadingTimer===0){setScreen('game');}},[screen,loadingTimer]);// useEffect для анимации загрузки\nuseEffect(()=>{if(screen==='loading'&&loadingProgress<loadingMax&&loadingTimer>0){const step=Math.ceil(loadingMax/(loadingTimer*20));const interval=setInterval(()=>{setLoadingProgress(prev=>Math.min(prev+step,loadingMax));},50);return()=>clearInterval(interval);}},[screen,loadingProgress,loadingMax,loadingTimer]);useEffect(()=>{if(screen==='loading'&&loadingTimer>0){const timer=setTimeout(()=>setLoadingTimer(loadingTimer-1),1000);return()=>clearTimeout(timer);}else if(screen==='loading'&&loadingTimer===0){setScreen('game');}},[screen,loadingTimer]);// Таймер\nuseEffect(()=>{if(phase==='playing'&&timeLeft>0){const timer=setTimeout(()=>setTimeLeft(timeLeft-1),1000);return()=>clearTimeout(timer);}if(phase==='playing'&&timeLeft===0){setPossibleWords(usedWords.filter(word=>word.length>=3&&canFormWordOnBoard(word,board)));setSelectedCells([]);setCurrentWord(\"\");setPhase('results');setTimeLeft(3);// 3 секунды на результаты (можно увеличить)\n}if(phase==='results'&&timeLeft>0){const timer=setTimeout(()=>setTimeLeft(timeLeft-1),1000);return()=>clearTimeout(timer);}if(phase==='results'&&timeLeft===0){setPhase('analyzer');setTimeLeft(PAUSE_DURATION);// 15 секунд анализатор\n}if(phase==='analyzer'&&timeLeft>0){const timer=setTimeout(()=>setTimeLeft(timeLeft-1),1000);return()=>clearTimeout(timer);}if(phase==='analyzer'&&timeLeft===0){// Новый раунд (и только для первого — используем initialBoard, потом обычная генерация)\nif(initialBoard){const allPossibleWords=findAllWordsOnBoard(initialBoard).filter(word=>word.length>=3);setUsedWords(allPossibleWords);setBoard(initialBoard);setFoundWords([]);setPhase('playing');setTimeLeft(ROUND_DURATION);setInitialBoard(null);// чтобы дальше использовать обычную генерацию\n}else{const words=getRandomWords(6,gameDictionary);const board=generateBoard({name:\"\",reward:\"\",words});const allPossibleWords=findAllWordsOnBoard(board).filter(word=>word.length>=3);setUsedWords(allPossibleWords);setBoard(board);setFoundWords([]);setPhase('playing');setTimeLeft(ROUND_DURATION);}}},[timeLeft,phase,board]);// Обработка завершения пути (свайп/drag)\nconst handlePathComplete=path=>{if(path.length<3){setMessage(uiStrings.ошибки.минимумБукв);setFlashColor('red');setTimeout(()=>setFlashColor(null),300);setTimeout(()=>{setMessage(\"\");setSelectedCells([]);setCurrentWord(\"\");},350);return;}const word=path.map(_ref=>{let[r,c]=_ref;return board[r][c].letter;}).join(\"\");const allWords=findAllWordsOnBoard(board).filter(word=>word.length>=3);if(foundWords.includes(word)){setMessage(uiStrings.ошибки.ужеВводилось);setFlashColor('red');setTimeout(()=>setFlashColor(null),300);setTimeout(()=>{setMessage(\"\");setSelectedCells([]);setCurrentWord(\"\");},350);return;}if(!allWords.includes(word)||!isWordInDictionary(word)){setMessage(uiStrings.ошибки.нетСлова);setFlashColor('red');setTimeout(()=>setFlashColor(null),300);setTimeout(()=>{setMessage(\"\");setSelectedCells([]);setCurrentWord(\"\");},350);return;}// Подсчёт очков по бонусам букв\nlet wordScore=0;path.forEach(_ref2=>{let[r,c]=_ref2;const letter=board[r][c].letter.toUpperCase();wordScore+=letterBonuses[letter]||0;});setScore(score+wordScore);setFoundWords([...foundWords,word]);setMessage(`+${wordScore} очков`);setFlashColor('green');setTimeout(()=>setFlashColor(null),300);setTimeout(()=>{setMessage(\"\");setSelectedCells([]);setCurrentWord(\"\");},350);};// Проверка слова при завершении выбора (например, тап по последней клетке или авто)\nuseEffect(()=>{// Проверяем только если длина слова >= 3\nif(currentWord.length>=3){// Проверяем, есть ли слово в возможных\nconst allWords=findAllWordsOnBoard(board);if(allWords.includes(currentWord)&&!foundWords.includes(currentWord)){setFoundWords([...foundWords,currentWord]);setFlashColor('green');setTimeout(()=>setFlashColor(null),300);setTimeout(()=>{setSelectedCells([]);setCurrentWord(\"\");},350);}else if(currentWord.length>3&&!allWords.includes(currentWord)){setFlashColor('red');setTimeout(()=>setFlashColor(null),300);setTimeout(()=>{setSelectedCells([]);setCurrentWord(\"\");},350);}}},[currentWord]);if(screen==='welcome'){// Свайп-старт по слову СТАРТ\nconst handleStartPath=path=>{const word=path.map(_ref3=>{let[r,c]=_ref3;return startBoard[r][c].letter;}).join(\"\");if(word===START_WORD){setStartFlashColor('green');setTimeout(()=>{// Генерируем поле и считаем количество слов\nconst words=getRandomWords(6,gameDictionary);const board=generateBoard({name:\"\",reward:\"\",words});const allPossibleWords=findAllWordsOnBoard(board).filter(word=>word.length>=3);setLoadingMax(allPossibleWords.length);setLoadingProgress(0);setLoadingTimer(5);setScreen('loading');setStartSelected([]);setStartFlashColor(null);},350);}else{setStartFlashColor('red');setTimeout(()=>{setStartSelected([]);setStartFlashColor(null);},350);}};return/*#__PURE__*/_jsxs(\"div\",{style:{fontFamily:'sans-serif',padding:24,maxWidth:600,margin:'0 auto',textAlign:'center'},children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\u0424\\u0443\\u043D\\u0434\\u0430\\u043C\\u0435\\u043D\\u0442\"}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center',margin:'32px 0 16px 0'},children:/*#__PURE__*/_jsx(\"div\",{style:{minWidth:260},children:/*#__PURE__*/_jsx(GameBoard,{board:startBoard,selectedCells:startSelected,onPathComplete:handleStartPath,onDragUpdate:setStartSelected,flashColor:startFlashColor,columnsCount:START_WORD.length})})}),/*#__PURE__*/_jsx(\"div\",{style:{fontSize:16,color:'#888',marginBottom:32},children:\"\\u041F\\u0440\\u043E\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043F\\u043E \\u0431\\u0443\\u043A\\u0432\\u0430\\u043C, \\u0447\\u0442\\u043E\\u0431\\u044B \\u043D\\u0430\\u0447\\u0430\\u0442\\u044C\"}),/*#__PURE__*/_jsx(\"button\",{style:{margin:12,padding:'12px 32px',fontSize:18,cursor:'pointer'},onClick:()=>setScreen('help'),children:\"\\u0421\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430\"})]});}if(screen==='loading'){return/*#__PURE__*/_jsxs(\"div\",{style:{fontFamily:'sans-serif',padding:24,maxWidth:600,margin:'0 auto',textAlign:'center'},children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u043F\\u043E\\u043B\\u044F...\"}),/*#__PURE__*/_jsx(\"div\",{style:{fontSize:32,margin:'32px 0',color:'#1976d2',fontWeight:700},children:loadingProgress}),/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:18,marginBottom:12},children:[\"\\u0411\\u0443\\u0434\\u0435\\u0442 \\u0434\\u043E\\u0441\\u0442\\u0443\\u043F\\u043D\\u043E \\u0441\\u043B\\u043E\\u0432: \",loadingMax]}),/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:16,color:'#888'},children:[\"\\u041E\\u0441\\u0442\\u0430\\u043B\\u043E\\u0441\\u044C \\u0441\\u0435\\u043A\\u0443\\u043D\\u0434: \",loadingTimer]})]});}if(screen==='help'){return/*#__PURE__*/_jsxs(\"div\",{style:{fontFamily:'sans-serif',padding:24,maxWidth:600,margin:'0 auto',textAlign:'center'},children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\u0424\\u0443\\u043D\\u0434\\u0430\\u043C\\u0435\\u043D\\u0442\"}),/*#__PURE__*/_jsx(\"div\",{style:{fontSize:20,margin:'32px 0'},children:\"\\u0421\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430 \\u0431\\u0443\\u0434\\u0435\\u0442 \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u0430 \\u043F\\u043E\\u0437\\u0436\\u0435.\"}),/*#__PURE__*/_jsx(\"button\",{style:{margin:12,padding:'12px 32px',fontSize:18,cursor:'pointer'},onClick:()=>setScreen('welcome'),children:\"\\u041D\\u0430\\u0437\\u0430\\u0434\"})]});}// Экран игры и анализатора\nif(phase==='analyzer'){return/*#__PURE__*/_jsxs(\"div\",{style:{fontFamily:'sans-serif',padding:24,maxWidth:600,margin:'0 auto',textAlign:'center'},children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\u0410\\u043D\\u0430\\u043B\\u0438\\u0437\\u0430\\u0442\\u043E\\u0440 \\u043F\\u043E\\u043B\\u044F\"}),/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:18,margin:'16px 0'},children:[\"\\u041D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E \\u0441\\u043B\\u043E\\u0432: \",/*#__PURE__*/_jsx(\"b\",{children:usedWords.length})]}),/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:16,color:'#1976d2',marginBottom:12},children:[\"\\u0414\\u043E \\u043D\\u0430\\u0447\\u0430\\u043B\\u0430 \\u0438\\u0433\\u0440\\u044B: \",timeLeft,\" \\u0441\\u0435\\u043A.\"]}),/*#__PURE__*/_jsxs(\"div\",{style:{margin:'12px 0',padding:'8px',background:'#f5f5f5',borderRadius:8,fontSize:14,color:'#333',maxHeight:120,overflowY:'auto'},children:[/*#__PURE__*/_jsx(\"b\",{children:\"\\u0412\\u0441\\u0435 \\u0441\\u043B\\u043E\\u0432\\u0430 \\u043D\\u0430 \\u043F\\u043E\\u043B\\u0435:\"}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',flexWrap:'wrap',gap:8},children:usedWords.map(word=>/*#__PURE__*/_jsx(\"span\",{style:{background:'#e0e0e0',borderRadius:4,padding:'2px 6px',margin:2},children:word},word))})]})]});}// Экран игры\nreturn/*#__PURE__*/_jsxs(\"div\",{style:{fontFamily:'sans-serif',padding:24,maxWidth:600,margin:'0 auto'},children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\u0424\\u0443\\u043D\\u0434\\u0430\\u043C\\u0435\\u043D\\u0442\"}),/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:20,fontWeight:600,marginBottom:8},children:[phase==='playing'?uiStrings.игра.заголовок:uiStrings.результаты.заголовок,' ',/*#__PURE__*/_jsxs(\"span\",{style:{fontSize:18,fontWeight:400,color:'#1976d2'},children:[timeLeft,\" \\u0441\\u0435\\u043A.\"]})]}),/*#__PURE__*/_jsx(\"div\",{style:{minHeight:32,color:message.includes(uiStrings.прочее.очков)?'green':'red',fontWeight:500},children:message}),/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:8},children:[uiStrings.игра.очки,\": \",score]}),/*#__PURE__*/_jsxs(\"div\",{style:{margin:'12px 0',padding:'8px',background:'#f5f5f5',borderRadius:8,fontSize:14,color:'#333',maxHeight:120,overflowY:'auto'},children:[/*#__PURE__*/_jsxs(\"b\",{children:[\"\\u0412\\u0441\\u0435 \\u0441\\u043B\\u043E\\u0432\\u0430 \\u043D\\u0430 \\u043F\\u043E\\u043B\\u0435 (\",usedWords.length,\"):\"]}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',flexWrap:'wrap',gap:8},children:usedWords.map(word=>/*#__PURE__*/_jsx(\"span\",{style:{background:'#e0e0e0',borderRadius:4,padding:'2px 6px',margin:2},children:word},word))})]}),/*#__PURE__*/_jsx(GameBoard,{board:board,selectedCells:selectedCells,onPathComplete:phase==='playing'?handlePathComplete:undefined,onDragUpdate:phase==='playing'?setSelectedCells:undefined,flashColor:flashColor}),phase==='results'&&/*#__PURE__*/_jsx(Results,{foundWords:foundWords,possibleWords:possibleWords,leaderboard:leaderboard,usedWords:usedWords})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","GameBoard","Results","generateBoard","findAllWordsOnBoard","ROUND_DURATION","PAUSE_DURATION","letterBonuses","isWordInDictionary","gameDictionary","uiStrings","canFormWordOnBoard","jsx","_jsx","jsxs","_jsxs","getRandomWords","count","dictionary","shuffled","sort","Math","random","slice","App","screen","setScreen","START_WORD","startBoard","map","letter","idx","bonus","row","col","startFlashColor","setStartFlashColor","startSelected","setStartSelected","loadingProgress","setLoadingProgress","loadingMax","setLoadingMax","loadingTimer","setLoadingTimer","usedWords","setUsedWords","FIELD_SIZE","MIN_WORDS","MAX_ATTEMPTS","initialBoard","setInitialBoard","board","setBoard","bestBoard","bestWords","maxWords","allLetters","join","toUpperCase","split","letterFreq","forEach","frequentLetters","Object","keys","a","b","longWords","filter","word","length","longWordLetters","push","console","log","attempts","letters","i","rand","longIndex","floor","freqIndex","min","randIndex","matrix","r","c","rawBonus","possibleWords","timeLeft","setTimeLeft","foundWords","setFoundWords","score","setScore","message","setMessage","selectedCells","setSelectedCells","currentWord","setCurrentWord","flashColor","setFlashColor","phase","setPhase","setPossibleWords","leaderboard","name","step","ceil","interval","setInterval","prev","clearInterval","timer","setTimeout","clearTimeout","allPossibleWords","words","reward","handlePathComplete","path","ошибки","минимумБукв","_ref","allWords","includes","ужеВводилось","нетСлова","wordScore","_ref2","handleStartPath","_ref3","style","fontFamily","padding","maxWidth","margin","textAlign","children","display","justifyContent","minWidth","onPathComplete","onDragUpdate","columnsCount","fontSize","color","marginBottom","cursor","onClick","fontWeight","background","borderRadius","maxHeight","overflowY","flexWrap","gap","игра","заголовок","результаты","minHeight","прочее","очков","очки","undefined"],"sources":["C:/vsc/dament/src/App.tsx"],"sourcesContent":["\r\nimport React, { useState, useEffect } from \"react\";\r\nimport type { Cell as CellType } from \"./anagramGenerator\";\r\nimport GameBoard from \"./GameBoard\";\r\nimport Timer from \"./Timer\";\r\n// import WordInput from \"./WordInput\";\r\nimport Results from \"./Results\";\r\n// Импортируем игровую логику\r\nimport { generateBoard, findAllWordsOnBoard, ROUND_DURATION, PAUSE_DURATION, Cell, letterBonuses } from \"./anagramGenerator\";\r\nimport { BonusType } from \"./anagramGenerator\";\r\nimport { isWordInDictionary, gameDictionary } from \"./dictionary\";\r\nimport uiStrings from './ui-strings-categorized.json';\r\nimport { canFormWordOnBoard } from \"./anagramGenerator\";\r\n\r\n\r\n\r\nconst getRandomWords = (count: number, dictionary: string[]): string[] => {\r\n  const shuffled = [...dictionary].sort(() => Math.random() - 0.5);\r\n  return shuffled.slice(0, count);\r\n};\r\n\r\nconst App: React.FC = () => {\r\n  const [screen, setScreen] = useState<'welcome' | 'loading' | 'game' | 'help'>('welcome');\r\n  // Для свайп-старта\r\n  const START_WORD = 'СТАРТ';\r\n  // Слово СТАРТ в одну горизонтальную линию (1x5)\r\n  const startBoard: CellType[][] = [\r\n    [...START_WORD].map((letter, idx) => ({ letter, bonus: 'none', row: 0, col: idx }))\r\n  ];\r\n  const [startFlashColor, setStartFlashColor] = useState<string | null>(null);\r\n  const [startSelected, setStartSelected] = useState<Array<[number, number]>>([]);\r\n  const [loadingProgress, setLoadingProgress] = useState<number>(0);\r\n  const [loadingMax, setLoadingMax] = useState<number>(0);\r\n  const [loadingTimer, setLoadingTimer] = useState<number>(5);\r\n  const [usedWords, setUsedWords] = useState<string[]>([]);\r\n  // Параметры генерации\r\n  const FIELD_SIZE = 4; // размер поля (4x4)\r\n  const MIN_WORDS = 15; // минимальное количество слов (снизили с 20)\r\n  const MAX_ATTEMPTS = 500; // увеличили количество попыток\r\n\r\n  // Сохраняем поле, сгенерированное для анализа, чтобы использовать его для первого раунда\r\n  const [initialBoard, setInitialBoard] = useState<Cell[][] | null>(null);\r\n  const [board, setBoard] = useState<Cell[][]>(() => {\r\n    // Новый генератор: ищем поле с максимальным количеством слов\r\n    let bestBoard: Cell[][] | null = null;\r\n    let bestWords: string[] = [];\r\n    let maxWords = 0;\r\n    \r\n    // Создаём список частых букв из словаря для лучшей генерации\r\n    const allLetters = gameDictionary.join('').toUpperCase().split('');\r\n    const letterFreq: Record<string, number> = {};\r\n    allLetters.forEach(letter => letterFreq[letter] = (letterFreq[letter] || 0) + 1);\r\n    const frequentLetters = Object.keys(letterFreq).sort((a, b) => letterFreq[b] - letterFreq[a]);\r\n    \r\n    // Анализируем длинные слова для получения хороших комбинаций букв\r\n    const longWords = gameDictionary.filter(word => word.length >= 5 && word.length <= 8);\r\n    const longWordLetters: string[] = [];\r\n    longWords.slice(0, 50).forEach(word => { // берём первые 50 длинных слов\r\n      longWordLetters.push(...word.toUpperCase().split(''));\r\n    });\r\n    \r\n    console.log(\"Генерируем поле, попыток:\", MAX_ATTEMPTS);\r\n    \r\n    for (let attempts = 0; attempts < MAX_ATTEMPTS; attempts++) {\r\n      // Генерируем поле с учётом частоты букв и длинных слов\r\n      const letters: string[] = [];\r\n      for (let i = 0; i < FIELD_SIZE * FIELD_SIZE; i++) {\r\n        const rand = Math.random();\r\n        if (rand < 0.3 && longWordLetters.length > 0) {\r\n          // 30% - буквы из длинных слов\r\n          const longIndex = Math.floor(Math.random() * longWordLetters.length);\r\n          letters.push(longWordLetters[longIndex]);\r\n        } else if (rand < 0.8) {\r\n          // 50% - частые буквы\r\n          const freqIndex = Math.floor(Math.random() * Math.min(10, frequentLetters.length));\r\n          letters.push(frequentLetters[freqIndex]);\r\n        } else {\r\n          // 20% - случайные буквы\r\n          const randIndex = Math.floor(Math.random() * frequentLetters.length);\r\n          letters.push(frequentLetters[randIndex]);\r\n        }\r\n      }\r\n      \r\n      // Преобразуем в матрицу Cell[][] с бонусами\r\n      const matrix: Cell[][] = [];\r\n      for (let r = 0; r < FIELD_SIZE; r++) {\r\n        matrix.push(letters.slice(r * FIELD_SIZE, (r + 1) * FIELD_SIZE).map((letter, c) => {\r\n          let rawBonus = letterBonuses[letter.toUpperCase()];\r\n          let bonus: BonusType = typeof rawBonus === 'string' ? rawBonus : 'none';\r\n          return {\r\n            letter,\r\n            row: r,\r\n            col: c,\r\n            bonus\r\n          };\r\n        }));\r\n      }\r\n      // Находим все слова\r\n      const possibleWords: string[] = findAllWordsOnBoard(matrix);\r\n      if (possibleWords.length > maxWords) {\r\n        bestBoard = matrix;\r\n        bestWords = possibleWords;\r\n        maxWords = possibleWords.length;\r\n        console.log(`Попытка ${attempts}: найдено ${maxWords} слов`);\r\n        // Если нашли поле с достаточным количеством слов — сразу используем\r\n        if (maxWords >= MIN_WORDS) {\r\n          console.log(\"Достигнуто минимальное количество слов, выбираем это поле\");\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(`Финальное поле: ${maxWords} слов`);\r\n  setUsedWords(bestWords.filter(word => word.length >= 3));\r\n  setInitialBoard(bestBoard!);\r\n    \r\n    // Если не удалось — возвращаем случайное поле\r\n    if (!bestBoard) {\r\n      console.log(\"Не удалось найти поле с нужным количеством слов, генерируем случайное\");\r\n      const letters: string[] = [];\r\n      for (let i = 0; i < FIELD_SIZE * FIELD_SIZE; i++) {\r\n        const randIndex = Math.floor(Math.random() * gameDictionary.join('').length);\r\n        letters.push(gameDictionary.join('')[randIndex]);\r\n      }\r\n      const matrix: Cell[][] = [];\r\n      for (let r = 0; r < FIELD_SIZE; r++) {\r\n        matrix.push(letters.slice(r * FIELD_SIZE, (r + 1) * FIELD_SIZE).map((letter, c) => {\r\n          let rawBonus = letterBonuses[letter.toUpperCase()];\r\n          let bonus: BonusType = typeof rawBonus === 'string' ? rawBonus : 'none';\r\n          return {\r\n            letter,\r\n            row: r,\r\n            col: c,\r\n            bonus\r\n          };\r\n        }));\r\n      }\r\n      return matrix;\r\n    }\r\n    return bestBoard;\r\n  });\r\n  const [timeLeft, setTimeLeft] = useState<number>(ROUND_DURATION);\r\n  const [foundWords, setFoundWords] = useState<string[]>([]);\r\n  const [score, setScore] = useState<number>(0);\r\n  const [message, setMessage] = useState<string>(\"\");\r\n  const [selectedCells, setSelectedCells] = useState<Array<[number, number]>>([]);\r\n  const [currentWord, setCurrentWord] = useState<string>(\"\");\r\n  const [flashColor, setFlashColor] = useState<string | null>(null);\r\n  const [phase, setPhase] = useState<'playing' | 'results' | 'analyzer'>('playing');\r\n  const [possibleWords, setPossibleWords] = useState<string[]>([]);\r\n  const leaderboard = [\r\n    { name: \"Вы\", score }\r\n  ];\r\n\r\n  // useEffect для анимации загрузки (теперь строго после всех useState)\r\n  useEffect(() => {\r\n    if (screen === 'loading' && loadingProgress < loadingMax && loadingTimer > 0) {\r\n      const step = Math.ceil(loadingMax / (loadingTimer * 20));\r\n      const interval = setInterval(() => {\r\n        setLoadingProgress(prev => Math.min(prev + step, loadingMax));\r\n      }, 50);\r\n      return () => clearInterval(interval);\r\n    }\r\n    // Когда загрузка закончилась, используем initialBoard для первого раунда\r\n    if (screen === 'loading' && loadingTimer === 0 && initialBoard) {\r\n      setBoard(initialBoard);\r\n    }\r\n  }, [screen, loadingProgress, loadingMax, loadingTimer, initialBoard]);\r\n\r\n  useEffect(() => {\r\n    if (screen === 'loading' && loadingTimer > 0) {\r\n      const timer = setTimeout(() => setLoadingTimer(loadingTimer - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    } else if (screen === 'loading' && loadingTimer === 0) {\r\n      setScreen('game');\r\n    }\r\n  }, [screen, loadingTimer]);\r\n\r\n  // useEffect для анимации загрузки\r\n  useEffect(() => {\r\n    if (screen === 'loading' && loadingProgress < loadingMax && loadingTimer > 0) {\r\n      const step = Math.ceil(loadingMax / (loadingTimer * 20));\r\n      const interval = setInterval(() => {\r\n        setLoadingProgress(prev => Math.min(prev + step, loadingMax));\r\n      }, 50);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [screen, loadingProgress, loadingMax, loadingTimer]);\r\n\r\n  useEffect(() => {\r\n    if (screen === 'loading' && loadingTimer > 0) {\r\n      const timer = setTimeout(() => setLoadingTimer(loadingTimer - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    } else if (screen === 'loading' && loadingTimer === 0) {\r\n      setScreen('game');\r\n    }\r\n  }, [screen, loadingTimer]);\r\n\r\n  // Таймер\r\n  useEffect(() => {\r\n    if (phase === 'playing' && timeLeft > 0) {\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'playing' && timeLeft === 0) {\r\n      setPossibleWords(usedWords.filter(word => word.length >= 3 && canFormWordOnBoard(word, board)));\r\n      setSelectedCells([]);\r\n      setCurrentWord(\"\");\r\n      setPhase('results');\r\n      setTimeLeft(3); // 3 секунды на результаты (можно увеличить)\r\n    }\r\n    if (phase === 'results' && timeLeft > 0) {\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'results' && timeLeft === 0) {\r\n      setPhase('analyzer');\r\n      setTimeLeft(PAUSE_DURATION); // 15 секунд анализатор\r\n    }\r\n    if (phase === 'analyzer' && timeLeft > 0) {\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'analyzer' && timeLeft === 0) {\r\n      // Новый раунд (и только для первого — используем initialBoard, потом обычная генерация)\r\n      if (initialBoard) {\r\n        const allPossibleWords = findAllWordsOnBoard(initialBoard).filter(word => word.length >= 3);\r\n        setUsedWords(allPossibleWords);\r\n        setBoard(initialBoard);\r\n        setFoundWords([]);\r\n        setPhase('playing');\r\n        setTimeLeft(ROUND_DURATION);\r\n        setInitialBoard(null); // чтобы дальше использовать обычную генерацию\r\n      } else {\r\n        const words = getRandomWords(6, gameDictionary);\r\n        const board = generateBoard({ name: \"\", reward: \"\", words });\r\n        const allPossibleWords = findAllWordsOnBoard(board).filter(word => word.length >= 3);\r\n        setUsedWords(allPossibleWords);\r\n        setBoard(board);\r\n        setFoundWords([]);\r\n        setPhase('playing');\r\n        setTimeLeft(ROUND_DURATION);\r\n      }\r\n    }\r\n  }, [timeLeft, phase, board]);\r\n\r\n\r\n\r\n  // Обработка завершения пути (свайп/drag)\r\n  const handlePathComplete = (path: Array<[number, number]>) => {\r\n    if (path.length < 3) {\r\n      setMessage(uiStrings.ошибки.минимумБукв);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    const word = path.map(([r, c]) => board[r][c].letter).join(\"\");\r\n    const allWords = findAllWordsOnBoard(board).filter(word => word.length >= 3);\r\n    if (foundWords.includes(word)) {\r\n      setMessage(uiStrings.ошибки.ужеВводилось);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    if (!allWords.includes(word) || !isWordInDictionary(word)) {\r\n      setMessage(uiStrings.ошибки.нетСлова);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    // Подсчёт очков по бонусам букв\r\n    let wordScore = 0;\r\n    path.forEach(([r, c]) => {\r\n      const letter = board[r][c].letter.toUpperCase();\r\n      wordScore += letterBonuses[letter] || 0;\r\n    });\r\n    setScore(score + wordScore);\r\n    setFoundWords([...foundWords, word]);\r\n    setMessage(`+${wordScore} очков`);\r\n    setFlashColor('green');\r\n    setTimeout(() => setFlashColor(null), 300);\r\n    setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n  };\r\n\r\n  // Проверка слова при завершении выбора (например, тап по последней клетке или авто)\r\n  useEffect(() => {\r\n    // Проверяем только если длина слова >= 3\r\n    if (currentWord.length >= 3) {\r\n      // Проверяем, есть ли слово в возможных\r\n      const allWords = findAllWordsOnBoard(board);\r\n      if (allWords.includes(currentWord) && !foundWords.includes(currentWord)) {\r\n        setFoundWords([...foundWords, currentWord]);\r\n        setFlashColor('green');\r\n        setTimeout(() => setFlashColor(null), 300);\r\n        setTimeout(() => {\r\n          setSelectedCells([]);\r\n          setCurrentWord(\"\");\r\n        }, 350);\r\n      } else if (currentWord.length > 3 && !allWords.includes(currentWord)) {\r\n        setFlashColor('red');\r\n        setTimeout(() => setFlashColor(null), 300);\r\n        setTimeout(() => {\r\n          setSelectedCells([]);\r\n          setCurrentWord(\"\");\r\n        }, 350);\r\n      }\r\n    }\r\n  }, [currentWord]);\r\n\r\n  if (screen === 'welcome') {\r\n    // Свайп-старт по слову СТАРТ\r\n    const handleStartPath = (path: Array<[number, number]>) => {\r\n      const word = path.map(([r, c]) => startBoard[r][c].letter).join(\"\");\r\n      if (word === START_WORD) {\r\n        setStartFlashColor('green');\r\n        setTimeout(() => {\r\n          // Генерируем поле и считаем количество слов\r\n          const words = getRandomWords(6, gameDictionary);\r\n          const board = generateBoard({ name: \"\", reward: \"\", words });\r\n          const allPossibleWords = findAllWordsOnBoard(board).filter(word => word.length >= 3);\r\n          setLoadingMax(allPossibleWords.length);\r\n          setLoadingProgress(0);\r\n          setLoadingTimer(5);\r\n          setScreen('loading');\r\n          setStartSelected([]);\r\n          setStartFlashColor(null);\r\n        }, 350);\r\n      } else {\r\n        setStartFlashColor('red');\r\n        setTimeout(() => {\r\n          setStartSelected([]);\r\n          setStartFlashColor(null);\r\n        }, 350);\r\n      }\r\n    };\r\n    return (\r\n      <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto', textAlign: 'center' }}>\r\n        <h1>Фундамент</h1>\r\n        <div style={{ display: 'flex', justifyContent: 'center', margin: '32px 0 16px 0' }}>\r\n          <div style={{ minWidth: 260 }}>\r\n            <GameBoard\r\n              board={startBoard}\r\n              selectedCells={startSelected}\r\n              onPathComplete={handleStartPath}\r\n              onDragUpdate={setStartSelected}\r\n              flashColor={startFlashColor}\r\n              columnsCount={START_WORD.length}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div style={{ fontSize: 16, color: '#888', marginBottom: 32 }}>Проведите по буквам, чтобы начать</div>\r\n        <button style={{ margin: 12, padding: '12px 32px', fontSize: 18, cursor: 'pointer' }} onClick={() => setScreen('help')}>Справка</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (screen === 'loading') {\r\n    return (\r\n      <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto', textAlign: 'center' }}>\r\n        <h2>Загрузка поля...</h2>\r\n        <div style={{ fontSize: 32, margin: '32px 0', color: '#1976d2', fontWeight: 700 }}>{loadingProgress}</div>\r\n        <div style={{ fontSize: 18, marginBottom: 12 }}>Будет доступно слов: {loadingMax}</div>\r\n        <div style={{ fontSize: 16, color: '#888' }}>Осталось секунд: {loadingTimer}</div>\r\n      </div>\r\n    );\r\n  }\r\n  if (screen === 'help') {\r\n    return (\r\n      <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto', textAlign: 'center' }}>\r\n        <h1>Фундамент</h1>\r\n        <div style={{ fontSize: 20, margin: '32px 0' }}>Справка будет добавлена позже.</div>\r\n        <button style={{ margin: 12, padding: '12px 32px', fontSize: 18, cursor: 'pointer' }} onClick={() => setScreen('welcome')}>Назад</button>\r\n      </div>\r\n    );\r\n  }\r\n  // Экран игры и анализатора\r\n  if (phase === 'analyzer') {\r\n    return (\r\n      <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto', textAlign: 'center' }}>\r\n        <h2>Анализатор поля</h2>\r\n        <div style={{ fontSize: 18, margin: '16px 0' }}>Найдено слов: <b>{usedWords.length}</b></div>\r\n        <div style={{ fontSize: 16, color: '#1976d2', marginBottom: 12 }}>До начала игры: {timeLeft} сек.</div>\r\n        <div style={{ margin: '12px 0', padding: '8px', background: '#f5f5f5', borderRadius: 8, fontSize: 14, color: '#333', maxHeight: 120, overflowY: 'auto' }}>\r\n          <b>Все слова на поле:</b>\r\n          <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8 }}>\r\n            {usedWords.map(word => (\r\n              <span key={word} style={{ background: '#e0e0e0', borderRadius: 4, padding: '2px 6px', margin: 2 }}>{word}</span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  // Экран игры\r\n  return (\r\n    <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto' }}>\r\n      <h1>Фундамент</h1>\r\n      <div style={{ fontSize: 20, fontWeight: 600, marginBottom: 8 }}>\r\n        {phase === 'playing' ? uiStrings.игра.заголовок : uiStrings.результаты.заголовок}\r\n        {' '}\r\n        <span style={{ fontSize: 18, fontWeight: 400, color: '#1976d2' }}>\r\n          {timeLeft} сек.\r\n        </span>\r\n      </div>\r\n      <div style={{ minHeight: 32, color: message.includes(uiStrings.прочее.очков) ? 'green' : 'red', fontWeight: 500 }}>{message}</div>\r\n      <div style={{ marginBottom: 8 }}>{uiStrings.игра.очки}: {score}</div>\r\n      {/* ОТЛАДКА: выводим все возможные слова на этом поле */}\r\n      <div style={{ margin: '12px 0', padding: '8px', background: '#f5f5f5', borderRadius: 8, fontSize: 14, color: '#333', maxHeight: 120, overflowY: 'auto' }}>\r\n        <b>Все слова на поле ({usedWords.length}):</b>\r\n        <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8 }}>\r\n          {usedWords.map(word => (\r\n            <span key={word} style={{ background: '#e0e0e0', borderRadius: 4, padding: '2px 6px', margin: 2 }}>{word}</span>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <GameBoard \r\n        board={board} \r\n        selectedCells={selectedCells}\r\n        onPathComplete={phase === 'playing' ? handlePathComplete : undefined}\r\n        onDragUpdate={phase === 'playing' ? setSelectedCells : undefined}\r\n        flashColor={flashColor}\r\n      />\r\n      {phase === 'results' && (\r\n        <Results \r\n          foundWords={foundWords} \r\n          possibleWords={possibleWords} \r\n          leaderboard={leaderboard}\r\n          usedWords={usedWords}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
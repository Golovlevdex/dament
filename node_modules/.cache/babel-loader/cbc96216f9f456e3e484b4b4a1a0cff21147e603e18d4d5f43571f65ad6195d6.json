{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import GameBoard from\"./GameBoard.tsx\";// import WordInput from \"./WordInput.tsx\";\nimport Results from\"./Results.tsx\";// Импортируем игровую логику\nimport{generateBoard,findAllWordsOnBoard,ROUND_DURATION,PAUSE_DURATION,letterBonuses}from\"./anagramGenerator.ts\";import{isWordInDictionary,gameDictionary}from\"./dictionary\";import uiStrings from'./ui-strings-categorized.json';import{canFormWordOnBoard}from\"./anagramGenerator.ts\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const mockLeaderboard=[{name:\"Игрок 1\",score:12},{name:\"Игрок 2\",score:8},{name:\"Игрок 3\",score:5}];const getRandomWords=(count,dictionary)=>{const shuffled=[...dictionary].sort(()=>Math.random()-0.5);return shuffled.slice(0,count);};const App=()=>{const[usedWords,setUsedWords]=useState([]);const[board,setBoard]=useState(()=>{const words=getRandomWords(6,gameDictionary);// например, 6 слов на поле\nsetUsedWords(words);return generateBoard({name:\"\",reward:\"\",words});});const[timeLeft,setTimeLeft]=useState(ROUND_DURATION);const[foundWords,setFoundWords]=useState([]);const[score,setScore]=useState(0);const[message,setMessage]=useState(\"\");const[selectedCells,setSelectedCells]=useState([]);const[currentWord,setCurrentWord]=useState(\"\");const[flashColor,setFlashColor]=useState(null);// 'green' | 'red' | null\nconst[phase,setPhase]=useState('playing');const[possibleWords,setPossibleWords]=useState([]);// Таймер\nuseEffect(()=>{if(phase==='playing'&&timeLeft>0){const timer=setTimeout(()=>setTimeLeft(timeLeft-1),1000);return()=>clearTimeout(timer);}if(phase==='playing'&&timeLeft===0){// Переход к результатам\nsetPossibleWords(usedWords.filter(word=>canFormWordOnBoard(word,board)));setPhase('results');setTimeLeft(PAUSE_DURATION);}if(phase==='results'&&timeLeft>0){const timer=setTimeout(()=>setTimeLeft(timeLeft-1),1000);return()=>clearTimeout(timer);}if(phase==='results'&&timeLeft===0){// Новый раунд\nconst words=getRandomWords(6,gameDictionary);setUsedWords(words);setBoard(generateBoard({name:\"\",reward:\"\",words}));setFoundWords([]);setPhase('playing');setTimeLeft(ROUND_DURATION);}},[timeLeft,phase,board]);// Обработка завершения пути (свайп/drag)\nconst handlePathComplete=path=>{if(path.length<3){setMessage(uiStrings.ошибки.минимумБукв);setFlashColor('red');setTimeout(()=>setFlashColor(null),300);setTimeout(()=>{setMessage(\"\");setSelectedCells([]);setCurrentWord(\"\");},350);return;}const word=path.map(_ref=>{let[r,c]=_ref;return board[r][c].letter;}).join(\"\");const allWords=findAllWordsOnBoard(board);if(foundWords.includes(word)){setMessage(uiStrings.ошибки.ужеВводилось);setFlashColor('red');setTimeout(()=>setFlashColor(null),300);setTimeout(()=>{setMessage(\"\");setSelectedCells([]);setCurrentWord(\"\");},350);return;}if(!allWords.includes(word)||!isWordInDictionary(word)){setMessage(uiStrings.ошибки.нетСлова);setFlashColor('red');setTimeout(()=>setFlashColor(null),300);setTimeout(()=>{setMessage(\"\");setSelectedCells([]);setCurrentWord(\"\");},350);return;}// Подсчёт очков по бонусам букв\nlet wordScore=0;path.forEach(_ref2=>{let[r,c]=_ref2;const letter=board[r][c].letter.toUpperCase();wordScore+=letterBonuses[letter]||0;});setScore(score+wordScore);setFoundWords([...foundWords,word]);setMessage(`+${wordScore} очков`);setFlashColor('green');setTimeout(()=>setFlashColor(null),300);setTimeout(()=>{setMessage(\"\");setSelectedCells([]);setCurrentWord(\"\");},350);};// Проверка слова при завершении выбора (например, тап по последней клетке или авто)\nuseEffect(()=>{// Проверяем только если длина слова >= 3\nif(currentWord.length>=3){// Проверяем, есть ли слово в возможных\nconst allWords=findAllWordsOnBoard(board);if(allWords.includes(currentWord)&&!foundWords.includes(currentWord)){setFoundWords([...foundWords,currentWord]);setFlashColor('green');setTimeout(()=>setFlashColor(null),300);setTimeout(()=>{setSelectedCells([]);setCurrentWord(\"\");},350);}else if(currentWord.length>3&&!allWords.includes(currentWord)){setFlashColor('red');setTimeout(()=>setFlashColor(null),300);setTimeout(()=>{setSelectedCells([]);setCurrentWord(\"\");},350);}}},[currentWord]);return/*#__PURE__*/_jsxs(\"div\",{style:{fontFamily:'sans-serif',padding:24,maxWidth:600,margin:'0 auto'},children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Dament\"}),/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:20,fontWeight:600,marginBottom:8},children:[phase==='playing'?uiStrings.игра.заголовок:uiStrings.результаты.заголовок,' ',/*#__PURE__*/_jsxs(\"span\",{style:{fontSize:18,fontWeight:400,color:'#1976d2'},children:[timeLeft,\" \\u0441\\u0435\\u043A.\"]})]}),/*#__PURE__*/_jsx(\"div\",{style:{minHeight:32,color:message.includes(uiStrings.прочее.очков)?'green':'red',fontWeight:500},children:message}),/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:8},children:[uiStrings.игра.очки,\": \",score]}),/*#__PURE__*/_jsx(GameBoard,{board:board,selectedCells:selectedCells,onPathComplete:phase==='playing'?handlePathComplete:undefined,onDragUpdate:phase==='playing'?setSelectedCells:undefined,flashColor:flashColor}),phase==='results'&&/*#__PURE__*/_jsx(Results,{foundWords:foundWords,possibleWords:possibleWords,leaderboard:mockLeaderboard})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","GameBoard","Results","generateBoard","findAllWordsOnBoard","ROUND_DURATION","PAUSE_DURATION","letterBonuses","isWordInDictionary","gameDictionary","uiStrings","canFormWordOnBoard","jsx","_jsx","jsxs","_jsxs","mockLeaderboard","name","score","getRandomWords","count","dictionary","shuffled","sort","Math","random","slice","App","usedWords","setUsedWords","board","setBoard","words","reward","timeLeft","setTimeLeft","foundWords","setFoundWords","setScore","message","setMessage","selectedCells","setSelectedCells","currentWord","setCurrentWord","flashColor","setFlashColor","phase","setPhase","possibleWords","setPossibleWords","timer","setTimeout","clearTimeout","filter","word","handlePathComplete","path","length","ошибки","минимумБукв","map","_ref","r","c","letter","join","allWords","includes","ужеВводилось","нетСлова","wordScore","forEach","_ref2","toUpperCase","style","fontFamily","padding","maxWidth","margin","children","fontSize","fontWeight","marginBottom","игра","заголовок","результаты","color","minHeight","прочее","очков","очки","onPathComplete","undefined","onDragUpdate","leaderboard"],"sources":["C:/vsc/dament/src/App.tsx"],"sourcesContent":["\r\nimport React, { useState, useEffect } from \"react\";\r\nimport GameBoard from \"./GameBoard.tsx\";\r\nimport Timer from \"./Timer.tsx\";\r\n// import WordInput from \"./WordInput.tsx\";\r\nimport Results from \"./Results.tsx\";\r\n// Импортируем игровую логику\r\nimport { generateBoard, findAllWordsOnBoard, ROUND_DURATION, PAUSE_DURATION, Cell, letterBonuses } from \"./anagramGenerator.ts\";\r\nimport { isWordInDictionary, gameDictionary } from \"./dictionary\";\r\nimport uiStrings from './ui-strings-categorized.json';\r\nimport { canFormWordOnBoard } from \"./anagramGenerator.ts\";\r\n\r\nconst mockLeaderboard = [\r\n  { name: \"Игрок 1\", score: 12 },\r\n  { name: \"Игрок 2\", score: 8 },\r\n  { name: \"Игрок 3\", score: 5 }\r\n];\r\n\r\nconst getRandomWords = (count: number, dictionary: string[]): string[] => {\r\n  const shuffled = [...dictionary].sort(() => Math.random() - 0.5);\r\n  return shuffled.slice(0, count);\r\n};\r\n\r\nconst App: React.FC = () => {\r\n  const [usedWords, setUsedWords] = useState<string[]>([]);\r\n  const [board, setBoard] = useState<Cell[][]>(() => {\r\n    const words = getRandomWords(6, gameDictionary); // например, 6 слов на поле\r\n    setUsedWords(words);\r\n    return generateBoard({ name: \"\", reward: \"\", words });\r\n  });\r\n  const [timeLeft, setTimeLeft] = useState<number>(ROUND_DURATION);\r\n  const [foundWords, setFoundWords] = useState<string[]>([]);\r\n  const [score, setScore] = useState<number>(0);\r\n  const [message, setMessage] = useState<string>(\"\");\r\n  const [selectedCells, setSelectedCells] = useState<Array<[number, number]>>([]);\r\n  const [currentWord, setCurrentWord] = useState<string>(\"\");\r\n  const [flashColor, setFlashColor] = useState<string | null>(null); // 'green' | 'red' | null\r\n  const [phase, setPhase] = useState<'playing' | 'results'>('playing');\r\n  const [possibleWords, setPossibleWords] = useState<string[]>([]);\r\n\r\n  // Таймер\r\n  useEffect(() => {\r\n    if (phase === 'playing' && timeLeft > 0) {\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'playing' && timeLeft === 0) {\r\n      // Переход к результатам\r\n      setPossibleWords(usedWords.filter(word => canFormWordOnBoard(word, board)));\r\n      setPhase('results');\r\n      setTimeLeft(PAUSE_DURATION);\r\n    }\r\n    if (phase === 'results' && timeLeft > 0) {\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'results' && timeLeft === 0) {\r\n      // Новый раунд\r\n      const words = getRandomWords(6, gameDictionary);\r\n      setUsedWords(words);\r\n      setBoard(generateBoard({ name: \"\", reward: \"\", words }));\r\n      setFoundWords([]);\r\n      setPhase('playing');\r\n      setTimeLeft(ROUND_DURATION);\r\n    }\r\n  }, [timeLeft, phase, board]);\r\n\r\n\r\n\r\n  // Обработка завершения пути (свайп/drag)\r\n  const handlePathComplete = (path: Array<[number, number]>) => {\r\n    if (path.length < 3) {\r\n      setMessage(uiStrings.ошибки.минимумБукв);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    const word = path.map(([r, c]) => board[r][c].letter).join(\"\");\r\n    const allWords = findAllWordsOnBoard(board);\r\n    if (foundWords.includes(word)) {\r\n      setMessage(uiStrings.ошибки.ужеВводилось);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    if (!allWords.includes(word) || !isWordInDictionary(word)) {\r\n      setMessage(uiStrings.ошибки.нетСлова);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    // Подсчёт очков по бонусам букв\r\n    let wordScore = 0;\r\n    path.forEach(([r, c]) => {\r\n      const letter = board[r][c].letter.toUpperCase();\r\n      wordScore += letterBonuses[letter] || 0;\r\n    });\r\n    setScore(score + wordScore);\r\n    setFoundWords([...foundWords, word]);\r\n    setMessage(`+${wordScore} очков`);\r\n    setFlashColor('green');\r\n    setTimeout(() => setFlashColor(null), 300);\r\n    setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n  };\r\n\r\n  // Проверка слова при завершении выбора (например, тап по последней клетке или авто)\r\n  useEffect(() => {\r\n    // Проверяем только если длина слова >= 3\r\n    if (currentWord.length >= 3) {\r\n      // Проверяем, есть ли слово в возможных\r\n      const allWords = findAllWordsOnBoard(board);\r\n      if (allWords.includes(currentWord) && !foundWords.includes(currentWord)) {\r\n        setFoundWords([...foundWords, currentWord]);\r\n        setFlashColor('green');\r\n        setTimeout(() => setFlashColor(null), 300);\r\n        setTimeout(() => {\r\n          setSelectedCells([]);\r\n          setCurrentWord(\"\");\r\n        }, 350);\r\n      } else if (currentWord.length > 3 && !allWords.includes(currentWord)) {\r\n        setFlashColor('red');\r\n        setTimeout(() => setFlashColor(null), 300);\r\n        setTimeout(() => {\r\n          setSelectedCells([]);\r\n          setCurrentWord(\"\");\r\n        }, 350);\r\n      }\r\n    }\r\n  }, [currentWord]);\r\n\r\n  return (\r\n    <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto' }}>\r\n      <h1>Dament</h1>\r\n      <div style={{ fontSize: 20, fontWeight: 600, marginBottom: 8 }}>\r\n        {phase === 'playing' ? uiStrings.игра.заголовок : uiStrings.результаты.заголовок}\r\n        {' '}\r\n        <span style={{ fontSize: 18, fontWeight: 400, color: '#1976d2' }}>\r\n          {timeLeft} сек.\r\n        </span>\r\n      </div>\r\n      <div style={{ minHeight: 32, color: message.includes(uiStrings.прочее.очков) ? 'green' : 'red', fontWeight: 500 }}>{message}</div>\r\n      <div style={{ marginBottom: 8 }}>{uiStrings.игра.очки}: {score}</div>\r\n      <GameBoard \r\n        board={board} \r\n        selectedCells={selectedCells}\r\n        onPathComplete={phase === 'playing' ? handlePathComplete : undefined}\r\n        onDragUpdate={phase === 'playing' ? setSelectedCells : undefined}\r\n        flashColor={flashColor}\r\n      />\r\n      {phase === 'results' && (\r\n        <Results foundWords={foundWords} possibleWords={possibleWords} leaderboard={mockLeaderboard} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\vsc\\\\dament\\\\src\\\\GameBoard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport { letterBonuses } from \"./anagramGenerator.ts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// ...existing code...\n\nconst GameBoard = ({\n  board,\n  selectedCells = [],\n  onCellSelect,\n  flashColor\n}) => {\n  _s();\n  const getCoords = idx => [Math.floor(idx / 4), idx % 4];\n  const [isDragging, setIsDragging] = useState(false);\n\n  // Глобальный mouseup для завершения drag\n  React.useEffect(() => {\n    const handleGlobalMouseUp = () => {\n      if (isDragging) {\n        setIsDragging(false);\n        if (dragCells.current.length > 0 && typeof onPathComplete === 'function') {\n          onPathComplete([...dragCells.current]);\n        }\n        dragCells.current = [];\n      }\n    };\n    document.addEventListener('mouseup', handleGlobalMouseUp);\n    return () => document.removeEventListener('mouseup', handleGlobalMouseUp);\n  }, [isDragging, onPathComplete]);\n  const dragCells = useRef([]);\n\n  // Начало свайпа\n  const handleStart = (row, col) => {\n    setIsDragging(true);\n    dragCells.current = [[row, col]];\n    if (onCellSelect) onCellSelect(row, col);\n  };\n  // Проверка соседства\n  const isNeighbor = (a, b) => {\n    const dr = Math.abs(a[0] - b[0]);\n    const dc = Math.abs(a[1] - b[1]);\n    return dr <= 1 && dc <= 1 && !(dr === 0 && dc === 0);\n  };\n  // Добавление ячейки при движении\n  const handleEnter = (row, col) => {\n    if (!isDragging) return;\n    if (dragCells.current.some(([r, c]) => r === row && c === col)) return;\n    const last = dragCells.current[dragCells.current.length - 1];\n    if (!isNeighbor(last, [row, col])) return;\n    dragCells.current.push([row, col]);\n    if (onCellSelect) onCellSelect(row, col);\n  };\n  // Завершение свайпа\n  const handleEnd = () => {\n    setIsDragging(false);\n    if (dragCells.current.length > 0 && typeof onPathComplete === 'function') {\n      onPathComplete([...dragCells.current]);\n    }\n    dragCells.current = [];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(4, 48px)',\n      gap: 8\n    },\n    onMouseUp: handleEnd,\n    onTouchEnd: handleEnd,\n    children: board.flat().map((cell, idx) => {\n      const [row, col] = getCoords(idx);\n      const isSelected = selectedCells.some(([r, c]) => r === row && c === col);\n      let bg = '#e0e0e0';\n      if (cell.bonus === 'doubleLetter') bg = '#ffe082';\n      if (cell.bonus === 'rareBonus') bg = '#ce93d8';\n      if (isSelected) bg = '#90caf9';\n      if (isSelected && flashColor === 'green') bg = '#a5d6a7';\n      if (isSelected && flashColor === 'red') bg = '#ef9a9a';\n      const bonusValue = letterBonuses[cell.letter.toUpperCase()] || 0;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: 48,\n          height: 48,\n          background: bg,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          fontSize: 24,\n          borderRadius: 8,\n          cursor: onCellSelect ? 'pointer' : 'default',\n          transition: 'background 0.2s',\n          boxShadow: isSelected ? '0 0 0 2px #1976d2' : undefined\n        },\n        onMouseDown: e => {\n          if (e.button === 0) handleStart(row, col);\n        },\n        onMouseEnter: e => {\n          if (isDragging) handleEnter(row, col);\n        },\n        onTouchStart: () => handleStart(row, col),\n        onTouchMove: e => {\n          const touch = e.touches[0];\n          const target = document.elementFromPoint(touch.clientX, touch.clientY);\n          if (target && target.dataset && target.dataset.idx) {\n            const idx2 = parseInt(target.dataset.idx);\n            const [r2, c2] = getCoords(idx2);\n            handleEnter(r2, c2);\n          }\n        },\n        \"data-idx\": idx,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: cell.letter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: 12,\n            color: '#6d4c41'\n          },\n          children: bonusValue > 0 ? bonusValue : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"+v7LJdAOo4lmhISvHc/sXhkmi9k=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useRef","useState","letterBonuses","jsxDEV","_jsxDEV","GameBoard","board","selectedCells","onCellSelect","flashColor","_s","getCoords","idx","Math","floor","isDragging","setIsDragging","useEffect","handleGlobalMouseUp","dragCells","current","length","onPathComplete","document","addEventListener","removeEventListener","handleStart","row","col","isNeighbor","a","b","dr","abs","dc","handleEnter","some","r","c","last","push","handleEnd","style","display","gridTemplateColumns","gap","onMouseUp","onTouchEnd","children","flat","map","cell","isSelected","bg","bonus","bonusValue","letter","toUpperCase","width","height","background","flexDirection","alignItems","justifyContent","fontSize","borderRadius","cursor","transition","boxShadow","undefined","onMouseDown","e","button","onMouseEnter","onTouchStart","onTouchMove","touch","touches","target","elementFromPoint","clientX","clientY","dataset","idx2","parseInt","r2","c2","fileName","_jsxFileName","lineNumber","columnNumber","color","_c","$RefreshReg$"],"sources":["C:/vsc/dament/src/GameBoard.tsx"],"sourcesContent":["import React, { useRef, useState } from \"react\";\r\n\r\nimport { Cell, letterBonuses } from \"./anagramGenerator.ts\";\r\n\r\ninterface GameBoardProps {\r\n  board: Cell[][];\r\n  selectedCells?: Array<[number, number]>;\r\n  onCellSelect?: (row: number, col: number) => void;\r\n  onPathComplete?: (path: Array<[number, number]>) => void;\r\n  flashColor?: string | null; // 'green' | 'red' | null\r\n}\r\n\r\n// ...existing code...\r\n\r\nconst GameBoard: React.FC<GameBoardProps> = ({ board, selectedCells = [], onCellSelect, flashColor }) => {\r\n  const getCoords = (idx: number) => [Math.floor(idx / 4), idx % 4] as [number, number];\r\n  const [isDragging, setIsDragging] = useState(false);\r\n\r\n  // Глобальный mouseup для завершения drag\r\n  React.useEffect(() => {\r\n    const handleGlobalMouseUp = () => {\r\n      if (isDragging) {\r\n        setIsDragging(false);\r\n        if (dragCells.current.length > 0 && typeof onPathComplete === 'function') {\r\n          onPathComplete([...dragCells.current]);\r\n        }\r\n        dragCells.current = [];\r\n      }\r\n    };\r\n    document.addEventListener('mouseup', handleGlobalMouseUp);\r\n    return () => document.removeEventListener('mouseup', handleGlobalMouseUp);\r\n  }, [isDragging, onPathComplete]);\r\n  const dragCells = useRef<Array<[number, number]>>([]);\r\n\r\n  // Начало свайпа\r\n  const handleStart = (row: number, col: number) => {\r\n    setIsDragging(true);\r\n    dragCells.current = [[row, col]];\r\n    if (onCellSelect) onCellSelect(row, col);\r\n  };\r\n  // Проверка соседства\r\n  const isNeighbor = (a: [number, number], b: [number, number]) => {\r\n    const dr = Math.abs(a[0] - b[0]);\r\n    const dc = Math.abs(a[1] - b[1]);\r\n    return dr <= 1 && dc <= 1 && !(dr === 0 && dc === 0);\r\n  };\r\n  // Добавление ячейки при движении\r\n  const handleEnter = (row: number, col: number) => {\r\n    if (!isDragging) return;\r\n    if (dragCells.current.some(([r, c]) => r === row && c === col)) return;\r\n    const last = dragCells.current[dragCells.current.length - 1];\r\n    if (!isNeighbor(last, [row, col])) return;\r\n    dragCells.current.push([row, col]);\r\n    if (onCellSelect) onCellSelect(row, col);\r\n  };\r\n  // Завершение свайпа\r\n  const handleEnd = () => {\r\n    setIsDragging(false);\r\n    if (dragCells.current.length > 0 && typeof onPathComplete === 'function') {\r\n      onPathComplete([...dragCells.current]);\r\n    }\r\n    dragCells.current = [];\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{ display: 'grid', gridTemplateColumns: 'repeat(4, 48px)', gap: 8 }}\r\n      onMouseUp={handleEnd}\r\n      onTouchEnd={handleEnd}\r\n    >\r\n      {board.flat().map((cell, idx) => {\r\n        const [row, col] = getCoords(idx);\r\n        const isSelected = selectedCells.some(([r, c]) => r === row && c === col);\r\n        let bg = '#e0e0e0';\r\n        if (cell.bonus === 'doubleLetter') bg = '#ffe082';\r\n        if (cell.bonus === 'rareBonus') bg = '#ce93d8';\r\n        if (isSelected) bg = '#90caf9';\r\n        if (isSelected && flashColor === 'green') bg = '#a5d6a7';\r\n        if (isSelected && flashColor === 'red') bg = '#ef9a9a';\r\n        const bonusValue = letterBonuses[cell.letter.toUpperCase()] || 0;\r\n        return (\r\n          <div\r\n            key={idx}\r\n            style={{\r\n              width: 48,\r\n              height: 48,\r\n              background: bg,\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              fontSize: 24,\r\n              borderRadius: 8,\r\n              cursor: onCellSelect ? 'pointer' : 'default',\r\n              transition: 'background 0.2s',\r\n              boxShadow: isSelected ? '0 0 0 2px #1976d2' : undefined\r\n            }}\r\n            onMouseDown={e => {\r\n              if (e.button === 0) handleStart(row, col);\r\n            }}\r\n            onMouseEnter={e => {\r\n              if (isDragging) handleEnter(row, col);\r\n            }}\r\n            onTouchStart={() => handleStart(row, col)}\r\n            onTouchMove={e => {\r\n              const touch = e.touches[0];\r\n              const target = document.elementFromPoint(touch.clientX, touch.clientY);\r\n              if (target && (target as HTMLElement).dataset && (target as HTMLElement).dataset.idx) {\r\n                const idx2 = parseInt((target as HTMLElement).dataset.idx!);\r\n                const [r2, c2] = getCoords(idx2);\r\n                handleEnter(r2, c2);\r\n              }\r\n            }}\r\n            data-idx={idx}\r\n          >\r\n            <span>{cell.letter}</span>\r\n            <span style={{ fontSize: 12, color: '#6d4c41' }}>{bonusValue > 0 ? bonusValue : ''}</span>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\vsc\\\\dament\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport GameBoard from \"./GameBoard\";\n// import WordInput from \"./WordInput\";\nimport Results from \"./Results\";\n// Импортируем игровую логику\n// --- ВАЖНО: здесь задаются длительности всех фаз игры (в секундах) ---\n// ROUND_DURATION — сколько секунд длится сам игровой раунд (например, 60)\n// PAUSE_DURATION — сколько секунд длится анализатор между раундами (например, 15)\n// Если хотите изменить длительность любой фазы — меняйте эти переменные!\nimport { generateBoard, findAllWordsOnBoard, ROUND_DURATION, PAUSE_DURATION, letterBonuses } from \"./anagramGenerator\";\nimport { isWordInDictionary, gameDictionary } from \"./dictionary\";\nimport uiStrings from './ui-strings-categorized.json';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getRandomWords = (count, dictionary) => {\n  const shuffled = [...dictionary].sort(() => Math.random() - 0.5);\n  return shuffled.slice(0, count);\n};\nconst App = () => {\n  _s();\n  // Для анимации счетчика найденных слов на анализаторе\n  const [analyzerWordCount, setAnalyzerWordCount] = useState(0);\n  const [screen, setScreen] = useState('welcome');\n  // Для свайп-старта\n  const START_WORD = 'СТАРТ';\n  // Слово СТАРТ в одну горизонтальную линию (1x5)\n  const startBoard = [[...START_WORD].map((letter, idx) => ({\n    letter,\n    bonus: 'none',\n    row: 0,\n    col: idx\n  }))];\n  const [startFlashColor, setStartFlashColor] = useState(null);\n  const [startSelected, setStartSelected] = useState([]);\n  const [loadingProgress, setLoadingProgress] = useState(0);\n  const [loadingMax, setLoadingMax] = useState(0);\n  const [loadingTimer, setLoadingTimer] = useState(5);\n  // roundData: { board, words } - единый источник истины для поля и слов на раунд\n  const [roundData, setRoundData] = useState(null);\n  // Параметры генерации\n  const FIELD_SIZE = 4; // размер поля (4x4)\n  const MIN_WORDS = 15; // минимальное количество слов (снизили с 20)\n  const MAX_ATTEMPTS = 500; // увеличили количество попыток\n\n  const [timeLeft, setTimeLeft] = useState(ROUND_DURATION);\n  const [foundWords, setFoundWords] = useState([]);\n  const [score, setScore] = useState(0);\n  const [message, setMessage] = useState(\"\");\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [currentWord, setCurrentWord] = useState(\"\");\n  const [flashColor, setFlashColor] = useState(null);\n  const [phase, setPhase] = useState('playing');\n  const leaderboard = [{\n    name: \"Вы\",\n    score\n  }];\n\n  // useEffect для смены экранов во время загрузки\n  useEffect(() => {\n    if (screen === 'loading' && loadingTimer > 0) {\n      const timer = setTimeout(() => setLoadingTimer(loadingTimer - 1), 1000);\n      return () => clearTimeout(timer);\n    } else if (screen === 'loading' && loadingTimer === 0) {\n      setScreen('game');\n    }\n  }, [screen, loadingTimer]);\n\n  // useEffect для анимации загрузки\n  useEffect(() => {\n    if (screen === 'loading' && loadingProgress < loadingMax && loadingTimer > 0) {\n      const step = Math.ceil(loadingMax / (loadingTimer * 20));\n      const interval = setInterval(() => {\n        setLoadingProgress(prev => Math.min(prev + step, loadingMax));\n      }, 50);\n      return () => clearInterval(interval);\n    }\n  }, [screen, loadingProgress, loadingMax, loadingTimer]);\n\n  // --- ГЛАВНЫЙ ТАЙМЕР ИГРЫ И ФАЗ ---\n  // Здесь реализованы все основные таймеры и переходы между фазами:\n  //\n  // 1. Анализатор (phase === 'analyzer')\n  //    - Это пауза между раундами, когда игроку показываются все слова на поле.\n  //    - Длительность этой паузы задаётся переменной PAUSE_DURATION (например, 15 секунд).\n  //    - Если хотите изменить — ищите PAUSE_DURATION (см. импорт сверху).\n  //\n  // 2. Игра (phase === 'playing')\n  //    - Это основной игровой раунд, когда игрок ищет слова.\n  //    - Длительность раунда задаётся переменной ROUND_DURATION (например, 60 секунд).\n  //    - Если хотите изменить — ищите ROUND_DURATION (см. импорт сверху).\n  //\n  // 3. Результаты (phase === 'results')\n  //    - Это короткая пауза после окончания игры, когда показываются результаты.\n  //    - Длительность задаётся жёстко в setTimeLeft(3) (3 секунды, можно изменить на любое число).\n  //\n  // После каждой фазы происходит переход к следующей с установкой нужного таймера.\n  //\n  // Схема переходов:\n  // [Анализатор (PAUSE_DURATION сек)] → [Игра (ROUND_DURATION сек)] → [Результаты (3 сек)] → [Анализатор ...]\n  //\n  // Пример: если PAUSE_DURATION = 15, ROUND_DURATION = 60, то цикл такой:\n  // 15 сек анализатор → 60 сек игра → 3 сек результаты → 15 сек анализатор ...\n  //\n  // Чтобы изменить длительность любой фазы, меняйте соответствующую переменную!\n  useEffect(() => {\n    // --- Фаза ИГРА ---\n    if (phase === 'playing' && timeLeft > 0) {\n      // Основной игровой таймер (по умолчанию 60 сек, регулируется ROUND_DURATION)\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n    if (phase === 'playing' && timeLeft === 0) {\n      // Игра закончилась — переходим к результатам\n      setSelectedCells([]);\n      setCurrentWord(\"\");\n      setPhase('results');\n      setTimeLeft(10); // <--- Длительность экрана результатов (10 сек, можно изменить)\n    }\n    // --- Фаза РЕЗУЛЬТАТЫ ---\n    if (phase === 'results' && timeLeft > 0) {\n      // Таймер результатов (короткая пауза между игрой и анализатором)\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n    if (phase === 'results' && timeLeft === 0) {\n      // После результатов — генерируем новое поле и переходим к анализатору\n      const words = getRandomWords(6, gameDictionary);\n      const board = generateBoard({\n        name: \"\",\n        reward: \"\",\n        words\n      });\n      const allPossibleWords = findAllWordsOnBoard(board).filter(word => word.length >= 3);\n      setRoundData({\n        board,\n        words: allPossibleWords\n      });\n      setPhase('analyzer');\n      setTimeLeft(PAUSE_DURATION); // <--- Длительность анализатора (по умолчанию 15 сек, регулируется PAUSE_DURATION)\n      setAnalyzerWordCount(0); // сбрасываем счетчик для анимации\n    }\n    // --- Фаза АНАЛИЗАТОР ---\n    if (phase === 'analyzer' && timeLeft > 0) {\n      // Таймер анализатора (показывает слова перед началом игры)\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n    if (phase === 'analyzer' && timeLeft === 0) {\n      // Анализатор закончился — начинаем новый игровой раунд\n      setFoundWords([]);\n      setPhase('playing');\n      setTimeLeft(ROUND_DURATION); // <--- Длительность игры (по умолчанию 60 сек, регулируется ROUND_DURATION)\n    }\n  }, [timeLeft, phase]);\n\n  // Анимация увеличения числа найденных слов на анализаторе\n  useEffect(() => {\n    if (phase === 'analyzer' && roundData) {\n      setAnalyzerWordCount(0);\n      let current = 0;\n      const target = roundData.words.length;\n      const duration = Math.max(800, Math.min(2000, target * 40)); // 0.8-2 сек\n      const stepTime = Math.max(20, duration / (target || 1));\n      const interval = setInterval(() => {\n        current++;\n        setAnalyzerWordCount(prev => {\n          if (prev < target) return prev + 1;\n          clearInterval(interval);\n          return prev;\n        });\n        if (current >= target) {\n          clearInterval(interval);\n        }\n      }, stepTime);\n      return () => clearInterval(interval);\n    }\n  }, [phase, roundData]);\n\n  // Обработка завершения пути (свайп/drag)\n  const handlePathComplete = path => {\n    if (!roundData) return;\n    if (path.length < 3) {\n      setMessage(uiStrings.ошибки.минимумБукв);\n      setFlashColor('red');\n      setTimeout(() => setFlashColor(null), 300);\n      setTimeout(() => {\n        setMessage(\"\");\n        setSelectedCells([]);\n        setCurrentWord(\"\");\n      }, 350);\n      return;\n    }\n    const word = path.map(([r, c]) => roundData.board[r][c].letter).join(\"\");\n    if (foundWords.includes(word)) {\n      setMessage(uiStrings.ошибки.ужеВводилось);\n      setFlashColor('red');\n      setTimeout(() => setFlashColor(null), 300);\n      setTimeout(() => {\n        setMessage(\"\");\n        setSelectedCells([]);\n        setCurrentWord(\"\");\n      }, 350);\n      return;\n    }\n    if (!roundData.words.includes(word) || !isWordInDictionary(word)) {\n      setMessage(uiStrings.ошибки.нетСлова);\n      setFlashColor('red');\n      setTimeout(() => setFlashColor(null), 300);\n      setTimeout(() => {\n        setMessage(\"\");\n        setSelectedCells([]);\n        setCurrentWord(\"\");\n      }, 350);\n      return;\n    }\n    // Подсчёт очков по бонусам букв\n    let wordScore = 0;\n    path.forEach(([r, c]) => {\n      const letter = roundData.board[r][c].letter.toUpperCase();\n      wordScore += letterBonuses[letter] || 0;\n    });\n    setScore(score + wordScore);\n    setFoundWords([...foundWords, word]);\n    setMessage(`+${wordScore} очков`);\n    setFlashColor('green');\n    setTimeout(() => setFlashColor(null), 300);\n    setTimeout(() => {\n      setMessage(\"\");\n      setSelectedCells([]);\n      setCurrentWord(\"\");\n    }, 350);\n  };\n\n  // Проверка слова при завершении выбора (например, тап по последней клетке или авто)\n  useEffect(() => {\n    if (!roundData) return;\n    // Проверяем только если длина слова >= 3\n    if (currentWord.length >= 3) {\n      if (roundData.words.includes(currentWord) && !foundWords.includes(currentWord)) {\n        setFoundWords([...foundWords, currentWord]);\n        setFlashColor('green');\n        setTimeout(() => setFlashColor(null), 300);\n        setTimeout(() => {\n          setSelectedCells([]);\n          setCurrentWord(\"\");\n        }, 350);\n      } else if (currentWord.length > 3 && !roundData.words.includes(currentWord)) {\n        setFlashColor('red');\n        setTimeout(() => setFlashColor(null), 300);\n        setTimeout(() => {\n          setSelectedCells([]);\n          setCurrentWord(\"\");\n        }, 350);\n      }\n    }\n  }, [currentWord, roundData, foundWords]);\n\n  // Эмуляция смартфона: размеры Samsung Galaxy S24+ (CSS viewport 390x844px)\n  const phoneFrameStyle = {\n    width: '100vw',\n    maxWidth: 430,\n    height: '100vh',\n    maxHeight: 932,\n    margin: '0 auto',\n    borderRadius: 36,\n    border: '8px solid #222',\n    boxShadow: '0 0 32px #0006',\n    background: '#111',\n    overflow: 'hidden',\n    position: 'relative',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'stretch',\n    justifyContent: 'flex-start',\n    minWidth: 0,\n    minHeight: 0\n  };\n  const phoneContentStyle = {\n    width: '100%',\n    height: '100%',\n    background: '#fff',\n    overflowY: 'auto',\n    WebkitOverflowScrolling: 'touch',\n    borderRadius: 28,\n    position: 'relative',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'stretch',\n    justifyContent: 'flex-start',\n    minWidth: 0,\n    minHeight: 0\n  };\n\n  // Свайп-старт по слову СТАРТ\n  const handleStartPath = path => {\n    const word = path.map(([r, c]) => startBoard[r][c].letter).join(\"\");\n    if (word === START_WORD) {\n      setStartFlashColor('green');\n      setTimeout(() => {\n        // Генерируем поле и слова для нового раунда\n        const words = getRandomWords(6, gameDictionary);\n        const board = generateBoard({\n          name: \"\",\n          reward: \"\",\n          words\n        });\n        const allPossibleWords = findAllWordsOnBoard(board).filter(word => word.length >= 3);\n        setRoundData({\n          board,\n          words: allPossibleWords\n        });\n        setPhase('analyzer'); // Сразу запускаем анализатор\n        setTimeLeft(PAUSE_DURATION); // Длительность анализатора\n        setAnalyzerWordCount(0);\n        setStartSelected([]);\n        setStartFlashColor(null);\n      }, 350);\n    } else {\n      setStartFlashColor('red');\n      setTimeout(() => {\n        setStartSelected([]);\n        setStartFlashColor(null);\n      }, 350);\n    }\n  };\n\n  // Обёртка для любого экрана внутри рамки смартфона\n  const renderPhoneFrame = content => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: '#222',\n      minHeight: '100vh',\n      minWidth: '100vw',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: phoneFrameStyle,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: phoneContentStyle,\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 298,\n    columnNumber: 5\n  }, this);\n  if (screen === 'welcome') {\n    return renderPhoneFrame(/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: 'sans-serif',\n        padding: '4vw',\n        width: '100%',\n        maxWidth: 430,\n        margin: '0 auto',\n        textAlign: 'center',\n        boxSizing: 'border-box'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          fontSize: '2.2rem',\n          margin: '2vw 0 2vw 0'\n        },\n        children: \"\\u0424\\u0443\\u043D\\u0434\\u0430\\u043C\\u0435\\u043D\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          margin: '6vw 0 3vw 0'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            minWidth: 180,\n            width: '60vw',\n            maxWidth: 320\n          },\n          children: /*#__PURE__*/_jsxDEV(GameBoard, {\n            board: startBoard,\n            selectedCells: startSelected,\n            onPathComplete: handleStartPath,\n            onDragUpdate: setStartSelected,\n            flashColor: startFlashColor,\n            columnsCount: START_WORD.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '1rem',\n          color: '#888',\n          marginBottom: '6vw'\n        },\n        children: \"\\u041F\\u0440\\u043E\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043F\\u043E \\u0431\\u0443\\u043A\\u0432\\u0430\\u043C, \\u0447\\u0442\\u043E\\u0431\\u044B \\u043D\\u0430\\u0447\\u0430\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          margin: '2vw',\n          padding: '3vw 8vw',\n          fontSize: '1.1rem',\n          cursor: 'pointer',\n          borderRadius: 12,\n          border: '1px solid #1976d2',\n          background: '#f5faff',\n          color: '#1976d2'\n        },\n        onClick: () => setScreen('help'),\n        children: \"\\u0421\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this));\n  }\n\n  // Удаляем экран 'loading' — теперь анализатор только один (phase === 'analyzer')\n  if (screen === 'help') {\n    return renderPhoneFrame(/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: 'sans-serif',\n        padding: '4vw',\n        width: '100%',\n        maxWidth: 430,\n        margin: '0 auto',\n        textAlign: 'center',\n        boxSizing: 'border-box'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          fontSize: '2.2rem',\n          margin: '2vw 0 2vw 0'\n        },\n        children: \"\\u0424\\u0443\\u043D\\u0434\\u0430\\u043C\\u0435\\u043D\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '1.2rem',\n          margin: '6vw 0'\n        },\n        children: \"\\u0421\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430 \\u0431\\u0443\\u0434\\u0435\\u0442 \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u0430 \\u043F\\u043E\\u0437\\u0436\\u0435.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          margin: '2vw',\n          padding: '3vw 8vw',\n          fontSize: '1.1rem',\n          cursor: 'pointer',\n          borderRadius: 12,\n          border: '1px solid #1976d2',\n          background: '#f5faff',\n          color: '#1976d2'\n        },\n        onClick: () => setScreen('welcome'),\n        children: \"\\u041D\\u0430\\u0437\\u0430\\u0434\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this));\n  }\n  // Экран игры и анализатора\n  if (phase === 'analyzer' && roundData) {\n    return renderPhoneFrame(/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: 'sans-serif',\n        padding: '4vw',\n        width: '100%',\n        maxWidth: 430,\n        margin: '0 auto',\n        textAlign: 'center',\n        position: 'relative',\n        boxSizing: 'border-box'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          position: 'absolute',\n          left: 8,\n          top: 8,\n          background: 'none',\n          border: 'none',\n          cursor: 'pointer',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center'\n        },\n        onClick: () => setScreen('welcome'),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: 28,\n            lineHeight: 1,\n            color: '#1976d2'\n          },\n          children: \"\\u2190\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: 13,\n            color: '#1976d2',\n            marginTop: 2\n          },\n          children: \"\\u041D\\u0430\\u0437\\u0430\\u0434\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          fontSize: '1.3rem',\n          margin: '2vw 0 2vw 0'\n        },\n        children: \"\\u0410\\u043D\\u0430\\u043B\\u0438\\u0437\\u0430\\u0442\\u043E\\u0440 \\u043F\\u043E\\u043B\\u044F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '1.1rem',\n          margin: '4vw 0'\n        },\n        children: [\"\\u041D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E \\u0441\\u043B\\u043E\\u0432: \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: analyzerWordCount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 76\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '1rem',\n          color: '#1976d2',\n          marginBottom: '3vw'\n        },\n        children: [\"\\u0414\\u043E \\u043D\\u0430\\u0447\\u0430\\u043B\\u0430 \\u0438\\u0433\\u0440\\u044B: \", timeLeft, \" \\u0441\\u0435\\u043A.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '3vw 0',\n          padding: '2vw',\n          background: '#f5f5f5',\n          borderRadius: 8,\n          fontSize: '0.95rem',\n          color: '#333',\n          maxHeight: 180,\n          overflowY: 'auto'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"\\u0412\\u0441\\u0435 \\u0441\\u043B\\u043E\\u0432\\u0430 \\u043D\\u0430 \\u043F\\u043E\\u043B\\u0435 (\\u0441 \\u043E\\u0447\\u043A\\u0430\\u043C\\u0438):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            gap: 8\n          },\n          children: roundData.words.slice(0, analyzerWordCount).map(word => {\n            // Считаем очки за слово по бонусной системе\n            const wordScore = word.split('').reduce((sum, letter) => sum + (letterBonuses[letter.toUpperCase()] || 0), 0);\n            return /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                background: '#e0e0e0',\n                borderRadius: 4,\n                padding: '2px 8px',\n                margin: 2,\n                display: 'flex',\n                alignItems: 'center',\n                gap: 4\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: word\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  color: '#1976d2',\n                  fontWeight: 600,\n                  fontSize: '0.98em',\n                  marginLeft: 2\n                },\n                children: [\"(\", wordScore, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 19\n              }, this)]\n            }, word, true, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }, this));\n  }\n  // Экран игры\n  if (roundData) {\n    return renderPhoneFrame(/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: 'sans-serif',\n        padding: '4vw',\n        width: '100%',\n        maxWidth: 430,\n        margin: '0 auto',\n        position: 'relative',\n        boxSizing: 'border-box'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          position: 'absolute',\n          left: 8,\n          top: 8,\n          background: 'none',\n          border: 'none',\n          cursor: 'pointer',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center'\n        },\n        onClick: () => setScreen('welcome'),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: 28,\n            lineHeight: 1,\n            color: '#1976d2'\n          },\n          children: \"\\u2190\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: 13,\n            color: '#1976d2',\n            marginTop: 2\n          },\n          children: \"\\u041D\\u0430\\u0437\\u0430\\u0434\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          fontSize: '2.2rem',\n          margin: '2vw 0 2vw 0'\n        },\n        children: \"\\u0424\\u0443\\u043D\\u0434\\u0430\\u043C\\u0435\\u043D\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '1.2rem',\n          fontWeight: 600,\n          marginBottom: '2vw'\n        },\n        children: [phase === 'playing' ? uiStrings.игра.заголовок : uiStrings.результаты.заголовок, ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: '1.1rem',\n            fontWeight: 400,\n            color: '#1976d2'\n          },\n          children: [timeLeft, \" \\u0441\\u0435\\u043A.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          minHeight: 32,\n          color: message.includes(uiStrings.прочее.очков) ? 'green' : 'red',\n          fontWeight: 500\n        },\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '2vw'\n        },\n        children: [uiStrings.игра.очки, \": \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n        board: roundData.board,\n        selectedCells: selectedCells,\n        onPathComplete: phase === 'playing' ? handlePathComplete : undefined,\n        onDragUpdate: phase === 'playing' ? setSelectedCells : undefined,\n        flashColor: flashColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '3vw 0',\n          padding: '2vw',\n          background: '#f5f5f5',\n          borderRadius: 8,\n          fontSize: '0.95rem',\n          color: '#333',\n          maxHeight: 120,\n          overflowY: 'auto'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: [\"\\u0412\\u0441\\u0435 \\u0441\\u043B\\u043E\\u0432\\u0430 \\u043D\\u0430 \\u043F\\u043E\\u043B\\u0435 (\", roundData.words.length, \"):\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            gap: 8\n          },\n          children: roundData.words.map(word => /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              background: '#e0e0e0',\n              borderRadius: 4,\n              padding: '2px 6px',\n              margin: 2\n            },\n            children: word\n          }, word, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, this), phase === 'results' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            margin: '3vw 0',\n            padding: '2vw',\n            background: '#e3f2fd',\n            borderRadius: 8,\n            fontSize: '1.15rem',\n            color: '#1976d2',\n            textAlign: 'center',\n            fontWeight: 600\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\u0420\\u0430\\u0443\\u043D\\u0434 \\u0437\\u0430\\u0432\\u0435\\u0440\\u0448\\u0451\\u043D!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: 8\n            },\n            children: [\"\\u0412\\u0430\\u0448 \\u0440\\u0435\\u0437\\u0443\\u043B\\u044C\\u0442\\u0430\\u0442: \", /*#__PURE__*/_jsxDEV(\"b\", {\n              style: {\n                color: '#1565c0',\n                fontSize: '1.3em'\n              },\n              children: [score, \" \\u043E\\u0447\\u043A\\u043E\\u0432\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 60\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Results, {\n          foundWords: foundWords,\n          possibleWords: roundData.words,\n          leaderboard: leaderboard,\n          usedWords: roundData.words\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this));\n  }\n  return null;\n};\n_s(App, \"Yd+npYl1bme49XXichNQtdvazK0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","GameBoard","Results","generateBoard","findAllWordsOnBoard","ROUND_DURATION","PAUSE_DURATION","letterBonuses","isWordInDictionary","gameDictionary","uiStrings","jsxDEV","_jsxDEV","Fragment","_Fragment","getRandomWords","count","dictionary","shuffled","sort","Math","random","slice","App","_s","analyzerWordCount","setAnalyzerWordCount","screen","setScreen","START_WORD","startBoard","map","letter","idx","bonus","row","col","startFlashColor","setStartFlashColor","startSelected","setStartSelected","loadingProgress","setLoadingProgress","loadingMax","setLoadingMax","loadingTimer","setLoadingTimer","roundData","setRoundData","FIELD_SIZE","MIN_WORDS","MAX_ATTEMPTS","timeLeft","setTimeLeft","foundWords","setFoundWords","score","setScore","message","setMessage","selectedCells","setSelectedCells","currentWord","setCurrentWord","flashColor","setFlashColor","phase","setPhase","leaderboard","name","timer","setTimeout","clearTimeout","step","ceil","interval","setInterval","prev","min","clearInterval","words","board","reward","allPossibleWords","filter","word","length","current","target","duration","max","stepTime","handlePathComplete","path","ошибки","минимумБукв","r","c","join","includes","ужеВводилось","нетСлова","wordScore","forEach","toUpperCase","phoneFrameStyle","width","maxWidth","height","maxHeight","margin","borderRadius","border","boxShadow","background","overflow","position","display","flexDirection","alignItems","justifyContent","minWidth","minHeight","phoneContentStyle","overflowY","WebkitOverflowScrolling","handleStartPath","renderPhoneFrame","content","style","children","fileName","_jsxFileName","lineNumber","columnNumber","fontFamily","padding","textAlign","boxSizing","fontSize","onPathComplete","onDragUpdate","columnsCount","color","marginBottom","cursor","onClick","left","top","lineHeight","marginTop","flexWrap","gap","split","reduce","sum","fontWeight","marginLeft","игра","заголовок","результаты","прочее","очков","очки","undefined","possibleWords","usedWords","_c","$RefreshReg$"],"sources":["C:/vsc/dament/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport type { Cell as CellType } from \"./anagramGenerator\";\r\nimport GameBoard from \"./GameBoard\";\r\nimport Timer from \"./Timer\";\r\n// import WordInput from \"./WordInput\";\r\nimport Results from \"./Results\";\r\n// Импортируем игровую логику\r\n// --- ВАЖНО: здесь задаются длительности всех фаз игры (в секундах) ---\r\n// ROUND_DURATION — сколько секунд длится сам игровой раунд (например, 60)\r\n// PAUSE_DURATION — сколько секунд длится анализатор между раундами (например, 15)\r\n// Если хотите изменить длительность любой фазы — меняйте эти переменные!\r\nimport { generateBoard, findAllWordsOnBoard, ROUND_DURATION, PAUSE_DURATION, Cell, letterBonuses } from \"./anagramGenerator\";\r\nimport { BonusType } from \"./anagramGenerator\";\r\nimport { isWordInDictionary, gameDictionary } from \"./dictionary\";\r\nimport uiStrings from './ui-strings-categorized.json';\r\nimport { canFormWordOnBoard } from \"./anagramGenerator\";\r\n\r\nconst getRandomWords = (count: number, dictionary: string[]): string[] => {\r\n  const shuffled = [...dictionary].sort(() => Math.random() - 0.5);\r\n  return shuffled.slice(0, count);\r\n};\r\n\r\nconst App: React.FC = () => {\r\n  // Для анимации счетчика найденных слов на анализаторе\r\n  const [analyzerWordCount, setAnalyzerWordCount] = useState(0);\r\n  const [screen, setScreen] = useState<'welcome' | 'loading' | 'game' | 'help'>('welcome');\r\n  // Для свайп-старта\r\n  const START_WORD = 'СТАРТ';\r\n  // Слово СТАРТ в одну горизонтальную линию (1x5)\r\n  const startBoard: CellType[][] = [\r\n    [...START_WORD].map((letter, idx) => ({ letter, bonus: 'none', row: 0, col: idx }))\r\n  ];\r\n  const [startFlashColor, setStartFlashColor] = useState<string | null>(null);\r\n  const [startSelected, setStartSelected] = useState<Array<[number, number]>>([]);\r\n  const [loadingProgress, setLoadingProgress] = useState<number>(0);\r\n  const [loadingMax, setLoadingMax] = useState<number>(0);\r\n  const [loadingTimer, setLoadingTimer] = useState<number>(5);\r\n  // roundData: { board, words } - единый источник истины для поля и слов на раунд\r\n  const [roundData, setRoundData] = useState<{ board: Cell[][], words: string[] } | null>(null);\r\n  // Параметры генерации\r\n  const FIELD_SIZE = 4; // размер поля (4x4)\r\n  const MIN_WORDS = 15; // минимальное количество слов (снизили с 20)\r\n  const MAX_ATTEMPTS = 500; // увеличили количество попыток\r\n\r\n  const [timeLeft, setTimeLeft] = useState<number>(ROUND_DURATION);\r\n  const [foundWords, setFoundWords] = useState<string[]>([]);\r\n  const [score, setScore] = useState<number>(0);\r\n  const [message, setMessage] = useState<string>(\"\");\r\n  const [selectedCells, setSelectedCells] = useState<Array<[number, number]>>([]);\r\n  const [currentWord, setCurrentWord] = useState<string>(\"\");\r\n  const [flashColor, setFlashColor] = useState<string | null>(null);\r\n  const [phase, setPhase] = useState<'playing' | 'results' | 'analyzer'>('playing');\r\n  const leaderboard = [\r\n    { name: \"Вы\", score }\r\n  ];\r\n\r\n  // useEffect для смены экранов во время загрузки\r\n  useEffect(() => {\r\n    if (screen === 'loading' && loadingTimer > 0) {\r\n      const timer = setTimeout(() => setLoadingTimer(loadingTimer - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    } else if (screen === 'loading' && loadingTimer === 0) {\r\n      setScreen('game');\r\n    }\r\n  }, [screen, loadingTimer]);\r\n\r\n  // useEffect для анимации загрузки\r\n  useEffect(() => {\r\n    if (screen === 'loading' && loadingProgress < loadingMax && loadingTimer > 0) {\r\n      const step = Math.ceil(loadingMax / (loadingTimer * 20));\r\n      const interval = setInterval(() => {\r\n        setLoadingProgress(prev => Math.min(prev + step, loadingMax));\r\n      }, 50);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [screen, loadingProgress, loadingMax, loadingTimer]);\r\n\r\n  // --- ГЛАВНЫЙ ТАЙМЕР ИГРЫ И ФАЗ ---\r\n  // Здесь реализованы все основные таймеры и переходы между фазами:\r\n  //\r\n  // 1. Анализатор (phase === 'analyzer')\r\n  //    - Это пауза между раундами, когда игроку показываются все слова на поле.\r\n  //    - Длительность этой паузы задаётся переменной PAUSE_DURATION (например, 15 секунд).\r\n  //    - Если хотите изменить — ищите PAUSE_DURATION (см. импорт сверху).\r\n  //\r\n  // 2. Игра (phase === 'playing')\r\n  //    - Это основной игровой раунд, когда игрок ищет слова.\r\n  //    - Длительность раунда задаётся переменной ROUND_DURATION (например, 60 секунд).\r\n  //    - Если хотите изменить — ищите ROUND_DURATION (см. импорт сверху).\r\n  //\r\n  // 3. Результаты (phase === 'results')\r\n  //    - Это короткая пауза после окончания игры, когда показываются результаты.\r\n  //    - Длительность задаётся жёстко в setTimeLeft(3) (3 секунды, можно изменить на любое число).\r\n  //\r\n  // После каждой фазы происходит переход к следующей с установкой нужного таймера.\r\n  //\r\n  // Схема переходов:\r\n  // [Анализатор (PAUSE_DURATION сек)] → [Игра (ROUND_DURATION сек)] → [Результаты (3 сек)] → [Анализатор ...]\r\n  //\r\n  // Пример: если PAUSE_DURATION = 15, ROUND_DURATION = 60, то цикл такой:\r\n  // 15 сек анализатор → 60 сек игра → 3 сек результаты → 15 сек анализатор ...\r\n  //\r\n  // Чтобы изменить длительность любой фазы, меняйте соответствующую переменную!\r\n  useEffect(() => {\r\n    // --- Фаза ИГРА ---\r\n    if (phase === 'playing' && timeLeft > 0) {\r\n      // Основной игровой таймер (по умолчанию 60 сек, регулируется ROUND_DURATION)\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'playing' && timeLeft === 0) {\r\n      // Игра закончилась — переходим к результатам\r\n      setSelectedCells([]);\r\n      setCurrentWord(\"\");\r\n      setPhase('results');\r\n      setTimeLeft(10); // <--- Длительность экрана результатов (10 сек, можно изменить)\r\n    }\r\n    // --- Фаза РЕЗУЛЬТАТЫ ---\r\n    if (phase === 'results' && timeLeft > 0) {\r\n      // Таймер результатов (короткая пауза между игрой и анализатором)\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'results' && timeLeft === 0) {\r\n      // После результатов — генерируем новое поле и переходим к анализатору\r\n      const words = getRandomWords(6, gameDictionary);\r\n      const board = generateBoard({ name: \"\", reward: \"\", words });\r\n      const allPossibleWords = findAllWordsOnBoard(board).filter(word => word.length >= 3);\r\n      setRoundData({ board, words: allPossibleWords });\r\n      setPhase('analyzer');\r\n      setTimeLeft(PAUSE_DURATION); // <--- Длительность анализатора (по умолчанию 15 сек, регулируется PAUSE_DURATION)\r\n      setAnalyzerWordCount(0); // сбрасываем счетчик для анимации\r\n    }\r\n    // --- Фаза АНАЛИЗАТОР ---\r\n    if (phase === 'analyzer' && timeLeft > 0) {\r\n      // Таймер анализатора (показывает слова перед началом игры)\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'analyzer' && timeLeft === 0) {\r\n      // Анализатор закончился — начинаем новый игровой раунд\r\n      setFoundWords([]);\r\n      setPhase('playing');\r\n      setTimeLeft(ROUND_DURATION); // <--- Длительность игры (по умолчанию 60 сек, регулируется ROUND_DURATION)\r\n    }\r\n  }, [timeLeft, phase]);\r\n\r\n  // Анимация увеличения числа найденных слов на анализаторе\r\n  useEffect(() => {\r\n    if (phase === 'analyzer' && roundData) {\r\n      setAnalyzerWordCount(0);\r\n      let current = 0;\r\n      const target = roundData.words.length;\r\n      const duration = Math.max(800, Math.min(2000, target * 40)); // 0.8-2 сек\r\n      const stepTime = Math.max(20, duration / (target || 1));\r\n      const interval = setInterval(() => {\r\n        current++;\r\n        setAnalyzerWordCount(prev => {\r\n          if (prev < target) return prev + 1;\r\n          clearInterval(interval);\r\n          return prev;\r\n        });\r\n        if (current >= target) {\r\n          clearInterval(interval);\r\n        }\r\n      }, stepTime);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [phase, roundData]);\r\n\r\n  // Обработка завершения пути (свайп/drag)\r\n  const handlePathComplete = (path: Array<[number, number]>) => {\r\n    if (!roundData) return;\r\n    if (path.length < 3) {\r\n      setMessage(uiStrings.ошибки.минимумБукв);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    const word = path.map(([r, c]) => roundData.board[r][c].letter).join(\"\");\r\n    if (foundWords.includes(word)) {\r\n      setMessage(uiStrings.ошибки.ужеВводилось);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    if (!roundData.words.includes(word) || !isWordInDictionary(word)) {\r\n      setMessage(uiStrings.ошибки.нетСлова);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    // Подсчёт очков по бонусам букв\r\n    let wordScore = 0;\r\n    path.forEach(([r, c]) => {\r\n      const letter = roundData.board[r][c].letter.toUpperCase();\r\n      wordScore += letterBonuses[letter] || 0;\r\n    });\r\n    setScore(score + wordScore);\r\n    setFoundWords([...foundWords, word]);\r\n    setMessage(`+${wordScore} очков`);\r\n    setFlashColor('green');\r\n    setTimeout(() => setFlashColor(null), 300);\r\n    setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n  };\r\n\r\n  // Проверка слова при завершении выбора (например, тап по последней клетке или авто)\r\n  useEffect(() => {\r\n    if (!roundData) return;\r\n    // Проверяем только если длина слова >= 3\r\n    if (currentWord.length >= 3) {\r\n      if (roundData.words.includes(currentWord) && !foundWords.includes(currentWord)) {\r\n        setFoundWords([...foundWords, currentWord]);\r\n        setFlashColor('green');\r\n        setTimeout(() => setFlashColor(null), 300);\r\n        setTimeout(() => {\r\n          setSelectedCells([]);\r\n          setCurrentWord(\"\");\r\n        }, 350);\r\n      } else if (currentWord.length > 3 && !roundData.words.includes(currentWord)) {\r\n        setFlashColor('red');\r\n        setTimeout(() => setFlashColor(null), 300);\r\n        setTimeout(() => {\r\n          setSelectedCells([]);\r\n          setCurrentWord(\"\");\r\n        }, 350);\r\n      }\r\n    }\r\n  }, [currentWord, roundData, foundWords]);\r\n\r\n  // Эмуляция смартфона: размеры Samsung Galaxy S24+ (CSS viewport 390x844px)\r\n  const phoneFrameStyle: React.CSSProperties = {\r\n    width: '100vw',\r\n    maxWidth: 430,\r\n    height: '100vh',\r\n    maxHeight: 932,\r\n    margin: '0 auto',\r\n    borderRadius: 36,\r\n    border: '8px solid #222',\r\n    boxShadow: '0 0 32px #0006',\r\n    background: '#111',\r\n    overflow: 'hidden',\r\n    position: 'relative',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'stretch',\r\n    justifyContent: 'flex-start',\r\n    minWidth: 0,\r\n    minHeight: 0\r\n  };\r\n  const phoneContentStyle: React.CSSProperties = {\r\n    width: '100%',\r\n    height: '100%',\r\n    background: '#fff',\r\n    overflowY: 'auto',\r\n    WebkitOverflowScrolling: 'touch',\r\n    borderRadius: 28,\r\n    position: 'relative',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'stretch',\r\n    justifyContent: 'flex-start',\r\n    minWidth: 0,\r\n    minHeight: 0\r\n  };\r\n\r\n  // Свайп-старт по слову СТАРТ\r\n  const handleStartPath = (path: Array<[number, number]>) => {\r\n    const word = path.map(([r, c]) => startBoard[r][c].letter).join(\"\");\r\n    if (word === START_WORD) {\r\n      setStartFlashColor('green');\r\n      setTimeout(() => {\r\n        // Генерируем поле и слова для нового раунда\r\n        const words = getRandomWords(6, gameDictionary);\r\n        const board = generateBoard({ name: \"\", reward: \"\", words });\r\n        const allPossibleWords = findAllWordsOnBoard(board).filter(word => word.length >= 3);\r\n        setRoundData({ board, words: allPossibleWords });\r\n        setPhase('analyzer'); // Сразу запускаем анализатор\r\n        setTimeLeft(PAUSE_DURATION); // Длительность анализатора\r\n        setAnalyzerWordCount(0);\r\n        setStartSelected([]);\r\n        setStartFlashColor(null);\r\n      }, 350);\r\n    } else {\r\n      setStartFlashColor('red');\r\n      setTimeout(() => {\r\n        setStartSelected([]);\r\n        setStartFlashColor(null);\r\n      }, 350);\r\n    }\r\n  };\r\n\r\n  // Обёртка для любого экрана внутри рамки смартфона\r\n  const renderPhoneFrame = (content: React.ReactNode) => (\r\n    <div style={{ background: '#222', minHeight: '100vh', minWidth: '100vw', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n      <div style={phoneFrameStyle}>\r\n        <div style={phoneContentStyle}>\r\n          {content}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  if (screen === 'welcome') {\r\n    return renderPhoneFrame(\r\n      <div style={{ fontFamily: 'sans-serif', padding: '4vw', width: '100%', maxWidth: 430, margin: '0 auto', textAlign: 'center', boxSizing: 'border-box' }}>\r\n        <h1 style={{ fontSize: '2.2rem', margin: '2vw 0 2vw 0' }}>Фундамент</h1>\r\n        <div style={{ display: 'flex', justifyContent: 'center', margin: '6vw 0 3vw 0' }}>\r\n          <div style={{ minWidth: 180, width: '60vw', maxWidth: 320 }}>\r\n            <GameBoard\r\n              board={startBoard}\r\n              selectedCells={startSelected}\r\n              onPathComplete={handleStartPath}\r\n              onDragUpdate={setStartSelected}\r\n              flashColor={startFlashColor}\r\n              columnsCount={START_WORD.length}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div style={{ fontSize: '1rem', color: '#888', marginBottom: '6vw' }}>Проведите по буквам, чтобы начать</div>\r\n        <button style={{ margin: '2vw', padding: '3vw 8vw', fontSize: '1.1rem', cursor: 'pointer', borderRadius: 12, border: '1px solid #1976d2', background: '#f5faff', color: '#1976d2' }} onClick={() => setScreen('help')}>Справка</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Удаляем экран 'loading' — теперь анализатор только один (phase === 'analyzer')\r\n  if (screen === 'help') {\r\n    return renderPhoneFrame(\r\n      <div style={{ fontFamily: 'sans-serif', padding: '4vw', width: '100%', maxWidth: 430, margin: '0 auto', textAlign: 'center', boxSizing: 'border-box' }}>\r\n        <h1 style={{ fontSize: '2.2rem', margin: '2vw 0 2vw 0' }}>Фундамент</h1>\r\n        <div style={{ fontSize: '1.2rem', margin: '6vw 0' }}>Справка будет добавлена позже.</div>\r\n        <button style={{ margin: '2vw', padding: '3vw 8vw', fontSize: '1.1rem', cursor: 'pointer', borderRadius: 12, border: '1px solid #1976d2', background: '#f5faff', color: '#1976d2' }} onClick={() => setScreen('welcome')}>Назад</button>\r\n      </div>\r\n    );\r\n  }\r\n  // Экран игры и анализатора\r\n  if (phase === 'analyzer' && roundData) {\r\n    return renderPhoneFrame(\r\n      <div style={{ fontFamily: 'sans-serif', padding: '4vw', width: '100%', maxWidth: 430, margin: '0 auto', textAlign: 'center', position: 'relative', boxSizing: 'border-box' }}>\r\n        {/* Кнопка назад */}\r\n        <button\r\n          style={{ position: 'absolute', left: 8, top: 8, background: 'none', border: 'none', cursor: 'pointer', display: 'flex', flexDirection: 'column', alignItems: 'center' }}\r\n          onClick={() => setScreen('welcome')}\r\n        >\r\n          <span style={{ fontSize: 28, lineHeight: 1, color: '#1976d2' }}>&larr;</span>\r\n          <span style={{ fontSize: 13, color: '#1976d2', marginTop: 2 }}>Назад</span>\r\n        </button>\r\n        <h2 style={{ fontSize: '1.3rem', margin: '2vw 0 2vw 0' }}>Анализатор поля</h2>\r\n        <div style={{ fontSize: '1.1rem', margin: '4vw 0' }}>Найдено слов: <b>{analyzerWordCount}</b></div>\r\n        <div style={{ fontSize: '1rem', color: '#1976d2', marginBottom: '3vw' }}>До начала игры: {timeLeft} сек.</div>\r\n        <div style={{ margin: '3vw 0', padding: '2vw', background: '#f5f5f5', borderRadius: 8, fontSize: '0.95rem', color: '#333', maxHeight: 180, overflowY: 'auto' }}>\r\n          <b>Все слова на поле (с очками):</b>\r\n          <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8 }}>\r\n            {roundData.words.slice(0, analyzerWordCount).map(word => {\r\n              // Считаем очки за слово по бонусной системе\r\n              const wordScore = word.split('').reduce((sum, letter) => sum + (letterBonuses[letter.toUpperCase()] || 0), 0);\r\n              return (\r\n                <span key={word} style={{ background: '#e0e0e0', borderRadius: 4, padding: '2px 8px', margin: 2, display: 'flex', alignItems: 'center', gap: 4 }}>\r\n                  <span>{word}</span>\r\n                  <span style={{ color: '#1976d2', fontWeight: 600, fontSize: '0.98em', marginLeft: 2 }}>({wordScore})</span>\r\n                </span>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  // Экран игры\r\n  if (roundData) {\r\n    return renderPhoneFrame(\r\n      <div style={{ fontFamily: 'sans-serif', padding: '4vw', width: '100%', maxWidth: 430, margin: '0 auto', position: 'relative', boxSizing: 'border-box' }}>\r\n        {/* Кнопка назад */}\r\n        <button\r\n          style={{ position: 'absolute', left: 8, top: 8, background: 'none', border: 'none', cursor: 'pointer', display: 'flex', flexDirection: 'column', alignItems: 'center' }}\r\n          onClick={() => setScreen('welcome')}\r\n        >\r\n          <span style={{ fontSize: 28, lineHeight: 1, color: '#1976d2' }}>&larr;</span>\r\n          <span style={{ fontSize: 13, color: '#1976d2', marginTop: 2 }}>Назад</span>\r\n        </button>\r\n        <h1 style={{ fontSize: '2.2rem', margin: '2vw 0 2vw 0' }}>Фундамент</h1>\r\n        <div style={{ fontSize: '1.2rem', fontWeight: 600, marginBottom: '2vw' }}>\r\n          {phase === 'playing' ? uiStrings.игра.заголовок : uiStrings.результаты.заголовок}\r\n          {' '}\r\n          <span style={{ fontSize: '1.1rem', fontWeight: 400, color: '#1976d2' }}>\r\n            {timeLeft} сек.\r\n          </span>\r\n        </div>\r\n        <div style={{ minHeight: 32, color: message.includes(uiStrings.прочее.очков) ? 'green' : 'red', fontWeight: 500 }}>{message}</div>\r\n        <div style={{ marginBottom: '2vw' }}>{uiStrings.игра.очки}: {score}</div>\r\n        <GameBoard \r\n          board={roundData.board} \r\n          selectedCells={selectedCells}\r\n          onPathComplete={phase === 'playing' ? handlePathComplete : undefined}\r\n          onDragUpdate={phase === 'playing' ? setSelectedCells : undefined}\r\n          flashColor={flashColor}\r\n        />\r\n        {/* ОТЛАДКА: выводим все возможные слова на этом поле */}\r\n        <div style={{ margin: '3vw 0', padding: '2vw', background: '#f5f5f5', borderRadius: 8, fontSize: '0.95rem', color: '#333', maxHeight: 120, overflowY: 'auto' }}>\r\n          <b>Все слова на поле ({roundData.words.length}):</b>\r\n          <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8 }}>\r\n            {roundData.words.map(word => (\r\n              <span key={word} style={{ background: '#e0e0e0', borderRadius: 4, padding: '2px 6px', margin: 2 }}>{word}</span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        {phase === 'results' && (\r\n          <>\r\n            <div style={{\r\n              margin: '3vw 0',\r\n              padding: '2vw',\r\n              background: '#e3f2fd',\r\n              borderRadius: 8,\r\n              fontSize: '1.15rem',\r\n              color: '#1976d2',\r\n              textAlign: 'center',\r\n              fontWeight: 600\r\n            }}>\r\n              <div>Раунд завершён!</div>\r\n              <div style={{ marginTop: 8 }}>Ваш результат: <b style={{ color: '#1565c0', fontSize: '1.3em' }}>{score} очков</b></div>\r\n            </div>\r\n            <Results \r\n              foundWords={foundWords} \r\n              possibleWords={roundData.words} \r\n              leaderboard={leaderboard}\r\n              usedWords={roundData.words}\r\n            />\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
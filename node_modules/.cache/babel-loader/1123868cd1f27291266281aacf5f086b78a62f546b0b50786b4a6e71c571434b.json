{"ast":null,"code":"var _jsxFileName = \"C:\\\\vsc\\\\dament\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport GameBoard from \"./GameBoard.tsx\";\nimport Timer from \"./Timer.tsx\";\nimport WordInput from \"./WordInput.tsx\";\nimport Results from \"./Results.tsx\";\n// Импортируем игровую логику\nimport { generateBoard, findAllWordsOnBoard, ROUND_DURATION, PAUSE_DURATION } from \"./anagramGenerator.ts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockLeaderboard = [{\n  name: \"Игрок 1\",\n  score: 12\n}, {\n  name: \"Игрок 2\",\n  score: 8\n}, {\n  name: \"Игрок 3\",\n  score: 5\n}];\nconst App = () => {\n  _s();\n  const [board, setBoard] = useState(generateBoard());\n  const [timeLeft, setTimeLeft] = useState(ROUND_DURATION);\n  const [foundWords, setFoundWords] = useState([]);\n  const [phase, setPhase] = useState('playing');\n  const [possibleWords, setPossibleWords] = useState([]);\n\n  // Таймер\n  useEffect(() => {\n    if (phase === 'playing' && timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n    if (phase === 'playing' && timeLeft === 0) {\n      // Переход к результатам\n      setPossibleWords(findAllWordsOnBoard(board));\n      setPhase('results');\n      setTimeLeft(PAUSE_DURATION);\n    }\n    if (phase === 'results' && timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n    if (phase === 'results' && timeLeft === 0) {\n      // Новый раунд\n      setBoard(generateBoard());\n      setFoundWords([]);\n      setPhase('playing');\n      setTimeLeft(ROUND_DURATION);\n    }\n  }, [timeLeft, phase, board]);\n\n  // Обработка ввода слова\n  const handleWordSubmit = word => {\n    if (!foundWords.includes(word) && findAllWordsOnBoard(board).includes(word)) {\n      setFoundWords([...foundWords, word]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontFamily: 'sans-serif',\n      padding: 24,\n      maxWidth: 600,\n      margin: '0 auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dament\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Timer, {\n      seconds: timeLeft\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n      board: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), phase === 'playing' && /*#__PURE__*/_jsxDEV(WordInput, {\n      onSubmit: handleWordSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), phase === 'results' && /*#__PURE__*/_jsxDEV(Results, {\n      foundWords: foundWords,\n      possibleWords: possibleWords,\n      leaderboard: mockLeaderboard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"8wj2QvpENuoRLDVTD5UN60Eteic=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","GameBoard","Timer","WordInput","Results","generateBoard","findAllWordsOnBoard","ROUND_DURATION","PAUSE_DURATION","jsxDEV","_jsxDEV","mockLeaderboard","name","score","App","_s","board","setBoard","timeLeft","setTimeLeft","foundWords","setFoundWords","phase","setPhase","possibleWords","setPossibleWords","timer","setTimeout","clearTimeout","handleWordSubmit","word","includes","style","fontFamily","padding","maxWidth","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","seconds","onSubmit","leaderboard","_c","$RefreshReg$"],"sources":["C:/vsc/dament/src/App.tsx"],"sourcesContent":["\r\nimport React, { useState, useEffect } from \"react\";\r\nimport GameBoard from \"./GameBoard.tsx\";\r\nimport Timer from \"./Timer.tsx\";\r\nimport WordInput from \"./WordInput.tsx\";\r\nimport Results from \"./Results.tsx\";\r\n// Импортируем игровую логику\r\nimport { generateBoard, findAllWordsOnBoard, ROUND_DURATION, PAUSE_DURATION } from \"./anagramGenerator.ts\";\r\n\r\nconst mockLeaderboard = [\r\n  { name: \"Игрок 1\", score: 12 },\r\n  { name: \"Игрок 2\", score: 8 },\r\n  { name: \"Игрок 3\", score: 5 }\r\n];\r\n\r\nconst App: React.FC = () => {\r\n  const [board, setBoard] = useState<string[][]>(generateBoard());\r\n  const [timeLeft, setTimeLeft] = useState<number>(ROUND_DURATION);\r\n  const [foundWords, setFoundWords] = useState<string[]>([]);\r\n  const [phase, setPhase] = useState<'playing' | 'results'>('playing');\r\n  const [possibleWords, setPossibleWords] = useState<string[]>([]);\r\n\r\n  // Таймер\r\n  useEffect(() => {\r\n    if (phase === 'playing' && timeLeft > 0) {\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'playing' && timeLeft === 0) {\r\n      // Переход к результатам\r\n      setPossibleWords(findAllWordsOnBoard(board));\r\n      setPhase('results');\r\n      setTimeLeft(PAUSE_DURATION);\r\n    }\r\n    if (phase === 'results' && timeLeft > 0) {\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'results' && timeLeft === 0) {\r\n      // Новый раунд\r\n      setBoard(generateBoard());\r\n      setFoundWords([]);\r\n      setPhase('playing');\r\n      setTimeLeft(ROUND_DURATION);\r\n    }\r\n  }, [timeLeft, phase, board]);\r\n\r\n  // Обработка ввода слова\r\n  const handleWordSubmit = (word: string) => {\r\n    if (!foundWords.includes(word) && findAllWordsOnBoard(board).includes(word)) {\r\n      setFoundWords([...foundWords, word]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto' }}>\r\n      <h1>Dament</h1>\r\n      <Timer seconds={timeLeft} />\r\n      <GameBoard board={board} />\r\n      {phase === 'playing' && (\r\n        <WordInput onSubmit={handleWordSubmit} />\r\n      )}\r\n      {phase === 'results' && (\r\n        <Results foundWords={foundWords} possibleWords={possibleWords} leaderboard={mockLeaderboard} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
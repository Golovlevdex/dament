{"ast":null,"code":"var _jsxFileName = \"C:\\\\vsc\\\\dament\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport GameBoard from \"./GameBoard\";\n// import WordInput from \"./WordInput\";\nimport Results from \"./Results\";\n// Импортируем игровую логику\nimport { generateBoard, findAllWordsOnBoard, ROUND_DURATION, PAUSE_DURATION, letterBonuses } from \"./anagramGenerator\";\nimport { isWordInDictionary, gameDictionary } from \"./dictionary\";\nimport uiStrings from './ui-strings-categorized.json';\nimport { canFormWordOnBoard } from \"./anagramGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getRandomWords = (count, dictionary) => {\n  const shuffled = [...dictionary].sort(() => Math.random() - 0.5);\n  return shuffled.slice(0, count);\n};\nconst App = () => {\n  _s();\n  const [screen, setScreen] = useState('welcome');\n  const [loadingProgress, setLoadingProgress] = useState(0);\n  const [loadingMax, setLoadingMax] = useState(0);\n  const [loadingTimer, setLoadingTimer] = useState(5);\n  const [usedWords, setUsedWords] = useState([]);\n  // Параметры генерации\n  const FIELD_SIZE = 4; // размер поля (4x4)\n  const MIN_WORDS = 15; // минимальное количество слов (снизили с 20)\n  const MAX_ATTEMPTS = 500; // увеличили количество попыток\n\n  const [board, setBoard] = useState(() => {\n    // Новый генератор: ищем поле с максимальным количеством слов\n    let bestBoard = null;\n    let bestWords = [];\n    let maxWords = 0;\n\n    // Создаём список частых букв из словаря для лучшей генерации\n    const allLetters = gameDictionary.join('').toUpperCase().split('');\n    const letterFreq = {};\n    allLetters.forEach(letter => letterFreq[letter] = (letterFreq[letter] || 0) + 1);\n    const frequentLetters = Object.keys(letterFreq).sort((a, b) => letterFreq[b] - letterFreq[a]);\n\n    // Анализируем длинные слова для получения хороших комбинаций букв\n    const longWords = gameDictionary.filter(word => word.length >= 5 && word.length <= 8);\n    const longWordLetters = [];\n    longWords.slice(0, 50).forEach(word => {\n      // берём первые 50 длинных слов\n      longWordLetters.push(...word.toUpperCase().split(''));\n    });\n    console.log(\"Генерируем поле, попыток:\", MAX_ATTEMPTS);\n    for (let attempts = 0; attempts < MAX_ATTEMPTS; attempts++) {\n      // Генерируем поле с учётом частоты букв и длинных слов\n      const letters = [];\n      for (let i = 0; i < FIELD_SIZE * FIELD_SIZE; i++) {\n        const rand = Math.random();\n        if (rand < 0.3 && longWordLetters.length > 0) {\n          // 30% - буквы из длинных слов\n          const longIndex = Math.floor(Math.random() * longWordLetters.length);\n          letters.push(longWordLetters[longIndex]);\n        } else if (rand < 0.8) {\n          // 50% - частые буквы\n          const freqIndex = Math.floor(Math.random() * Math.min(10, frequentLetters.length));\n          letters.push(frequentLetters[freqIndex]);\n        } else {\n          // 20% - случайные буквы\n          const randIndex = Math.floor(Math.random() * frequentLetters.length);\n          letters.push(frequentLetters[randIndex]);\n        }\n      }\n\n      // Преобразуем в матрицу Cell[][] с бонусами\n      const matrix = [];\n      for (let r = 0; r < FIELD_SIZE; r++) {\n        matrix.push(letters.slice(r * FIELD_SIZE, (r + 1) * FIELD_SIZE).map((letter, c) => {\n          let rawBonus = letterBonuses[letter.toUpperCase()];\n          let bonus = typeof rawBonus === 'string' ? rawBonus : 'none';\n          return {\n            letter,\n            row: r,\n            col: c,\n            bonus\n          };\n        }));\n      }\n      // Находим все слова\n      const possibleWords = findAllWordsOnBoard(matrix);\n      if (possibleWords.length > maxWords) {\n        bestBoard = matrix;\n        bestWords = possibleWords;\n        maxWords = possibleWords.length;\n        console.log(`Попытка ${attempts}: найдено ${maxWords} слов`);\n        // Если нашли поле с достаточным количеством слов — сразу используем\n        if (maxWords >= MIN_WORDS) {\n          console.log(\"Достигнуто минимальное количество слов, выбираем это поле\");\n          break;\n        }\n      }\n    }\n    console.log(`Финальное поле: ${maxWords} слов`);\n    setUsedWords(bestWords);\n\n    // Если не удалось — возвращаем случайное поле\n    if (!bestBoard) {\n      console.log(\"Не удалось найти поле с нужным количеством слов, генерируем случайное\");\n      const letters = [];\n      for (let i = 0; i < FIELD_SIZE * FIELD_SIZE; i++) {\n        const randIndex = Math.floor(Math.random() * gameDictionary.join('').length);\n        letters.push(gameDictionary.join('')[randIndex]);\n      }\n      const matrix = [];\n      for (let r = 0; r < FIELD_SIZE; r++) {\n        matrix.push(letters.slice(r * FIELD_SIZE, (r + 1) * FIELD_SIZE).map((letter, c) => {\n          let rawBonus = letterBonuses[letter.toUpperCase()];\n          let bonus = typeof rawBonus === 'string' ? rawBonus : 'none';\n          return {\n            letter,\n            row: r,\n            col: c,\n            bonus\n          };\n        }));\n      }\n      return matrix;\n    }\n    return bestBoard;\n  });\n  const [timeLeft, setTimeLeft] = useState(ROUND_DURATION);\n  const [foundWords, setFoundWords] = useState([]);\n  const [score, setScore] = useState(0);\n  const [message, setMessage] = useState(\"\");\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [currentWord, setCurrentWord] = useState(\"\");\n  const [flashColor, setFlashColor] = useState(null);\n  const [phase, setPhase] = useState('playing');\n  const [possibleWords, setPossibleWords] = useState([]);\n  const leaderboard = [{\n    name: \"Вы\",\n    score\n  }];\n\n  // useEffect для анимации загрузки (теперь строго после всех useState)\n  useEffect(() => {\n    if (screen === 'loading' && loadingProgress < loadingMax && loadingTimer > 0) {\n      const step = Math.ceil(loadingMax / (loadingTimer * 20));\n      const interval = setInterval(() => {\n        setLoadingProgress(prev => Math.min(prev + step, loadingMax));\n      }, 50);\n      return () => clearInterval(interval);\n    }\n  }, [screen, loadingProgress, loadingMax, loadingTimer]);\n  useEffect(() => {\n    if (screen === 'loading' && loadingTimer > 0) {\n      const timer = setTimeout(() => setLoadingTimer(loadingTimer - 1), 1000);\n      return () => clearTimeout(timer);\n    } else if (screen === 'loading' && loadingTimer === 0) {\n      setScreen('game');\n    }\n  }, [screen, loadingTimer]);\n\n  // useEffect для анимации загрузки\n  useEffect(() => {\n    if (screen === 'loading' && loadingProgress < loadingMax && loadingTimer > 0) {\n      const step = Math.ceil(loadingMax / (loadingTimer * 20));\n      const interval = setInterval(() => {\n        setLoadingProgress(prev => Math.min(prev + step, loadingMax));\n      }, 50);\n      return () => clearInterval(interval);\n    }\n  }, [screen, loadingProgress, loadingMax, loadingTimer]);\n  useEffect(() => {\n    if (screen === 'loading' && loadingTimer > 0) {\n      const timer = setTimeout(() => setLoadingTimer(loadingTimer - 1), 1000);\n      return () => clearTimeout(timer);\n    } else if (screen === 'loading' && loadingTimer === 0) {\n      setScreen('game');\n    }\n  }, [screen, loadingTimer]);\n\n  // Таймер\n  useEffect(() => {\n    if (phase === 'playing' && timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n    if (phase === 'playing' && timeLeft === 0) {\n      // Переход к результатам\n      setPossibleWords(usedWords.filter(word => word.length >= 3 && canFormWordOnBoard(word, board)));\n      setSelectedCells([]); // сброс выделения\n      setCurrentWord(\"\"); // сброс текущего слова\n      setPhase('results');\n      setTimeLeft(PAUSE_DURATION);\n    }\n    if (phase === 'results' && timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n    if (phase === 'results' && timeLeft === 0) {\n      // Новый раунд\n      const words = getRandomWords(6, gameDictionary);\n      const board = generateBoard({\n        name: \"\",\n        reward: \"\",\n        words\n      });\n      // После генерации поля ищем все возможные слова (только от 3 букв)\n      const allPossibleWords = findAllWordsOnBoard(board).filter(word => word.length >= 3);\n      setUsedWords(allPossibleWords);\n      setBoard(board);\n      setFoundWords([]);\n      setPhase('playing');\n      setTimeLeft(ROUND_DURATION);\n    }\n  }, [timeLeft, phase, board]);\n\n  // Обработка завершения пути (свайп/drag)\n  const handlePathComplete = path => {\n    if (path.length < 3) {\n      setMessage(uiStrings.ошибки.минимумБукв);\n      setFlashColor('red');\n      setTimeout(() => setFlashColor(null), 300);\n      setTimeout(() => {\n        setMessage(\"\");\n        setSelectedCells([]);\n        setCurrentWord(\"\");\n      }, 350);\n      return;\n    }\n    const word = path.map(([r, c]) => board[r][c].letter).join(\"\");\n    const allWords = findAllWordsOnBoard(board).filter(word => word.length >= 3);\n    if (foundWords.includes(word)) {\n      setMessage(uiStrings.ошибки.ужеВводилось);\n      setFlashColor('red');\n      setTimeout(() => setFlashColor(null), 300);\n      setTimeout(() => {\n        setMessage(\"\");\n        setSelectedCells([]);\n        setCurrentWord(\"\");\n      }, 350);\n      return;\n    }\n    if (!allWords.includes(word) || !isWordInDictionary(word)) {\n      setMessage(uiStrings.ошибки.нетСлова);\n      setFlashColor('red');\n      setTimeout(() => setFlashColor(null), 300);\n      setTimeout(() => {\n        setMessage(\"\");\n        setSelectedCells([]);\n        setCurrentWord(\"\");\n      }, 350);\n      return;\n    }\n    // Подсчёт очков по бонусам букв\n    let wordScore = 0;\n    path.forEach(([r, c]) => {\n      const letter = board[r][c].letter.toUpperCase();\n      wordScore += letterBonuses[letter] || 0;\n    });\n    setScore(score + wordScore);\n    setFoundWords([...foundWords, word]);\n    setMessage(`+${wordScore} очков`);\n    setFlashColor('green');\n    setTimeout(() => setFlashColor(null), 300);\n    setTimeout(() => {\n      setMessage(\"\");\n      setSelectedCells([]);\n      setCurrentWord(\"\");\n    }, 350);\n  };\n\n  // Проверка слова при завершении выбора (например, тап по последней клетке или авто)\n  useEffect(() => {\n    // Проверяем только если длина слова >= 3\n    if (currentWord.length >= 3) {\n      // Проверяем, есть ли слово в возможных\n      const allWords = findAllWordsOnBoard(board);\n      if (allWords.includes(currentWord) && !foundWords.includes(currentWord)) {\n        setFoundWords([...foundWords, currentWord]);\n        setFlashColor('green');\n        setTimeout(() => setFlashColor(null), 300);\n        setTimeout(() => {\n          setSelectedCells([]);\n          setCurrentWord(\"\");\n        }, 350);\n      } else if (currentWord.length > 3 && !allWords.includes(currentWord)) {\n        setFlashColor('red');\n        setTimeout(() => setFlashColor(null), 300);\n        setTimeout(() => {\n          setSelectedCells([]);\n          setCurrentWord(\"\");\n        }, 350);\n      }\n    }\n  }, [currentWord]);\n  if (screen === 'welcome') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: 'sans-serif',\n        padding: 24,\n        maxWidth: 600,\n        margin: '0 auto',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0424\\u0443\\u043D\\u0434\\u0430\\u043C\\u0435\\u043D\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          margin: 12,\n          padding: '12px 32px',\n          fontSize: 18,\n          cursor: 'pointer'\n        },\n        onClick: () => {\n          // Генерируем поле и считаем количество слов\n          const words = getRandomWords(6, gameDictionary);\n          const board = generateBoard({\n            name: \"\",\n            reward: \"\",\n            words\n          });\n          const allPossibleWords = findAllWordsOnBoard(board);\n          setLoadingMax(allPossibleWords.length);\n          setLoadingProgress(0);\n          setLoadingTimer(5);\n          setScreen('loading');\n        },\n        children: \"\\u0421\\u0442\\u0430\\u0440\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          margin: 12,\n          padding: '12px 32px',\n          fontSize: 18,\n          cursor: 'pointer'\n        },\n        onClick: () => setScreen('help'),\n        children: \"\\u0421\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this);\n  }\n  if (screen === 'loading') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: 'sans-serif',\n        padding: 24,\n        maxWidth: 600,\n        margin: '0 auto',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u043F\\u043E\\u043B\\u044F...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: 32,\n          margin: '32px 0',\n          color: '#1976d2',\n          fontWeight: 700\n        },\n        children: loadingProgress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: 18,\n          marginBottom: 12\n        },\n        children: [\"\\u0411\\u0443\\u0434\\u0435\\u0442 \\u0434\\u043E\\u0441\\u0442\\u0443\\u043F\\u043D\\u043E \\u0441\\u043B\\u043E\\u0432: \", loadingMax]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: 16,\n          color: '#888'\n        },\n        children: [\"\\u041E\\u0441\\u0442\\u0430\\u043B\\u043E\\u0441\\u044C \\u0441\\u0435\\u043A\\u0443\\u043D\\u0434: \", loadingTimer]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this);\n  }\n  if (screen === 'help') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: 'sans-serif',\n        padding: 24,\n        maxWidth: 600,\n        margin: '0 auto',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0424\\u0443\\u043D\\u0434\\u0430\\u043C\\u0435\\u043D\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: 20,\n          margin: '32px 0'\n        },\n        children: \"\\u0421\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430 \\u0431\\u0443\\u0434\\u0435\\u0442 \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u0430 \\u043F\\u043E\\u0437\\u0436\\u0435.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          margin: 12,\n          padding: '12px 32px',\n          fontSize: 18,\n          cursor: 'pointer'\n        },\n        onClick: () => setScreen('welcome'),\n        children: \"\\u041D\\u0430\\u0437\\u0430\\u0434\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this);\n  }\n  // Экран игры\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontFamily: 'sans-serif',\n      padding: 24,\n      maxWidth: 600,\n      margin: '0 auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0424\\u0443\\u043D\\u0434\\u0430\\u043C\\u0435\\u043D\\u0442\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: 20,\n        fontWeight: 600,\n        marginBottom: 8\n      },\n      children: [phase === 'playing' ? uiStrings.игра.заголовок : uiStrings.результаты.заголовок, ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontSize: 18,\n          fontWeight: 400,\n          color: '#1976d2'\n        },\n        children: [timeLeft, \" \\u0441\\u0435\\u043A.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        minHeight: 32,\n        color: message.includes(uiStrings.прочее.очков) ? 'green' : 'red',\n        fontWeight: 500\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 8\n      },\n      children: [uiStrings.игра.очки, \": \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '12px 0',\n        padding: '8px',\n        background: '#f5f5f5',\n        borderRadius: 8,\n        fontSize: 14,\n        color: '#333',\n        maxHeight: 120,\n        overflowY: 'auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\"\\u0412\\u0441\\u0435 \\u0441\\u043B\\u043E\\u0432\\u0430 \\u043D\\u0430 \\u043F\\u043E\\u043B\\u0435 (\", usedWords.length, \"):\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: 8\n        },\n        children: usedWords.map(word => /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            background: '#e0e0e0',\n            borderRadius: 4,\n            padding: '2px 6px',\n            margin: 2\n          },\n          children: word\n        }, word, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n      board: board,\n      selectedCells: selectedCells,\n      onPathComplete: phase === 'playing' ? handlePathComplete : undefined,\n      onDragUpdate: phase === 'playing' ? setSelectedCells : undefined,\n      flashColor: flashColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this), phase === 'results' && /*#__PURE__*/_jsxDEV(Results, {\n      foundWords: foundWords,\n      possibleWords: possibleWords,\n      leaderboard: leaderboard,\n      usedWords: usedWords\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 321,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"jxwlj8s7+kiadYXBJwcsPjfl8WQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","GameBoard","Results","generateBoard","findAllWordsOnBoard","ROUND_DURATION","PAUSE_DURATION","letterBonuses","isWordInDictionary","gameDictionary","uiStrings","canFormWordOnBoard","jsxDEV","_jsxDEV","getRandomWords","count","dictionary","shuffled","sort","Math","random","slice","App","_s","screen","setScreen","loadingProgress","setLoadingProgress","loadingMax","setLoadingMax","loadingTimer","setLoadingTimer","usedWords","setUsedWords","FIELD_SIZE","MIN_WORDS","MAX_ATTEMPTS","board","setBoard","bestBoard","bestWords","maxWords","allLetters","join","toUpperCase","split","letterFreq","forEach","letter","frequentLetters","Object","keys","a","b","longWords","filter","word","length","longWordLetters","push","console","log","attempts","letters","i","rand","longIndex","floor","freqIndex","min","randIndex","matrix","r","map","c","rawBonus","bonus","row","col","possibleWords","timeLeft","setTimeLeft","foundWords","setFoundWords","score","setScore","message","setMessage","selectedCells","setSelectedCells","currentWord","setCurrentWord","flashColor","setFlashColor","phase","setPhase","setPossibleWords","leaderboard","name","step","ceil","interval","setInterval","prev","clearInterval","timer","setTimeout","clearTimeout","words","reward","allPossibleWords","handlePathComplete","path","ошибки","минимумБукв","allWords","includes","ужеВводилось","нетСлова","wordScore","style","fontFamily","padding","maxWidth","margin","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","cursor","onClick","color","fontWeight","marginBottom","игра","заголовок","результаты","minHeight","прочее","очков","очки","background","borderRadius","maxHeight","overflowY","display","flexWrap","gap","onPathComplete","undefined","onDragUpdate","_c","$RefreshReg$"],"sources":["C:/vsc/dament/src/App.tsx"],"sourcesContent":["\r\nimport React, { useState, useEffect } from \"react\";\r\nimport GameBoard from \"./GameBoard\";\r\nimport Timer from \"./Timer\";\r\n// import WordInput from \"./WordInput\";\r\nimport Results from \"./Results\";\r\n// Импортируем игровую логику\r\nimport { generateBoard, findAllWordsOnBoard, ROUND_DURATION, PAUSE_DURATION, Cell, letterBonuses } from \"./anagramGenerator\";\r\nimport { BonusType } from \"./anagramGenerator\";\r\nimport { isWordInDictionary, gameDictionary } from \"./dictionary\";\r\nimport uiStrings from './ui-strings-categorized.json';\r\nimport { canFormWordOnBoard } from \"./anagramGenerator\";\r\n\r\n\r\n\r\nconst getRandomWords = (count: number, dictionary: string[]): string[] => {\r\n  const shuffled = [...dictionary].sort(() => Math.random() - 0.5);\r\n  return shuffled.slice(0, count);\r\n};\r\n\r\nconst App: React.FC = () => {\r\n  const [screen, setScreen] = useState<'welcome' | 'loading' | 'game' | 'help'>('welcome');\r\n  const [loadingProgress, setLoadingProgress] = useState<number>(0);\r\n  const [loadingMax, setLoadingMax] = useState<number>(0);\r\n  const [loadingTimer, setLoadingTimer] = useState<number>(5);\r\n  const [usedWords, setUsedWords] = useState<string[]>([]);\r\n  // Параметры генерации\r\n  const FIELD_SIZE = 4; // размер поля (4x4)\r\n  const MIN_WORDS = 15; // минимальное количество слов (снизили с 20)\r\n  const MAX_ATTEMPTS = 500; // увеличили количество попыток\r\n\r\n  const [board, setBoard] = useState<Cell[][]>(() => {\r\n    // Новый генератор: ищем поле с максимальным количеством слов\r\n    let bestBoard: Cell[][] | null = null;\r\n    let bestWords: string[] = [];\r\n    let maxWords = 0;\r\n    \r\n    // Создаём список частых букв из словаря для лучшей генерации\r\n    const allLetters = gameDictionary.join('').toUpperCase().split('');\r\n    const letterFreq: Record<string, number> = {};\r\n    allLetters.forEach(letter => letterFreq[letter] = (letterFreq[letter] || 0) + 1);\r\n    const frequentLetters = Object.keys(letterFreq).sort((a, b) => letterFreq[b] - letterFreq[a]);\r\n    \r\n    // Анализируем длинные слова для получения хороших комбинаций букв\r\n    const longWords = gameDictionary.filter(word => word.length >= 5 && word.length <= 8);\r\n    const longWordLetters: string[] = [];\r\n    longWords.slice(0, 50).forEach(word => { // берём первые 50 длинных слов\r\n      longWordLetters.push(...word.toUpperCase().split(''));\r\n    });\r\n    \r\n    console.log(\"Генерируем поле, попыток:\", MAX_ATTEMPTS);\r\n    \r\n    for (let attempts = 0; attempts < MAX_ATTEMPTS; attempts++) {\r\n      // Генерируем поле с учётом частоты букв и длинных слов\r\n      const letters: string[] = [];\r\n      for (let i = 0; i < FIELD_SIZE * FIELD_SIZE; i++) {\r\n        const rand = Math.random();\r\n        if (rand < 0.3 && longWordLetters.length > 0) {\r\n          // 30% - буквы из длинных слов\r\n          const longIndex = Math.floor(Math.random() * longWordLetters.length);\r\n          letters.push(longWordLetters[longIndex]);\r\n        } else if (rand < 0.8) {\r\n          // 50% - частые буквы\r\n          const freqIndex = Math.floor(Math.random() * Math.min(10, frequentLetters.length));\r\n          letters.push(frequentLetters[freqIndex]);\r\n        } else {\r\n          // 20% - случайные буквы\r\n          const randIndex = Math.floor(Math.random() * frequentLetters.length);\r\n          letters.push(frequentLetters[randIndex]);\r\n        }\r\n      }\r\n      \r\n      // Преобразуем в матрицу Cell[][] с бонусами\r\n      const matrix: Cell[][] = [];\r\n      for (let r = 0; r < FIELD_SIZE; r++) {\r\n        matrix.push(letters.slice(r * FIELD_SIZE, (r + 1) * FIELD_SIZE).map((letter, c) => {\r\n          let rawBonus = letterBonuses[letter.toUpperCase()];\r\n          let bonus: BonusType = typeof rawBonus === 'string' ? rawBonus : 'none';\r\n          return {\r\n            letter,\r\n            row: r,\r\n            col: c,\r\n            bonus\r\n          };\r\n        }));\r\n      }\r\n      // Находим все слова\r\n      const possibleWords: string[] = findAllWordsOnBoard(matrix);\r\n      if (possibleWords.length > maxWords) {\r\n        bestBoard = matrix;\r\n        bestWords = possibleWords;\r\n        maxWords = possibleWords.length;\r\n        console.log(`Попытка ${attempts}: найдено ${maxWords} слов`);\r\n        // Если нашли поле с достаточным количеством слов — сразу используем\r\n        if (maxWords >= MIN_WORDS) {\r\n          console.log(\"Достигнуто минимальное количество слов, выбираем это поле\");\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(`Финальное поле: ${maxWords} слов`);\r\n    setUsedWords(bestWords);\r\n    \r\n    // Если не удалось — возвращаем случайное поле\r\n    if (!bestBoard) {\r\n      console.log(\"Не удалось найти поле с нужным количеством слов, генерируем случайное\");\r\n      const letters: string[] = [];\r\n      for (let i = 0; i < FIELD_SIZE * FIELD_SIZE; i++) {\r\n        const randIndex = Math.floor(Math.random() * gameDictionary.join('').length);\r\n        letters.push(gameDictionary.join('')[randIndex]);\r\n      }\r\n      const matrix: Cell[][] = [];\r\n      for (let r = 0; r < FIELD_SIZE; r++) {\r\n        matrix.push(letters.slice(r * FIELD_SIZE, (r + 1) * FIELD_SIZE).map((letter, c) => {\r\n          let rawBonus = letterBonuses[letter.toUpperCase()];\r\n          let bonus: BonusType = typeof rawBonus === 'string' ? rawBonus : 'none';\r\n          return {\r\n            letter,\r\n            row: r,\r\n            col: c,\r\n            bonus\r\n          };\r\n        }));\r\n      }\r\n      return matrix;\r\n    }\r\n    return bestBoard;\r\n  });\r\n  const [timeLeft, setTimeLeft] = useState<number>(ROUND_DURATION);\r\n  const [foundWords, setFoundWords] = useState<string[]>([]);\r\n  const [score, setScore] = useState<number>(0);\r\n  const [message, setMessage] = useState<string>(\"\");\r\n  const [selectedCells, setSelectedCells] = useState<Array<[number, number]>>([]);\r\n  const [currentWord, setCurrentWord] = useState<string>(\"\");\r\n  const [flashColor, setFlashColor] = useState<string | null>(null);\r\n  const [phase, setPhase] = useState<'playing' | 'results'>('playing');\r\n  const [possibleWords, setPossibleWords] = useState<string[]>([]);\r\n  const leaderboard = [\r\n    { name: \"Вы\", score }\r\n  ];\r\n\r\n  // useEffect для анимации загрузки (теперь строго после всех useState)\r\n  useEffect(() => {\r\n    if (screen === 'loading' && loadingProgress < loadingMax && loadingTimer > 0) {\r\n      const step = Math.ceil(loadingMax / (loadingTimer * 20));\r\n      const interval = setInterval(() => {\r\n        setLoadingProgress(prev => Math.min(prev + step, loadingMax));\r\n      }, 50);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [screen, loadingProgress, loadingMax, loadingTimer]);\r\n\r\n  useEffect(() => {\r\n    if (screen === 'loading' && loadingTimer > 0) {\r\n      const timer = setTimeout(() => setLoadingTimer(loadingTimer - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    } else if (screen === 'loading' && loadingTimer === 0) {\r\n      setScreen('game');\r\n    }\r\n  }, [screen, loadingTimer]);\r\n\r\n  // useEffect для анимации загрузки\r\n  useEffect(() => {\r\n    if (screen === 'loading' && loadingProgress < loadingMax && loadingTimer > 0) {\r\n      const step = Math.ceil(loadingMax / (loadingTimer * 20));\r\n      const interval = setInterval(() => {\r\n        setLoadingProgress(prev => Math.min(prev + step, loadingMax));\r\n      }, 50);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [screen, loadingProgress, loadingMax, loadingTimer]);\r\n\r\n  useEffect(() => {\r\n    if (screen === 'loading' && loadingTimer > 0) {\r\n      const timer = setTimeout(() => setLoadingTimer(loadingTimer - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    } else if (screen === 'loading' && loadingTimer === 0) {\r\n      setScreen('game');\r\n    }\r\n  }, [screen, loadingTimer]);\r\n\r\n  // Таймер\r\n  useEffect(() => {\r\n    if (phase === 'playing' && timeLeft > 0) {\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'playing' && timeLeft === 0) {\r\n    // Переход к результатам\r\n      setPossibleWords(usedWords.filter(word => word.length >= 3 && canFormWordOnBoard(word, board)));\r\n      setSelectedCells([]); // сброс выделения\r\n      setCurrentWord(\"\"); // сброс текущего слова\r\n      setPhase('results');\r\n      setTimeLeft(PAUSE_DURATION);\r\n    }\r\n    if (phase === 'results' && timeLeft > 0) {\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'results' && timeLeft === 0) {\r\n      // Новый раунд\r\n      const words = getRandomWords(6, gameDictionary);\r\n      const board = generateBoard({ name: \"\", reward: \"\", words });\r\n      // После генерации поля ищем все возможные слова (только от 3 букв)\r\n      const allPossibleWords = findAllWordsOnBoard(board).filter(word => word.length >= 3);\r\n      setUsedWords(allPossibleWords);\r\n      setBoard(board);\r\n      setFoundWords([]);\r\n      setPhase('playing');\r\n      setTimeLeft(ROUND_DURATION);\r\n    }\r\n  }, [timeLeft, phase, board]);\r\n\r\n\r\n\r\n  // Обработка завершения пути (свайп/drag)\r\n  const handlePathComplete = (path: Array<[number, number]>) => {\r\n    if (path.length < 3) {\r\n      setMessage(uiStrings.ошибки.минимумБукв);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    const word = path.map(([r, c]) => board[r][c].letter).join(\"\");\r\n    const allWords = findAllWordsOnBoard(board).filter(word => word.length >= 3);\r\n    if (foundWords.includes(word)) {\r\n      setMessage(uiStrings.ошибки.ужеВводилось);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    if (!allWords.includes(word) || !isWordInDictionary(word)) {\r\n      setMessage(uiStrings.ошибки.нетСлова);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    // Подсчёт очков по бонусам букв\r\n    let wordScore = 0;\r\n    path.forEach(([r, c]) => {\r\n      const letter = board[r][c].letter.toUpperCase();\r\n      wordScore += letterBonuses[letter] || 0;\r\n    });\r\n    setScore(score + wordScore);\r\n    setFoundWords([...foundWords, word]);\r\n    setMessage(`+${wordScore} очков`);\r\n    setFlashColor('green');\r\n    setTimeout(() => setFlashColor(null), 300);\r\n    setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n  };\r\n\r\n  // Проверка слова при завершении выбора (например, тап по последней клетке или авто)\r\n  useEffect(() => {\r\n    // Проверяем только если длина слова >= 3\r\n    if (currentWord.length >= 3) {\r\n      // Проверяем, есть ли слово в возможных\r\n      const allWords = findAllWordsOnBoard(board);\r\n      if (allWords.includes(currentWord) && !foundWords.includes(currentWord)) {\r\n        setFoundWords([...foundWords, currentWord]);\r\n        setFlashColor('green');\r\n        setTimeout(() => setFlashColor(null), 300);\r\n        setTimeout(() => {\r\n          setSelectedCells([]);\r\n          setCurrentWord(\"\");\r\n        }, 350);\r\n      } else if (currentWord.length > 3 && !allWords.includes(currentWord)) {\r\n        setFlashColor('red');\r\n        setTimeout(() => setFlashColor(null), 300);\r\n        setTimeout(() => {\r\n          setSelectedCells([]);\r\n          setCurrentWord(\"\");\r\n        }, 350);\r\n      }\r\n    }\r\n  }, [currentWord]);\r\n\r\n  if (screen === 'welcome') {\r\n    return (\r\n      <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto', textAlign: 'center' }}>\r\n        <h1>Фундамент</h1>\r\n        <button style={{ margin: 12, padding: '12px 32px', fontSize: 18, cursor: 'pointer' }} onClick={() => {\r\n          // Генерируем поле и считаем количество слов\r\n          const words = getRandomWords(6, gameDictionary);\r\n          const board = generateBoard({ name: \"\", reward: \"\", words });\r\n          const allPossibleWords = findAllWordsOnBoard(board);\r\n          setLoadingMax(allPossibleWords.length);\r\n          setLoadingProgress(0);\r\n          setLoadingTimer(5);\r\n          setScreen('loading');\r\n        }}>Старт</button>\r\n        <button style={{ margin: 12, padding: '12px 32px', fontSize: 18, cursor: 'pointer' }} onClick={() => setScreen('help')}>Справка</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (screen === 'loading') {\r\n    return (\r\n      <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto', textAlign: 'center' }}>\r\n        <h2>Загрузка поля...</h2>\r\n        <div style={{ fontSize: 32, margin: '32px 0', color: '#1976d2', fontWeight: 700 }}>{loadingProgress}</div>\r\n        <div style={{ fontSize: 18, marginBottom: 12 }}>Будет доступно слов: {loadingMax}</div>\r\n        <div style={{ fontSize: 16, color: '#888' }}>Осталось секунд: {loadingTimer}</div>\r\n      </div>\r\n    );\r\n  }\r\n  if (screen === 'help') {\r\n    return (\r\n      <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto', textAlign: 'center' }}>\r\n        <h1>Фундамент</h1>\r\n        <div style={{ fontSize: 20, margin: '32px 0' }}>Справка будет добавлена позже.</div>\r\n        <button style={{ margin: 12, padding: '12px 32px', fontSize: 18, cursor: 'pointer' }} onClick={() => setScreen('welcome')}>Назад</button>\r\n      </div>\r\n    );\r\n  }\r\n  // Экран игры\r\n  return (\r\n    <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto' }}>\r\n      <h1>Фундамент</h1>\r\n      <div style={{ fontSize: 20, fontWeight: 600, marginBottom: 8 }}>\r\n        {phase === 'playing' ? uiStrings.игра.заголовок : uiStrings.результаты.заголовок}\r\n        {' '}\r\n        <span style={{ fontSize: 18, fontWeight: 400, color: '#1976d2' }}>\r\n          {timeLeft} сек.\r\n        </span>\r\n      </div>\r\n      <div style={{ minHeight: 32, color: message.includes(uiStrings.прочее.очков) ? 'green' : 'red', fontWeight: 500 }}>{message}</div>\r\n      <div style={{ marginBottom: 8 }}>{uiStrings.игра.очки}: {score}</div>\r\n      {/* ОТЛАДКА: выводим все возможные слова на этом поле */}\r\n      <div style={{ margin: '12px 0', padding: '8px', background: '#f5f5f5', borderRadius: 8, fontSize: 14, color: '#333', maxHeight: 120, overflowY: 'auto' }}>\r\n        <b>Все слова на поле ({usedWords.length}):</b>\r\n        <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8 }}>\r\n          {usedWords.map(word => (\r\n            <span key={word} style={{ background: '#e0e0e0', borderRadius: 4, padding: '2px 6px', margin: 2 }}>{word}</span>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <GameBoard \r\n        board={board} \r\n        selectedCells={selectedCells}\r\n        onPathComplete={phase === 'playing' ? handlePathComplete : undefined}\r\n        onDragUpdate={phase === 'playing' ? setSelectedCells : undefined}\r\n        flashColor={flashColor}\r\n      />\r\n      {phase === 'results' && (\r\n        <Results \r\n          foundWords={foundWords} \r\n          possibleWords={possibleWords} \r\n          leaderboard={leaderboard}\r\n          usedWords={usedWords}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
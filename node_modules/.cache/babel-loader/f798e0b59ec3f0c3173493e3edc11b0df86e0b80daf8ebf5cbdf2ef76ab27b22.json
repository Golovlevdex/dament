{"ast":null,"code":"import React,{useRef,useState}from\"react\";import\"./GameBoard.css\";import{letterBonuses}from\"./anagramGenerator\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";// ...existing code...\nconst GameBoard=_ref=>{let{board,selectedCells=[],onCellSelect,onPathComplete,onDragUpdate,flashColor}=_ref;const getCoords=idx=>[Math.floor(idx/4),idx%4];const[isDragging,setIsDragging]=useState(false);// Глобальный mouseup для завершения drag\nReact.useEffect(()=>{const handleGlobalMouseUp=()=>{if(isDragging){setIsDragging(false);if(dragCells.current.length>0&&typeof onPathComplete==='function'){onPathComplete([...dragCells.current]);}dragCells.current=[];}};document.addEventListener('mouseup',handleGlobalMouseUp);return()=>document.removeEventListener('mouseup',handleGlobalMouseUp);},[isDragging,onPathComplete]);const dragCells=useRef([]);// Начало свайпа\nconst handleStart=(row,col)=>{setIsDragging(true);dragCells.current=[[row,col]];if(onDragUpdate)onDragUpdate([...dragCells.current]);if(onCellSelect)onCellSelect(row,col);};// Проверка соседства\nconst isNeighbor=(a,b)=>{const dr=Math.abs(a[0]-b[0]);const dc=Math.abs(a[1]-b[1]);return dr<=1&&dc<=1&&!(dr===0&&dc===0);};// Добавление ячейки при движении\nconst handleEnter=(row,col)=>{if(!isDragging)return;const path=dragCells.current;const last=path[path.length-1];// Если навели на предыдущую клетку (шаг назад)\nif(path.length>1){const prev=path[path.length-2];if(row===prev[0]&&col===prev[1]){path.pop();if(onDragUpdate)onDragUpdate([...path]);return;}}// Если клетка уже выбрана — игнорируем\nif(path.some(_ref2=>{let[r,c]=_ref2;return r===row&&c===col;}))return;if(!isNeighbor(last,[row,col]))return;path.push([row,col]);if(onDragUpdate)onDragUpdate([...path]);if(onCellSelect)onCellSelect(row,col);};// Завершение свайпа\nconst handleEnd=()=>{setIsDragging(false);if(dragCells.current.length>0&&typeof onPathComplete==='function'){onPathComplete([...dragCells.current]);}dragCells.current=[];};return/*#__PURE__*/_jsx(\"div\",{className:\"user-select-none\",style:{display:'grid',gridTemplateColumns:'repeat(4, 48px)',gap:8},onMouseUp:handleEnd,onTouchEnd:handleEnd,children:board.flat().map((cell,idx)=>{const[row,col]=getCoords(idx);const isSelected=selectedCells.some(_ref3=>{let[r,c]=_ref3;return r===row&&c===col;});let bg='#e0e0e0';if(cell.bonus==='doubleLetter')bg='#ffe082';if(cell.bonus==='rareBonus')bg='#ce93d8';if(isSelected)bg='#90caf9';if(isSelected&&flashColor==='green')bg='#a5d6a7';if(isSelected&&flashColor==='red')bg='#ef9a9a';const bonusValue=letterBonuses[cell.letter.toUpperCase()]||0;return/*#__PURE__*/_jsxs(\"div\",{style:{width:48,height:48,background:bg,display:'flex',flexDirection:'column',alignItems:'center',justifyContent:'center',fontSize:24,borderRadius:8,cursor:onCellSelect?'pointer':'default',transition:'background 0.2s',boxShadow:isSelected?'0 0 0 2px #1976d2':undefined},onMouseDown:e=>{if(e.button===0)handleStart(row,col);},onMouseEnter:e=>{if(isDragging)handleEnter(row,col);},onTouchStart:()=>handleStart(row,col),onTouchMove:e=>{const touch=e.touches[0];const target=document.elementFromPoint(touch.clientX,touch.clientY);if(target&&target.dataset&&target.dataset.idx){const idx2=parseInt(target.dataset.idx);const[r2,c2]=getCoords(idx2);handleEnter(r2,c2);}},\"data-idx\":idx,children:[/*#__PURE__*/_jsx(\"span\",{children:cell.letter}),/*#__PURE__*/_jsx(\"span\",{style:{fontSize:12,color:'#6d4c41'},children:bonusValue>0?bonusValue:''})]},idx);})});};export default GameBoard;","map":{"version":3,"names":["React","useRef","useState","letterBonuses","jsx","_jsx","jsxs","_jsxs","GameBoard","_ref","board","selectedCells","onCellSelect","onPathComplete","onDragUpdate","flashColor","getCoords","idx","Math","floor","isDragging","setIsDragging","useEffect","handleGlobalMouseUp","dragCells","current","length","document","addEventListener","removeEventListener","handleStart","row","col","isNeighbor","a","b","dr","abs","dc","handleEnter","path","last","prev","pop","some","_ref2","r","c","push","handleEnd","className","style","display","gridTemplateColumns","gap","onMouseUp","onTouchEnd","children","flat","map","cell","isSelected","_ref3","bg","bonus","bonusValue","letter","toUpperCase","width","height","background","flexDirection","alignItems","justifyContent","fontSize","borderRadius","cursor","transition","boxShadow","undefined","onMouseDown","e","button","onMouseEnter","onTouchStart","onTouchMove","touch","touches","target","elementFromPoint","clientX","clientY","dataset","idx2","parseInt","r2","c2","color"],"sources":["C:/vsc/dament/src/GameBoard.tsx"],"sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport \"./GameBoard.css\";\r\n\r\nimport { Cell, letterBonuses } from \"./anagramGenerator\";\r\n\r\ninterface GameBoardProps {\r\n  board: Cell[][];\r\n  selectedCells?: Array<[number, number]>;\r\n  onCellSelect?: (row: number, col: number) => void;\r\n  onPathComplete?: (path: Array<[number, number]>) => void;\r\n  onDragUpdate?: (path: Array<[number, number]>) => void;\r\n  flashColor?: string | null; // 'green' | 'red' | null\r\n}\r\n\r\n// ...existing code...\r\n\r\nconst GameBoard: React.FC<GameBoardProps> = ({ board, selectedCells = [], onCellSelect, onPathComplete, onDragUpdate, flashColor }) => {\r\n  const getCoords = (idx: number) => [Math.floor(idx / 4), idx % 4] as [number, number];\r\n  const [isDragging, setIsDragging] = useState(false);\r\n\r\n  // Глобальный mouseup для завершения drag\r\n  React.useEffect(() => {\r\n    const handleGlobalMouseUp = () => {\r\n      if (isDragging) {\r\n        setIsDragging(false);\r\n        if (dragCells.current.length > 0 && typeof onPathComplete === 'function') {\r\n          onPathComplete([...dragCells.current]);\r\n        }\r\n        dragCells.current = [];\r\n      }\r\n    };\r\n    document.addEventListener('mouseup', handleGlobalMouseUp);\r\n    return () => document.removeEventListener('mouseup', handleGlobalMouseUp);\r\n  }, [isDragging, onPathComplete]);\r\n  const dragCells = useRef<Array<[number, number]>>([]);\r\n\r\n  // Начало свайпа\r\n  const handleStart = (row: number, col: number) => {\r\n    setIsDragging(true);\r\n    dragCells.current = [[row, col]];\r\n    if (onDragUpdate) onDragUpdate([...dragCells.current]);\r\n    if (onCellSelect) onCellSelect(row, col);\r\n  };\r\n  // Проверка соседства\r\n  const isNeighbor = (a: [number, number], b: [number, number]) => {\r\n    const dr = Math.abs(a[0] - b[0]);\r\n    const dc = Math.abs(a[1] - b[1]);\r\n    return dr <= 1 && dc <= 1 && !(dr === 0 && dc === 0);\r\n  };\r\n  // Добавление ячейки при движении\r\n  const handleEnter = (row: number, col: number) => {\r\n    if (!isDragging) return;\r\n    const path = dragCells.current;\r\n    const last = path[path.length - 1];\r\n    // Если навели на предыдущую клетку (шаг назад)\r\n    if (path.length > 1) {\r\n      const prev = path[path.length - 2];\r\n      if (row === prev[0] && col === prev[1]) {\r\n        path.pop();\r\n        if (onDragUpdate) onDragUpdate([...path]);\r\n        return;\r\n      }\r\n    }\r\n    // Если клетка уже выбрана — игнорируем\r\n    if (path.some(([r, c]) => r === row && c === col)) return;\r\n    if (!isNeighbor(last, [row, col])) return;\r\n    path.push([row, col]);\r\n    if (onDragUpdate) onDragUpdate([...path]);\r\n    if (onCellSelect) onCellSelect(row, col);\r\n  };\r\n  // Завершение свайпа\r\n  const handleEnd = () => {\r\n    setIsDragging(false);\r\n    if (dragCells.current.length > 0 && typeof onPathComplete === 'function') {\r\n      onPathComplete([...dragCells.current]);\r\n    }\r\n    dragCells.current = [];\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"user-select-none\"\r\n      style={{ display: 'grid', gridTemplateColumns: 'repeat(4, 48px)', gap: 8 }}\r\n      onMouseUp={handleEnd}\r\n      onTouchEnd={handleEnd}\r\n    >\r\n      {board.flat().map((cell, idx) => {\r\n        const [row, col] = getCoords(idx);\r\n        const isSelected = selectedCells.some(([r, c]) => r === row && c === col);\r\n        let bg = '#e0e0e0';\r\n        if (cell.bonus === 'doubleLetter') bg = '#ffe082';\r\n        if (cell.bonus === 'rareBonus') bg = '#ce93d8';\r\n        if (isSelected) bg = '#90caf9';\r\n        if (isSelected && flashColor === 'green') bg = '#a5d6a7';\r\n        if (isSelected && flashColor === 'red') bg = '#ef9a9a';\r\n        const bonusValue = letterBonuses[cell.letter.toUpperCase()] || 0;\r\n        return (\r\n          <div\r\n            key={idx}\r\n            style={{\r\n              width: 48,\r\n              height: 48,\r\n              background: bg,\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              fontSize: 24,\r\n              borderRadius: 8,\r\n              cursor: onCellSelect ? 'pointer' : 'default',\r\n              transition: 'background 0.2s',\r\n              boxShadow: isSelected ? '0 0 0 2px #1976d2' : undefined\r\n            }}\r\n            onMouseDown={e => {\r\n              if (e.button === 0) handleStart(row, col);\r\n            }}\r\n            onMouseEnter={e => {\r\n              if (isDragging) handleEnter(row, col);\r\n            }}\r\n            onTouchStart={() => handleStart(row, col)}\r\n            onTouchMove={e => {\r\n              const touch = e.touches[0];\r\n              const target = document.elementFromPoint(touch.clientX, touch.clientY);\r\n              if (target && (target as HTMLElement).dataset && (target as HTMLElement).dataset.idx) {\r\n                const idx2 = parseInt((target as HTMLElement).dataset.idx!);\r\n                const [r2, c2] = getCoords(idx2);\r\n                handleEnter(r2, c2);\r\n              }\r\n            }}\r\n            data-idx={idx}\r\n          >\r\n            <span>{cell.letter}</span>\r\n            <span style={{ fontSize: 12, color: '#6d4c41' }}>{bonusValue > 0 ? bonusValue : ''}</span>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
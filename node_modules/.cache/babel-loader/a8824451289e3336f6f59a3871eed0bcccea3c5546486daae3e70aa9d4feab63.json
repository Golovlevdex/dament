{"ast":null,"code":"var _jsxFileName = \"C:\\\\vsc\\\\dament\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport GameBoard from \"./GameBoard\";\n// import WordInput from \"./WordInput\";\nimport Results from \"./Results\";\n// Импортируем игровую логику\nimport { generateBoard, findAllWordsOnBoard, ROUND_DURATION, PAUSE_DURATION, letterBonuses } from \"./anagramGenerator\";\nimport { isWordInDictionary, gameDictionary } from \"./dictionary\";\nimport uiStrings from './ui-strings-categorized.json';\nimport { canFormWordOnBoard } from \"./anagramGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getRandomWords = (count, dictionary) => {\n  const shuffled = [...dictionary].sort(() => Math.random() - 0.5);\n  return shuffled.slice(0, count);\n};\nconst App = () => {\n  _s();\n  const [screen, setScreen] = useState('welcome');\n  const [loadingProgress, setLoadingProgress] = useState(0);\n  const [loadingMax, setLoadingMax] = useState(0);\n  const [loadingTimer, setLoadingTimer] = useState(5);\n  const [usedWords, setUsedWords] = useState([]);\n  // Параметры генерации\n  const FIELD_SIZE = 4; // размер поля (4x4)\n  const MIN_WORDS = 20; // минимальное количество слов\n  const MAX_ATTEMPTS = 100; // попыток подобрать поле\n\n  const [board, setBoard] = useState(() => {\n    // Новый генератор: размещаем несколько слов из словаря на поле\n    let bestBoard = null;\n    let bestWords = [];\n    let attempts = 0;\n    const POPULAR_WORDS_COUNT = 3; // сколько слов гарантированно размещаем\n    while (attempts < MAX_ATTEMPTS) {\n      // Выбираем несколько популярных или случайных слов\n      const chosenWords = getRandomWords(POPULAR_WORDS_COUNT, gameDictionary.filter(w => w.length <= FIELD_SIZE));\n      // Создаём пустое поле\n      let letters = Array(FIELD_SIZE * FIELD_SIZE).fill('');\n      let usedPositions = new Set();\n      // Пробуем разместить каждое слово на поле\n      for (const word of chosenWords) {\n        // Ищем свободное место для слова (по горизонтали или вертикали)\n        let placed = false;\n        for (let dir = 0; dir < 2; dir++) {\n          // 0 - горизонталь, 1 - вертикаль\n          for (let r = 0; r < FIELD_SIZE; r++) {\n            for (let c = 0; c < FIELD_SIZE; c++) {\n              if (dir === 0 && c + word.length <= FIELD_SIZE) {\n                // Проверяем, свободно ли место\n                let canPlace = true;\n                for (let i = 0; i < word.length; i++) {\n                  if (letters[r * FIELD_SIZE + (c + i)] !== '' || usedPositions.has(r * FIELD_SIZE + (c + i))) {\n                    canPlace = false;\n                    break;\n                  }\n                }\n                if (canPlace) {\n                  for (let i = 0; i < word.length; i++) {\n                    letters[r * FIELD_SIZE + (c + i)] = word[i];\n                    usedPositions.add(r * FIELD_SIZE + (c + i));\n                  }\n                  placed = true;\n                  break;\n                }\n              }\n              if (dir === 1 && r + word.length <= FIELD_SIZE) {\n                let canPlace = true;\n                for (let i = 0; i < word.length; i++) {\n                  if (letters[(r + i) * FIELD_SIZE + c] !== '' || usedPositions.has((r + i) * FIELD_SIZE + c)) {\n                    canPlace = false;\n                    break;\n                  }\n                }\n                if (canPlace) {\n                  for (let i = 0; i < word.length; i++) {\n                    letters[(r + i) * FIELD_SIZE + c] = word[i];\n                    usedPositions.add((r + i) * FIELD_SIZE + c);\n                  }\n                  placed = true;\n                  break;\n                }\n              }\n            }\n            if (placed) break;\n          }\n          if (placed) break;\n        }\n      }\n      // Остальные клетки заполняем случайными буквами из словаря\n      for (let i = 0; i < letters.length; i++) {\n        if (letters[i] === '') {\n          const randIndex = Math.floor(Math.random() * gameDictionary.join('').length);\n          letters[i] = gameDictionary.join('')[randIndex];\n        }\n      }\n      // Преобразуем в матрицу Cell[][] с бонусами\n      const matrix = [];\n      for (let r = 0; r < FIELD_SIZE; r++) {\n        matrix.push(letters.slice(r * FIELD_SIZE, (r + 1) * FIELD_SIZE).map((letter, c) => {\n          let rawBonus = letterBonuses[letter.toUpperCase()];\n          let bonus = typeof rawBonus === 'string' ? rawBonus : 'none';\n          return {\n            letter,\n            row: r,\n            col: c,\n            bonus\n          };\n        }));\n      }\n      // Находим все слова\n      const possibleWords = findAllWordsOnBoard(matrix);\n      // Проверяем, что размещённые слова реально можно составить\n      let allPlacedWordsFound = chosenWords.every(w => possibleWords.includes(w));\n      if (allPlacedWordsFound && possibleWords.length >= MIN_WORDS) {\n        bestBoard = matrix;\n        bestWords = possibleWords;\n        break;\n      }\n      if (possibleWords.length > bestWords.length) {\n        bestBoard = matrix;\n        bestWords = possibleWords;\n      }\n      attempts++;\n    }\n    // Гарантируем, что на поле есть хотя бы одно слово\n    if (!bestBoard || bestWords.length === 0) {\n      let found = false;\n      let matrix = [];\n      let possibleWords = [];\n      let tries = 0;\n      while (!found && tries < MAX_ATTEMPTS * 2) {\n        const letters = [];\n        for (let i = 0; i < FIELD_SIZE * FIELD_SIZE; i++) {\n          const randIndex = Math.floor(Math.random() * gameDictionary.join('').length);\n          letters.push(gameDictionary.join('')[randIndex]);\n        }\n        matrix = [];\n        for (let r = 0; r < FIELD_SIZE; r++) {\n          matrix.push(letters.slice(r * FIELD_SIZE, (r + 1) * FIELD_SIZE).map((letter, c) => {\n            let rawBonus = letterBonuses[letter.toUpperCase()];\n            let bonus = typeof rawBonus === 'string' ? rawBonus : 'none';\n            return {\n              letter,\n              row: r,\n              col: c,\n              bonus\n            };\n          }));\n        }\n        possibleWords = findAllWordsOnBoard(matrix);\n        if (possibleWords.length > 0) found = true;\n        tries++;\n      }\n      setUsedWords(possibleWords);\n      return matrix;\n    }\n    setUsedWords(bestWords);\n    return bestBoard;\n  });\n  const [timeLeft, setTimeLeft] = useState(ROUND_DURATION);\n  const [foundWords, setFoundWords] = useState([]);\n  const [score, setScore] = useState(0);\n  const [message, setMessage] = useState(\"\");\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [currentWord, setCurrentWord] = useState(\"\");\n  const [flashColor, setFlashColor] = useState(null);\n  const [phase, setPhase] = useState('playing');\n  const [possibleWords, setPossibleWords] = useState([]);\n  const leaderboard = [{\n    name: \"Вы\",\n    score\n  }];\n\n  // useEffect для анимации загрузки (теперь строго после всех useState)\n  useEffect(() => {\n    if (screen === 'loading' && loadingProgress < loadingMax && loadingTimer > 0) {\n      const step = Math.ceil(loadingMax / (loadingTimer * 20));\n      const interval = setInterval(() => {\n        setLoadingProgress(prev => Math.min(prev + step, loadingMax));\n      }, 50);\n      return () => clearInterval(interval);\n    }\n  }, [screen, loadingProgress, loadingMax, loadingTimer]);\n  useEffect(() => {\n    if (screen === 'loading' && loadingTimer > 0) {\n      const timer = setTimeout(() => setLoadingTimer(loadingTimer - 1), 1000);\n      return () => clearTimeout(timer);\n    } else if (screen === 'loading' && loadingTimer === 0) {\n      setScreen('game');\n    }\n  }, [screen, loadingTimer]);\n\n  // useEffect для анимации загрузки\n  useEffect(() => {\n    if (screen === 'loading' && loadingProgress < loadingMax && loadingTimer > 0) {\n      const step = Math.ceil(loadingMax / (loadingTimer * 20));\n      const interval = setInterval(() => {\n        setLoadingProgress(prev => Math.min(prev + step, loadingMax));\n      }, 50);\n      return () => clearInterval(interval);\n    }\n  }, [screen, loadingProgress, loadingMax, loadingTimer]);\n  useEffect(() => {\n    if (screen === 'loading' && loadingTimer > 0) {\n      const timer = setTimeout(() => setLoadingTimer(loadingTimer - 1), 1000);\n      return () => clearTimeout(timer);\n    } else if (screen === 'loading' && loadingTimer === 0) {\n      setScreen('game');\n    }\n  }, [screen, loadingTimer]);\n\n  // Таймер\n  useEffect(() => {\n    if (phase === 'playing' && timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n    if (phase === 'playing' && timeLeft === 0) {\n      // Переход к результатам\n      setPossibleWords(usedWords.filter(word => canFormWordOnBoard(word, board)));\n      setSelectedCells([]); // сброс выделения\n      setCurrentWord(\"\"); // сброс текущего слова\n      setPhase('results');\n      setTimeLeft(PAUSE_DURATION);\n    }\n    if (phase === 'results' && timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n    if (phase === 'results' && timeLeft === 0) {\n      // Новый раунд\n      const words = getRandomWords(6, gameDictionary);\n      const board = generateBoard({\n        name: \"\",\n        reward: \"\",\n        words\n      });\n      // После генерации поля ищем все возможные слова\n      const allPossibleWords = findAllWordsOnBoard(board);\n      setUsedWords(allPossibleWords);\n      setBoard(board);\n      setFoundWords([]);\n      setPhase('playing');\n      setTimeLeft(ROUND_DURATION);\n    }\n  }, [timeLeft, phase, board]);\n\n  // Обработка завершения пути (свайп/drag)\n  const handlePathComplete = path => {\n    if (path.length < 3) {\n      setMessage(uiStrings.ошибки.минимумБукв);\n      setFlashColor('red');\n      setTimeout(() => setFlashColor(null), 300);\n      setTimeout(() => {\n        setMessage(\"\");\n        setSelectedCells([]);\n        setCurrentWord(\"\");\n      }, 350);\n      return;\n    }\n    const word = path.map(([r, c]) => board[r][c].letter).join(\"\");\n    const allWords = findAllWordsOnBoard(board);\n    if (foundWords.includes(word)) {\n      setMessage(uiStrings.ошибки.ужеВводилось);\n      setFlashColor('red');\n      setTimeout(() => setFlashColor(null), 300);\n      setTimeout(() => {\n        setMessage(\"\");\n        setSelectedCells([]);\n        setCurrentWord(\"\");\n      }, 350);\n      return;\n    }\n    if (!allWords.includes(word) || !isWordInDictionary(word)) {\n      setMessage(uiStrings.ошибки.нетСлова);\n      setFlashColor('red');\n      setTimeout(() => setFlashColor(null), 300);\n      setTimeout(() => {\n        setMessage(\"\");\n        setSelectedCells([]);\n        setCurrentWord(\"\");\n      }, 350);\n      return;\n    }\n    // Подсчёт очков по бонусам букв\n    let wordScore = 0;\n    path.forEach(([r, c]) => {\n      const letter = board[r][c].letter.toUpperCase();\n      wordScore += letterBonuses[letter] || 0;\n    });\n    setScore(score + wordScore);\n    setFoundWords([...foundWords, word]);\n    setMessage(`+${wordScore} очков`);\n    setFlashColor('green');\n    setTimeout(() => setFlashColor(null), 300);\n    setTimeout(() => {\n      setMessage(\"\");\n      setSelectedCells([]);\n      setCurrentWord(\"\");\n    }, 350);\n  };\n\n  // Проверка слова при завершении выбора (например, тап по последней клетке или авто)\n  useEffect(() => {\n    // Проверяем только если длина слова >= 3\n    if (currentWord.length >= 3) {\n      // Проверяем, есть ли слово в возможных\n      const allWords = findAllWordsOnBoard(board);\n      if (allWords.includes(currentWord) && !foundWords.includes(currentWord)) {\n        setFoundWords([...foundWords, currentWord]);\n        setFlashColor('green');\n        setTimeout(() => setFlashColor(null), 300);\n        setTimeout(() => {\n          setSelectedCells([]);\n          setCurrentWord(\"\");\n        }, 350);\n      } else if (currentWord.length > 3 && !allWords.includes(currentWord)) {\n        setFlashColor('red');\n        setTimeout(() => setFlashColor(null), 300);\n        setTimeout(() => {\n          setSelectedCells([]);\n          setCurrentWord(\"\");\n        }, 350);\n      }\n    }\n  }, [currentWord]);\n  if (screen === 'welcome') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: 'sans-serif',\n        padding: 24,\n        maxWidth: 600,\n        margin: '0 auto',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0424\\u0443\\u043D\\u0434\\u0430\\u043C\\u0435\\u043D\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          margin: 12,\n          padding: '12px 32px',\n          fontSize: 18,\n          cursor: 'pointer'\n        },\n        onClick: () => {\n          // Генерируем поле и считаем количество слов\n          const words = getRandomWords(6, gameDictionary);\n          const board = generateBoard({\n            name: \"\",\n            reward: \"\",\n            words\n          });\n          const allPossibleWords = findAllWordsOnBoard(board);\n          setLoadingMax(allPossibleWords.length);\n          setLoadingProgress(0);\n          setLoadingTimer(5);\n          setScreen('loading');\n        },\n        children: \"\\u0421\\u0442\\u0430\\u0440\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          margin: 12,\n          padding: '12px 32px',\n          fontSize: 18,\n          cursor: 'pointer'\n        },\n        onClick: () => setScreen('help'),\n        children: \"\\u0421\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this);\n  }\n  if (screen === 'loading') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: 'sans-serif',\n        padding: 24,\n        maxWidth: 600,\n        margin: '0 auto',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u043F\\u043E\\u043B\\u044F...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: 32,\n          margin: '32px 0',\n          color: '#1976d2',\n          fontWeight: 700\n        },\n        children: loadingProgress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: 18,\n          marginBottom: 12\n        },\n        children: [\"\\u0411\\u0443\\u0434\\u0435\\u0442 \\u0434\\u043E\\u0441\\u0442\\u0443\\u043F\\u043D\\u043E \\u0441\\u043B\\u043E\\u0432: \", loadingMax]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: 16,\n          color: '#888'\n        },\n        children: [\"\\u041E\\u0441\\u0442\\u0430\\u043B\\u043E\\u0441\\u044C \\u0441\\u0435\\u043A\\u0443\\u043D\\u0434: \", loadingTimer]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this);\n  }\n  if (screen === 'help') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: 'sans-serif',\n        padding: 24,\n        maxWidth: 600,\n        margin: '0 auto',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0424\\u0443\\u043D\\u0434\\u0430\\u043C\\u0435\\u043D\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: 20,\n          margin: '32px 0'\n        },\n        children: \"\\u0421\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430 \\u0431\\u0443\\u0434\\u0435\\u0442 \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u0430 \\u043F\\u043E\\u0437\\u0436\\u0435.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          margin: 12,\n          padding: '12px 32px',\n          fontSize: 18,\n          cursor: 'pointer'\n        },\n        onClick: () => setScreen('welcome'),\n        children: \"\\u041D\\u0430\\u0437\\u0430\\u0434\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this);\n  }\n  // Экран игры\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontFamily: 'sans-serif',\n      padding: 24,\n      maxWidth: 600,\n      margin: '0 auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0424\\u0443\\u043D\\u0434\\u0430\\u043C\\u0435\\u043D\\u0442\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: 20,\n        fontWeight: 600,\n        marginBottom: 8\n      },\n      children: [phase === 'playing' ? uiStrings.игра.заголовок : uiStrings.результаты.заголовок, ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontSize: 18,\n          fontWeight: 400,\n          color: '#1976d2'\n        },\n        children: [timeLeft, \" \\u0441\\u0435\\u043A.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        minHeight: 32,\n        color: message.includes(uiStrings.прочее.очков) ? 'green' : 'red',\n        fontWeight: 500\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 8\n      },\n      children: [uiStrings.игра.очки, \": \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '12px 0',\n        padding: '8px',\n        background: '#f5f5f5',\n        borderRadius: 8,\n        fontSize: 14,\n        color: '#333',\n        maxHeight: 120,\n        overflowY: 'auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\"\\u0412\\u0441\\u0435 \\u0441\\u043B\\u043E\\u0432\\u0430 \\u043D\\u0430 \\u043F\\u043E\\u043B\\u0435 (\", usedWords.length, \"):\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: 8\n        },\n        children: usedWords.map(word => /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            background: '#e0e0e0',\n            borderRadius: 4,\n            padding: '2px 6px',\n            margin: 2\n          },\n          children: word\n        }, word, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n      board: board,\n      selectedCells: selectedCells,\n      onPathComplete: phase === 'playing' ? handlePathComplete : undefined,\n      onDragUpdate: phase === 'playing' ? setSelectedCells : undefined,\n      flashColor: flashColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }, this), phase === 'results' && /*#__PURE__*/_jsxDEV(Results, {\n      foundWords: foundWords,\n      possibleWords: possibleWords,\n      leaderboard: leaderboard,\n      usedWords: usedWords\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 354,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"wiQPfeLC2E4hmusRKihodh7Ov4g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","GameBoard","Results","generateBoard","findAllWordsOnBoard","ROUND_DURATION","PAUSE_DURATION","letterBonuses","isWordInDictionary","gameDictionary","uiStrings","canFormWordOnBoard","jsxDEV","_jsxDEV","getRandomWords","count","dictionary","shuffled","sort","Math","random","slice","App","_s","screen","setScreen","loadingProgress","setLoadingProgress","loadingMax","setLoadingMax","loadingTimer","setLoadingTimer","usedWords","setUsedWords","FIELD_SIZE","MIN_WORDS","MAX_ATTEMPTS","board","setBoard","bestBoard","bestWords","attempts","POPULAR_WORDS_COUNT","chosenWords","filter","w","length","letters","Array","fill","usedPositions","Set","word","placed","dir","r","c","canPlace","i","has","add","randIndex","floor","join","matrix","push","map","letter","rawBonus","toUpperCase","bonus","row","col","possibleWords","allPlacedWordsFound","every","includes","found","tries","timeLeft","setTimeLeft","foundWords","setFoundWords","score","setScore","message","setMessage","selectedCells","setSelectedCells","currentWord","setCurrentWord","flashColor","setFlashColor","phase","setPhase","setPossibleWords","leaderboard","name","step","ceil","interval","setInterval","prev","min","clearInterval","timer","setTimeout","clearTimeout","words","reward","allPossibleWords","handlePathComplete","path","ошибки","минимумБукв","allWords","ужеВводилось","нетСлова","wordScore","forEach","style","fontFamily","padding","maxWidth","margin","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","cursor","onClick","color","fontWeight","marginBottom","игра","заголовок","результаты","minHeight","прочее","очков","очки","background","borderRadius","maxHeight","overflowY","display","flexWrap","gap","onPathComplete","undefined","onDragUpdate","_c","$RefreshReg$"],"sources":["C:/vsc/dament/src/App.tsx"],"sourcesContent":["\r\nimport React, { useState, useEffect } from \"react\";\r\nimport GameBoard from \"./GameBoard\";\r\nimport Timer from \"./Timer\";\r\n// import WordInput from \"./WordInput\";\r\nimport Results from \"./Results\";\r\n// Импортируем игровую логику\r\nimport { generateBoard, findAllWordsOnBoard, ROUND_DURATION, PAUSE_DURATION, Cell, letterBonuses } from \"./anagramGenerator\";\r\nimport { BonusType } from \"./anagramGenerator\";\r\nimport { isWordInDictionary, gameDictionary } from \"./dictionary\";\r\nimport uiStrings from './ui-strings-categorized.json';\r\nimport { canFormWordOnBoard } from \"./anagramGenerator\";\r\n\r\n\r\n\r\nconst getRandomWords = (count: number, dictionary: string[]): string[] => {\r\n  const shuffled = [...dictionary].sort(() => Math.random() - 0.5);\r\n  return shuffled.slice(0, count);\r\n};\r\n\r\nconst App: React.FC = () => {\r\n  const [screen, setScreen] = useState<'welcome' | 'loading' | 'game' | 'help'>('welcome');\r\n  const [loadingProgress, setLoadingProgress] = useState<number>(0);\r\n  const [loadingMax, setLoadingMax] = useState<number>(0);\r\n  const [loadingTimer, setLoadingTimer] = useState<number>(5);\r\n  const [usedWords, setUsedWords] = useState<string[]>([]);\r\n  // Параметры генерации\r\n  const FIELD_SIZE = 4; // размер поля (4x4)\r\n  const MIN_WORDS = 20; // минимальное количество слов\r\n  const MAX_ATTEMPTS = 100; // попыток подобрать поле\r\n\r\n  const [board, setBoard] = useState<Cell[][]>(() => {\r\n    // Новый генератор: размещаем несколько слов из словаря на поле\r\n    let bestBoard: Cell[][] | null = null;\r\n    let bestWords: string[] = [];\r\n    let attempts = 0;\r\n    const POPULAR_WORDS_COUNT = 3; // сколько слов гарантированно размещаем\r\n    while (attempts < MAX_ATTEMPTS) {\r\n      // Выбираем несколько популярных или случайных слов\r\n      const chosenWords = getRandomWords(POPULAR_WORDS_COUNT, gameDictionary.filter(w => w.length <= FIELD_SIZE));\r\n      // Создаём пустое поле\r\n      let letters = Array(FIELD_SIZE * FIELD_SIZE).fill('');\r\n      let usedPositions: Set<number> = new Set();\r\n      // Пробуем разместить каждое слово на поле\r\n      for (const word of chosenWords) {\r\n        // Ищем свободное место для слова (по горизонтали или вертикали)\r\n        let placed = false;\r\n        for (let dir = 0; dir < 2; dir++) { // 0 - горизонталь, 1 - вертикаль\r\n          for (let r = 0; r < FIELD_SIZE; r++) {\r\n            for (let c = 0; c < FIELD_SIZE; c++) {\r\n              if (dir === 0 && c + word.length <= FIELD_SIZE) {\r\n                // Проверяем, свободно ли место\r\n                let canPlace = true;\r\n                for (let i = 0; i < word.length; i++) {\r\n                  if (letters[r * FIELD_SIZE + (c + i)] !== '' || usedPositions.has(r * FIELD_SIZE + (c + i))) {\r\n                    canPlace = false;\r\n                    break;\r\n                  }\r\n                }\r\n                if (canPlace) {\r\n                  for (let i = 0; i < word.length; i++) {\r\n                    letters[r * FIELD_SIZE + (c + i)] = word[i];\r\n                    usedPositions.add(r * FIELD_SIZE + (c + i));\r\n                  }\r\n                  placed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (dir === 1 && r + word.length <= FIELD_SIZE) {\r\n                let canPlace = true;\r\n                for (let i = 0; i < word.length; i++) {\r\n                  if (letters[(r + i) * FIELD_SIZE + c] !== '' || usedPositions.has((r + i) * FIELD_SIZE + c)) {\r\n                    canPlace = false;\r\n                    break;\r\n                  }\r\n                }\r\n                if (canPlace) {\r\n                  for (let i = 0; i < word.length; i++) {\r\n                    letters[(r + i) * FIELD_SIZE + c] = word[i];\r\n                    usedPositions.add((r + i) * FIELD_SIZE + c);\r\n                  }\r\n                  placed = true;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n            if (placed) break;\r\n          }\r\n          if (placed) break;\r\n        }\r\n      }\r\n      // Остальные клетки заполняем случайными буквами из словаря\r\n      for (let i = 0; i < letters.length; i++) {\r\n        if (letters[i] === '') {\r\n          const randIndex = Math.floor(Math.random() * gameDictionary.join('').length);\r\n          letters[i] = gameDictionary.join('')[randIndex];\r\n        }\r\n      }\r\n      // Преобразуем в матрицу Cell[][] с бонусами\r\n      const matrix: Cell[][] = [];\r\n      for (let r = 0; r < FIELD_SIZE; r++) {\r\n        matrix.push(letters.slice(r * FIELD_SIZE, (r + 1) * FIELD_SIZE).map((letter, c) => {\r\n          let rawBonus = letterBonuses[letter.toUpperCase()];\r\n          let bonus: BonusType = typeof rawBonus === 'string' ? rawBonus : 'none';\r\n          return {\r\n            letter,\r\n            row: r,\r\n            col: c,\r\n            bonus\r\n          };\r\n        }));\r\n      }\r\n      // Находим все слова\r\n      const possibleWords: string[] = findAllWordsOnBoard(matrix);\r\n      // Проверяем, что размещённые слова реально можно составить\r\n      let allPlacedWordsFound = chosenWords.every(w => possibleWords.includes(w));\r\n      if (allPlacedWordsFound && possibleWords.length >= MIN_WORDS) {\r\n        bestBoard = matrix;\r\n        bestWords = possibleWords;\r\n        break;\r\n      }\r\n      if (possibleWords.length > bestWords.length) {\r\n        bestBoard = matrix;\r\n        bestWords = possibleWords;\r\n      }\r\n      attempts++;\r\n    }\r\n    // Гарантируем, что на поле есть хотя бы одно слово\r\n    if (!bestBoard || bestWords.length === 0) {\r\n      let found = false;\r\n      let matrix: Cell[][] = [];\r\n      let possibleWords: string[] = [];\r\n      let tries = 0;\r\n      while (!found && tries < MAX_ATTEMPTS * 2) {\r\n        const letters: string[] = [];\r\n        for (let i = 0; i < FIELD_SIZE * FIELD_SIZE; i++) {\r\n          const randIndex = Math.floor(Math.random() * gameDictionary.join('').length);\r\n          letters.push(gameDictionary.join('')[randIndex]);\r\n        }\r\n        matrix = [];\r\n        for (let r = 0; r < FIELD_SIZE; r++) {\r\n          matrix.push(letters.slice(r * FIELD_SIZE, (r + 1) * FIELD_SIZE).map((letter, c) => {\r\n            let rawBonus = letterBonuses[letter.toUpperCase()];\r\n            let bonus: BonusType = typeof rawBonus === 'string' ? rawBonus : 'none';\r\n            return {\r\n              letter,\r\n              row: r,\r\n              col: c,\r\n              bonus\r\n            };\r\n          }));\r\n        }\r\n        possibleWords = findAllWordsOnBoard(matrix);\r\n        if (possibleWords.length > 0) found = true;\r\n        tries++;\r\n      }\r\n      setUsedWords(possibleWords);\r\n      return matrix;\r\n    }\r\n    setUsedWords(bestWords);\r\n    return bestBoard;\r\n  });\r\n  const [timeLeft, setTimeLeft] = useState<number>(ROUND_DURATION);\r\n  const [foundWords, setFoundWords] = useState<string[]>([]);\r\n  const [score, setScore] = useState<number>(0);\r\n  const [message, setMessage] = useState<string>(\"\");\r\n  const [selectedCells, setSelectedCells] = useState<Array<[number, number]>>([]);\r\n  const [currentWord, setCurrentWord] = useState<string>(\"\");\r\n  const [flashColor, setFlashColor] = useState<string | null>(null);\r\n  const [phase, setPhase] = useState<'playing' | 'results'>('playing');\r\n  const [possibleWords, setPossibleWords] = useState<string[]>([]);\r\n  const leaderboard = [\r\n    { name: \"Вы\", score }\r\n  ];\r\n\r\n  // useEffect для анимации загрузки (теперь строго после всех useState)\r\n  useEffect(() => {\r\n    if (screen === 'loading' && loadingProgress < loadingMax && loadingTimer > 0) {\r\n      const step = Math.ceil(loadingMax / (loadingTimer * 20));\r\n      const interval = setInterval(() => {\r\n        setLoadingProgress(prev => Math.min(prev + step, loadingMax));\r\n      }, 50);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [screen, loadingProgress, loadingMax, loadingTimer]);\r\n\r\n  useEffect(() => {\r\n    if (screen === 'loading' && loadingTimer > 0) {\r\n      const timer = setTimeout(() => setLoadingTimer(loadingTimer - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    } else if (screen === 'loading' && loadingTimer === 0) {\r\n      setScreen('game');\r\n    }\r\n  }, [screen, loadingTimer]);\r\n\r\n  // useEffect для анимации загрузки\r\n  useEffect(() => {\r\n    if (screen === 'loading' && loadingProgress < loadingMax && loadingTimer > 0) {\r\n      const step = Math.ceil(loadingMax / (loadingTimer * 20));\r\n      const interval = setInterval(() => {\r\n        setLoadingProgress(prev => Math.min(prev + step, loadingMax));\r\n      }, 50);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [screen, loadingProgress, loadingMax, loadingTimer]);\r\n\r\n  useEffect(() => {\r\n    if (screen === 'loading' && loadingTimer > 0) {\r\n      const timer = setTimeout(() => setLoadingTimer(loadingTimer - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    } else if (screen === 'loading' && loadingTimer === 0) {\r\n      setScreen('game');\r\n    }\r\n  }, [screen, loadingTimer]);\r\n\r\n  // Таймер\r\n  useEffect(() => {\r\n    if (phase === 'playing' && timeLeft > 0) {\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'playing' && timeLeft === 0) {\r\n      // Переход к результатам\r\n      setPossibleWords(usedWords.filter(word => canFormWordOnBoard(word, board)));\r\n      setSelectedCells([]); // сброс выделения\r\n      setCurrentWord(\"\"); // сброс текущего слова\r\n      setPhase('results');\r\n      setTimeLeft(PAUSE_DURATION);\r\n    }\r\n    if (phase === 'results' && timeLeft > 0) {\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'results' && timeLeft === 0) {\r\n      // Новый раунд\r\n      const words = getRandomWords(6, gameDictionary);\r\n      const board = generateBoard({ name: \"\", reward: \"\", words });\r\n      // После генерации поля ищем все возможные слова\r\n      const allPossibleWords = findAllWordsOnBoard(board);\r\n      setUsedWords(allPossibleWords);\r\n      setBoard(board);\r\n      setFoundWords([]);\r\n      setPhase('playing');\r\n      setTimeLeft(ROUND_DURATION);\r\n    }\r\n  }, [timeLeft, phase, board]);\r\n\r\n\r\n\r\n  // Обработка завершения пути (свайп/drag)\r\n  const handlePathComplete = (path: Array<[number, number]>) => {\r\n    if (path.length < 3) {\r\n      setMessage(uiStrings.ошибки.минимумБукв);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    const word = path.map(([r, c]) => board[r][c].letter).join(\"\");\r\n    const allWords = findAllWordsOnBoard(board);\r\n    if (foundWords.includes(word)) {\r\n      setMessage(uiStrings.ошибки.ужеВводилось);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    if (!allWords.includes(word) || !isWordInDictionary(word)) {\r\n      setMessage(uiStrings.ошибки.нетСлова);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    // Подсчёт очков по бонусам букв\r\n    let wordScore = 0;\r\n    path.forEach(([r, c]) => {\r\n      const letter = board[r][c].letter.toUpperCase();\r\n      wordScore += letterBonuses[letter] || 0;\r\n    });\r\n    setScore(score + wordScore);\r\n    setFoundWords([...foundWords, word]);\r\n    setMessage(`+${wordScore} очков`);\r\n    setFlashColor('green');\r\n    setTimeout(() => setFlashColor(null), 300);\r\n    setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n  };\r\n\r\n  // Проверка слова при завершении выбора (например, тап по последней клетке или авто)\r\n  useEffect(() => {\r\n    // Проверяем только если длина слова >= 3\r\n    if (currentWord.length >= 3) {\r\n      // Проверяем, есть ли слово в возможных\r\n      const allWords = findAllWordsOnBoard(board);\r\n      if (allWords.includes(currentWord) && !foundWords.includes(currentWord)) {\r\n        setFoundWords([...foundWords, currentWord]);\r\n        setFlashColor('green');\r\n        setTimeout(() => setFlashColor(null), 300);\r\n        setTimeout(() => {\r\n          setSelectedCells([]);\r\n          setCurrentWord(\"\");\r\n        }, 350);\r\n      } else if (currentWord.length > 3 && !allWords.includes(currentWord)) {\r\n        setFlashColor('red');\r\n        setTimeout(() => setFlashColor(null), 300);\r\n        setTimeout(() => {\r\n          setSelectedCells([]);\r\n          setCurrentWord(\"\");\r\n        }, 350);\r\n      }\r\n    }\r\n  }, [currentWord]);\r\n\r\n  if (screen === 'welcome') {\r\n    return (\r\n      <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto', textAlign: 'center' }}>\r\n        <h1>Фундамент</h1>\r\n        <button style={{ margin: 12, padding: '12px 32px', fontSize: 18, cursor: 'pointer' }} onClick={() => {\r\n          // Генерируем поле и считаем количество слов\r\n          const words = getRandomWords(6, gameDictionary);\r\n          const board = generateBoard({ name: \"\", reward: \"\", words });\r\n          const allPossibleWords = findAllWordsOnBoard(board);\r\n          setLoadingMax(allPossibleWords.length);\r\n          setLoadingProgress(0);\r\n          setLoadingTimer(5);\r\n          setScreen('loading');\r\n        }}>Старт</button>\r\n        <button style={{ margin: 12, padding: '12px 32px', fontSize: 18, cursor: 'pointer' }} onClick={() => setScreen('help')}>Справка</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (screen === 'loading') {\r\n    return (\r\n      <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto', textAlign: 'center' }}>\r\n        <h2>Загрузка поля...</h2>\r\n        <div style={{ fontSize: 32, margin: '32px 0', color: '#1976d2', fontWeight: 700 }}>{loadingProgress}</div>\r\n        <div style={{ fontSize: 18, marginBottom: 12 }}>Будет доступно слов: {loadingMax}</div>\r\n        <div style={{ fontSize: 16, color: '#888' }}>Осталось секунд: {loadingTimer}</div>\r\n      </div>\r\n    );\r\n  }\r\n  if (screen === 'help') {\r\n    return (\r\n      <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto', textAlign: 'center' }}>\r\n        <h1>Фундамент</h1>\r\n        <div style={{ fontSize: 20, margin: '32px 0' }}>Справка будет добавлена позже.</div>\r\n        <button style={{ margin: 12, padding: '12px 32px', fontSize: 18, cursor: 'pointer' }} onClick={() => setScreen('welcome')}>Назад</button>\r\n      </div>\r\n    );\r\n  }\r\n  // Экран игры\r\n  return (\r\n    <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto' }}>\r\n      <h1>Фундамент</h1>\r\n      <div style={{ fontSize: 20, fontWeight: 600, marginBottom: 8 }}>\r\n        {phase === 'playing' ? uiStrings.игра.заголовок : uiStrings.результаты.заголовок}\r\n        {' '}\r\n        <span style={{ fontSize: 18, fontWeight: 400, color: '#1976d2' }}>\r\n          {timeLeft} сек.\r\n        </span>\r\n      </div>\r\n      <div style={{ minHeight: 32, color: message.includes(uiStrings.прочее.очков) ? 'green' : 'red', fontWeight: 500 }}>{message}</div>\r\n      <div style={{ marginBottom: 8 }}>{uiStrings.игра.очки}: {score}</div>\r\n      {/* ОТЛАДКА: выводим все возможные слова на этом поле */}\r\n      <div style={{ margin: '12px 0', padding: '8px', background: '#f5f5f5', borderRadius: 8, fontSize: 14, color: '#333', maxHeight: 120, overflowY: 'auto' }}>\r\n        <b>Все слова на поле ({usedWords.length}):</b>\r\n        <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8 }}>\r\n          {usedWords.map(word => (\r\n            <span key={word} style={{ background: '#e0e0e0', borderRadius: 4, padding: '2px 6px', margin: 2 }}>{word}</span>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <GameBoard \r\n        board={board} \r\n        selectedCells={selectedCells}\r\n        onPathComplete={phase === 'playing' ? handlePathComplete : undefined}\r\n        onDragUpdate={phase === 'playing' ? setSelectedCells : undefined}\r\n        flashColor={flashColor}\r\n      />\r\n      {phase === 'results' && (\r\n        <Results \r\n          foundWords={foundWords} \r\n          possibleWords={possibleWords} \r\n          leaderboard={leaderboard}\r\n          usedWords={usedWords}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
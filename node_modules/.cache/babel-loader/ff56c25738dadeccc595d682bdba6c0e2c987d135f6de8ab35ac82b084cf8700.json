{"ast":null,"code":"var _jsxFileName = \"C:\\\\vsc\\\\dament\\\\src\\\\GameBoard.tsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  board,\n  selectedCells = [],\n  onCellSelect,\n  flashColor\n}) => {\n  // Для удобства: получить координаты из flat-индекса\n  const getCoords = idx => [Math.floor(idx / 4), idx % 4];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(4, 48px)',\n      gap: 8\n    },\n    children: board.flat().map((letter, idx) => {\n      const [row, col] = getCoords(idx);\n      const isSelected = selectedCells.some(([r, c]) => r === row && c === col);\n      // Цвет фона: если моргает — зелёный/красный, иначе выбранные — синие\n      let bg = '#e0e0e0';\n      if (isSelected) bg = '#90caf9';\n      if (isSelected && flashColor === 'green') bg = '#a5d6a7';\n      if (isSelected && flashColor === 'red') bg = '#ef9a9a';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: 48,\n          height: 48,\n          background: bg,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          fontSize: 24,\n          borderRadius: 8,\n          cursor: onCellSelect ? 'pointer' : 'default',\n          transition: 'background 0.2s',\n          boxShadow: isSelected ? '0 0 0 2px #1976d2' : undefined\n        },\n        onClick: () => onCellSelect && onCellSelect(row, col),\n        onTouchStart: () => onCellSelect && onCellSelect(row, col),\n        children: letter\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","GameBoard","board","selectedCells","onCellSelect","flashColor","getCoords","idx","Math","floor","style","display","gridTemplateColumns","gap","children","flat","map","letter","row","col","isSelected","some","r","c","bg","width","height","background","alignItems","justifyContent","fontSize","borderRadius","cursor","transition","boxShadow","undefined","onClick","onTouchStart","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/vsc/dament/src/GameBoard.tsx"],"sourcesContent":["import React from \"react\";\r\n\r\ninterface GameBoardProps {\r\n  board: string[][];\r\n  selectedCells?: Array<[number, number]>;\r\n  onCellSelect?: (row: number, col: number) => void;\r\n  flashColor?: string | null; // 'green' | 'red' | null\r\n}\r\n\r\nconst GameBoard: React.FC<GameBoardProps> = ({ board, selectedCells = [], onCellSelect, flashColor }) => {\r\n  // Для удобства: получить координаты из flat-индекса\r\n  const getCoords = (idx: number) => [Math.floor(idx / 4), idx % 4] as [number, number];\r\n\r\n  return (\r\n    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(4, 48px)', gap: 8 }}>\r\n      {board.flat().map((letter, idx) => {\r\n        const [row, col] = getCoords(idx);\r\n        const isSelected = selectedCells.some(([r, c]) => r === row && c === col);\r\n        // Цвет фона: если моргает — зелёный/красный, иначе выбранные — синие\r\n        let bg = '#e0e0e0';\r\n        if (isSelected) bg = '#90caf9';\r\n        if (isSelected && flashColor === 'green') bg = '#a5d6a7';\r\n        if (isSelected && flashColor === 'red') bg = '#ef9a9a';\r\n        return (\r\n          <div\r\n            key={idx}\r\n            style={{\r\n              width: 48,\r\n              height: 48,\r\n              background: bg,\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              fontSize: 24,\r\n              borderRadius: 8,\r\n              cursor: onCellSelect ? 'pointer' : 'default',\r\n              transition: 'background 0.2s',\r\n              boxShadow: isSelected ? '0 0 0 2px #1976d2' : undefined\r\n            }}\r\n            onClick={() => onCellSelect && onCellSelect(row, col)}\r\n            onTouchStart={() => onCellSelect && onCellSelect(row, col)}\r\n          >\r\n            {letter}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS1B,MAAMC,SAAmC,GAAGA,CAAC;EAAEC,KAAK;EAAEC,aAAa,GAAG,EAAE;EAAEC,YAAY;EAAEC;AAAW,CAAC,KAAK;EACvG;EACA,MAAMC,SAAS,GAAIC,GAAW,IAAK,CAACC,IAAI,CAACC,KAAK,CAACF,GAAG,GAAG,CAAC,CAAC,EAAEA,GAAG,GAAG,CAAC,CAAqB;EAErF,oBACEP,OAAA;IAAKU,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,mBAAmB,EAAE,iBAAiB;MAAEC,GAAG,EAAE;IAAE,CAAE;IAAAC,QAAA,EAC7EZ,KAAK,CAACa,IAAI,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,MAAM,EAAEV,GAAG,KAAK;MACjC,MAAM,CAACW,GAAG,EAAEC,GAAG,CAAC,GAAGb,SAAS,CAACC,GAAG,CAAC;MACjC,MAAMa,UAAU,GAAGjB,aAAa,CAACkB,IAAI,CAAC,CAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,KAAKD,CAAC,KAAKJ,GAAG,IAAIK,CAAC,KAAKJ,GAAG,CAAC;MACzE;MACA,IAAIK,EAAE,GAAG,SAAS;MAClB,IAAIJ,UAAU,EAAEI,EAAE,GAAG,SAAS;MAC9B,IAAIJ,UAAU,IAAIf,UAAU,KAAK,OAAO,EAAEmB,EAAE,GAAG,SAAS;MACxD,IAAIJ,UAAU,IAAIf,UAAU,KAAK,KAAK,EAAEmB,EAAE,GAAG,SAAS;MACtD,oBACExB,OAAA;QAEEU,KAAK,EAAE;UACLe,KAAK,EAAE,EAAE;UACTC,MAAM,EAAE,EAAE;UACVC,UAAU,EAAEH,EAAE;UACdb,OAAO,EAAE,MAAM;UACfiB,UAAU,EAAE,QAAQ;UACpBC,cAAc,EAAE,QAAQ;UACxBC,QAAQ,EAAE,EAAE;UACZC,YAAY,EAAE,CAAC;UACfC,MAAM,EAAE5B,YAAY,GAAG,SAAS,GAAG,SAAS;UAC5C6B,UAAU,EAAE,iBAAiB;UAC7BC,SAAS,EAAEd,UAAU,GAAG,mBAAmB,GAAGe;QAChD,CAAE;QACFC,OAAO,EAAEA,CAAA,KAAMhC,YAAY,IAAIA,YAAY,CAACc,GAAG,EAAEC,GAAG,CAAE;QACtDkB,YAAY,EAAEA,CAAA,KAAMjC,YAAY,IAAIA,YAAY,CAACc,GAAG,EAAEC,GAAG,CAAE;QAAAL,QAAA,EAE1DG;MAAM,GAjBFV,GAAG;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAkBL,CAAC;IAEV,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACC,EAAA,GAvCIzC,SAAmC;AAyCzC,eAAeA,SAAS;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
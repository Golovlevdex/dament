{"ast":null,"code":"var _jsxFileName = \"C:\\\\vsc\\\\dament\\\\src\\\\BackWordBoard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport GameBoard from \"./GameBoard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Генерируем \"поле\" из одной строки с буквами слова\n\nfunction makeBoard(word) {\n  return [[...word].map((letter, idx) => ({\n    letter,\n    bonus: 'none',\n    row: 0,\n    col: idx\n  }))];\n}\nconst BackWordBoard = ({\n  word = \"НАЗАД\",\n  onPathComplete,\n  onDragUpdate,\n  selectedCells: externalSelected = [],\n  flashColor: externalFlashColor\n}) => {\n  _s();\n  const board = makeBoard(word);\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [flashColor, setFlashColor] = useState(null);\n\n  // Обработчик свайпа по плиткам \"НАЗАД\"\n  const handlePathComplete = path => {\n    // Проверяем, что проведены все буквы подряд слева направо\n    const isFullSwipe = path.length === word.length && path.every(([r, c], idx) => r === 0 && c === idx);\n    if (isFullSwipe) {\n      setFlashColor('green');\n      setTimeout(() => setFlashColor(null), 300);\n      setSelectedCells([]);\n      onPathComplete(path);\n    } else {\n      setFlashColor('red');\n      setTimeout(() => setFlashColor(null), 300);\n      setTimeout(() => setSelectedCells([]), 350);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      position: 'absolute',\n      left: 8,\n      top: 8,\n      zIndex: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(GameBoard, {\n      board: board,\n      selectedCells: selectedCells.length ? selectedCells : externalSelected,\n      onPathComplete: handlePathComplete,\n      onDragUpdate: setSelectedCells,\n      flashColor: flashColor || externalFlashColor,\n      columnsCount: word.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(BackWordBoard, \"gBUU5LqUQT7dtEobz3g75a7JvYY=\");\n_c = BackWordBoard;\nexport default BackWordBoard;\nvar _c;\n$RefreshReg$(_c, \"BackWordBoard\");","map":{"version":3,"names":["React","useState","GameBoard","jsxDEV","_jsxDEV","makeBoard","word","map","letter","idx","bonus","row","col","BackWordBoard","onPathComplete","onDragUpdate","selectedCells","externalSelected","flashColor","externalFlashColor","_s","board","setSelectedCells","setFlashColor","handlePathComplete","path","isFullSwipe","length","every","r","c","setTimeout","style","display","justifyContent","alignItems","position","left","top","zIndex","children","columnsCount","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/vsc/dament/src/BackWordBoard.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport GameBoard from \"./GameBoard\";\r\nimport { letterBonuses } from \"./anagramGenerator\";\r\n\r\ninterface BackWordBoardProps {\r\n  word?: string; // по умолчанию \"НАЗАД\"\r\n  onPathComplete: (path: Array<[number, number]>) => void;\r\n  onDragUpdate?: (path: Array<[number, number]>) => void;\r\n  selectedCells?: Array<[number, number]>;\r\n  flashColor?: string | null;\r\n}\r\n\r\n// Генерируем \"поле\" из одной строки с буквами слова\r\nimport { BonusType } from \"./anagramGenerator\";\r\nfunction makeBoard(word: string) {\r\n  return [\r\n    [...word].map((letter, idx) => ({\r\n      letter,\r\n      bonus: 'none' as BonusType,\r\n      row: 0,\r\n      col: idx\r\n    }))\r\n  ];\r\n}\r\n\r\n\r\nconst BackWordBoard: React.FC<BackWordBoardProps> = ({\r\n  word = \"НАЗАД\",\r\n  onPathComplete,\r\n  onDragUpdate,\r\n  selectedCells: externalSelected = [],\r\n  flashColor: externalFlashColor\r\n}) => {\r\n  const board = makeBoard(word);\r\n  const [selectedCells, setSelectedCells] = useState<Array<[number, number]>>([]);\r\n  const [flashColor, setFlashColor] = useState<string | null>(null);\r\n\r\n  // Обработчик свайпа по плиткам \"НАЗАД\"\r\n  const handlePathComplete = (path: Array<[number, number]>) => {\r\n    // Проверяем, что проведены все буквы подряд слева направо\r\n    const isFullSwipe = path.length === word.length && path.every(([r, c], idx) => r === 0 && c === idx);\r\n    if (isFullSwipe) {\r\n      setFlashColor('green');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setSelectedCells([]);\r\n      onPathComplete(path);\r\n    } else {\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => setSelectedCells([]), 350);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', position: 'absolute', left: 8, top: 8, zIndex: 2 }}>\r\n      <GameBoard\r\n        board={board}\r\n        selectedCells={selectedCells.length ? selectedCells : externalSelected}\r\n        onPathComplete={handlePathComplete}\r\n        onDragUpdate={setSelectedCells}\r\n        flashColor={flashColor || externalFlashColor}\r\n        columnsCount={word.length}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BackWordBoard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAWpC;;AAEA,SAASC,SAASA,CAACC,IAAY,EAAE;EAC/B,OAAO,CACL,CAAC,GAAGA,IAAI,CAAC,CAACC,GAAG,CAAC,CAACC,MAAM,EAAEC,GAAG,MAAM;IAC9BD,MAAM;IACNE,KAAK,EAAE,MAAmB;IAC1BC,GAAG,EAAE,CAAC;IACNC,GAAG,EAAEH;EACP,CAAC,CAAC,CAAC,CACJ;AACH;AAGA,MAAMI,aAA2C,GAAGA,CAAC;EACnDP,IAAI,GAAG,OAAO;EACdQ,cAAc;EACdC,YAAY;EACZC,aAAa,EAAEC,gBAAgB,GAAG,EAAE;EACpCC,UAAU,EAAEC;AACd,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,KAAK,GAAGhB,SAAS,CAACC,IAAI,CAAC;EAC7B,MAAM,CAACU,aAAa,EAAEM,gBAAgB,CAAC,GAAGrB,QAAQ,CAA0B,EAAE,CAAC;EAC/E,MAAM,CAACiB,UAAU,EAAEK,aAAa,CAAC,GAAGtB,QAAQ,CAAgB,IAAI,CAAC;;EAEjE;EACA,MAAMuB,kBAAkB,GAAIC,IAA6B,IAAK;IAC5D;IACA,MAAMC,WAAW,GAAGD,IAAI,CAACE,MAAM,KAAKrB,IAAI,CAACqB,MAAM,IAAIF,IAAI,CAACG,KAAK,CAAC,CAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,EAAErB,GAAG,KAAKoB,CAAC,KAAK,CAAC,IAAIC,CAAC,KAAKrB,GAAG,CAAC;IACpG,IAAIiB,WAAW,EAAE;MACfH,aAAa,CAAC,OAAO,CAAC;MACtBQ,UAAU,CAAC,MAAMR,aAAa,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC;MAC1CD,gBAAgB,CAAC,EAAE,CAAC;MACpBR,cAAc,CAACW,IAAI,CAAC;IACtB,CAAC,MAAM;MACLF,aAAa,CAAC,KAAK,CAAC;MACpBQ,UAAU,CAAC,MAAMR,aAAa,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC;MAC1CQ,UAAU,CAAC,MAAMT,gBAAgB,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC;IAC7C;EACF,CAAC;EAED,oBACElB,OAAA;IAAK4B,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,cAAc,EAAE,QAAQ;MAAEC,UAAU,EAAE,QAAQ;MAAEC,QAAQ,EAAE,UAAU;MAAEC,IAAI,EAAE,CAAC;MAAEC,GAAG,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAE;IAAAC,QAAA,eAChIpC,OAAA,CAACF,SAAS;MACRmB,KAAK,EAAEA,KAAM;MACbL,aAAa,EAAEA,aAAa,CAACW,MAAM,GAAGX,aAAa,GAAGC,gBAAiB;MACvEH,cAAc,EAAEU,kBAAmB;MACnCT,YAAY,EAAEO,gBAAiB;MAC/BJ,UAAU,EAAEA,UAAU,IAAIC,kBAAmB;MAC7CsB,YAAY,EAAEnC,IAAI,CAACqB;IAAO;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACzB,EAAA,CAvCIP,aAA2C;AAAAiC,EAAA,GAA3CjC,aAA2C;AAyCjD,eAAeA,aAAa;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
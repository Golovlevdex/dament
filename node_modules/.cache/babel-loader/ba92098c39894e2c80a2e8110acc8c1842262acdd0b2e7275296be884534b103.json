{"ast":null,"code":"var _jsxFileName = \"C:\\\\vsc\\\\dament\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport GameBoard from \"./GameBoard\";\n// import WordInput from \"./WordInput\";\nimport Results from \"./Results\";\n// Импортируем игровую логику\nimport { generateBoard, findAllWordsOnBoard, ROUND_DURATION, PAUSE_DURATION, letterBonuses } from \"./anagramGenerator\";\nimport { isWordInDictionary, gameDictionary } from \"./dictionary\";\nimport uiStrings from './ui-strings-categorized.json';\nimport { canFormWordOnBoard } from \"./anagramGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getRandomWords = (count, dictionary) => {\n  const shuffled = [...dictionary].sort(() => Math.random() - 0.5);\n  return shuffled.slice(0, count);\n};\nconst App = () => {\n  _s();\n  const [screen, setScreen] = useState('welcome');\n  // Для свайп-старта\n  const START_WORD = 'СТАРТ';\n  // Слово СТАРТ в одну горизонтальную линию (1x5)\n  const startBoard = [[...START_WORD].map((letter, idx) => ({\n    letter,\n    bonus: 'none',\n    row: 0,\n    col: idx\n  }))];\n  const [startFlashColor, setStartFlashColor] = useState(null);\n  const [startSelected, setStartSelected] = useState([]);\n  const [loadingProgress, setLoadingProgress] = useState(0);\n  const [loadingMax, setLoadingMax] = useState(0);\n  const [loadingTimer, setLoadingTimer] = useState(5);\n  const [usedWords, setUsedWords] = useState([]);\n  // Параметры генерации\n  const FIELD_SIZE = 4; // размер поля (4x4)\n  const MIN_WORDS = 15; // минимальное количество слов (снизили с 20)\n  const MAX_ATTEMPTS = 500; // увеличили количество попыток\n\n  const [board, setBoard] = useState(() => {\n    // Новый генератор: ищем поле с максимальным количеством слов\n    let bestBoard = null;\n    let bestWords = [];\n    let maxWords = 0;\n\n    // Создаём список частых букв из словаря для лучшей генерации\n    const allLetters = gameDictionary.join('').toUpperCase().split('');\n    const letterFreq = {};\n    allLetters.forEach(letter => letterFreq[letter] = (letterFreq[letter] || 0) + 1);\n    const frequentLetters = Object.keys(letterFreq).sort((a, b) => letterFreq[b] - letterFreq[a]);\n\n    // Анализируем длинные слова для получения хороших комбинаций букв\n    const longWords = gameDictionary.filter(word => word.length >= 5 && word.length <= 8);\n    const longWordLetters = [];\n    longWords.slice(0, 50).forEach(word => {\n      // берём первые 50 длинных слов\n      longWordLetters.push(...word.toUpperCase().split(''));\n    });\n    console.log(\"Генерируем поле, попыток:\", MAX_ATTEMPTS);\n    for (let attempts = 0; attempts < MAX_ATTEMPTS; attempts++) {\n      // Генерируем поле с учётом частоты букв и длинных слов\n      const letters = [];\n      for (let i = 0; i < FIELD_SIZE * FIELD_SIZE; i++) {\n        const rand = Math.random();\n        if (rand < 0.3 && longWordLetters.length > 0) {\n          // 30% - буквы из длинных слов\n          const longIndex = Math.floor(Math.random() * longWordLetters.length);\n          letters.push(longWordLetters[longIndex]);\n        } else if (rand < 0.8) {\n          // 50% - частые буквы\n          const freqIndex = Math.floor(Math.random() * Math.min(10, frequentLetters.length));\n          letters.push(frequentLetters[freqIndex]);\n        } else {\n          // 20% - случайные буквы\n          const randIndex = Math.floor(Math.random() * frequentLetters.length);\n          letters.push(frequentLetters[randIndex]);\n        }\n      }\n\n      // Преобразуем в матрицу Cell[][] с бонусами\n      const matrix = [];\n      for (let r = 0; r < FIELD_SIZE; r++) {\n        matrix.push(letters.slice(r * FIELD_SIZE, (r + 1) * FIELD_SIZE).map((letter, c) => {\n          let rawBonus = letterBonuses[letter.toUpperCase()];\n          let bonus = typeof rawBonus === 'string' ? rawBonus : 'none';\n          return {\n            letter,\n            row: r,\n            col: c,\n            bonus\n          };\n        }));\n      }\n      // Находим все слова\n      const possibleWords = findAllWordsOnBoard(matrix);\n      if (possibleWords.length > maxWords) {\n        bestBoard = matrix;\n        bestWords = possibleWords;\n        maxWords = possibleWords.length;\n        console.log(`Попытка ${attempts}: найдено ${maxWords} слов`);\n        // Если нашли поле с достаточным количеством слов — сразу используем\n        if (maxWords >= MIN_WORDS) {\n          console.log(\"Достигнуто минимальное количество слов, выбираем это поле\");\n          break;\n        }\n      }\n    }\n    console.log(`Финальное поле: ${maxWords} слов`);\n    setUsedWords(bestWords);\n\n    // Если не удалось — возвращаем случайное поле\n    if (!bestBoard) {\n      console.log(\"Не удалось найти поле с нужным количеством слов, генерируем случайное\");\n      const letters = [];\n      for (let i = 0; i < FIELD_SIZE * FIELD_SIZE; i++) {\n        const randIndex = Math.floor(Math.random() * gameDictionary.join('').length);\n        letters.push(gameDictionary.join('')[randIndex]);\n      }\n      const matrix = [];\n      for (let r = 0; r < FIELD_SIZE; r++) {\n        matrix.push(letters.slice(r * FIELD_SIZE, (r + 1) * FIELD_SIZE).map((letter, c) => {\n          let rawBonus = letterBonuses[letter.toUpperCase()];\n          let bonus = typeof rawBonus === 'string' ? rawBonus : 'none';\n          return {\n            letter,\n            row: r,\n            col: c,\n            bonus\n          };\n        }));\n      }\n      return matrix;\n    }\n    return bestBoard;\n  });\n  const [timeLeft, setTimeLeft] = useState(ROUND_DURATION);\n  const [foundWords, setFoundWords] = useState([]);\n  const [score, setScore] = useState(0);\n  const [message, setMessage] = useState(\"\");\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [currentWord, setCurrentWord] = useState(\"\");\n  const [flashColor, setFlashColor] = useState(null);\n  const [phase, setPhase] = useState('playing');\n  const [possibleWords, setPossibleWords] = useState([]);\n  const leaderboard = [{\n    name: \"Вы\",\n    score\n  }];\n\n  // useEffect для анимации загрузки (теперь строго после всех useState)\n  useEffect(() => {\n    if (screen === 'loading' && loadingProgress < loadingMax && loadingTimer > 0) {\n      const step = Math.ceil(loadingMax / (loadingTimer * 20));\n      const interval = setInterval(() => {\n        setLoadingProgress(prev => Math.min(prev + step, loadingMax));\n      }, 50);\n      return () => clearInterval(interval);\n    }\n  }, [screen, loadingProgress, loadingMax, loadingTimer]);\n  useEffect(() => {\n    if (screen === 'loading' && loadingTimer > 0) {\n      const timer = setTimeout(() => setLoadingTimer(loadingTimer - 1), 1000);\n      return () => clearTimeout(timer);\n    } else if (screen === 'loading' && loadingTimer === 0) {\n      setScreen('game');\n    }\n  }, [screen, loadingTimer]);\n\n  // useEffect для анимации загрузки\n  useEffect(() => {\n    if (screen === 'loading' && loadingProgress < loadingMax && loadingTimer > 0) {\n      const step = Math.ceil(loadingMax / (loadingTimer * 20));\n      const interval = setInterval(() => {\n        setLoadingProgress(prev => Math.min(prev + step, loadingMax));\n      }, 50);\n      return () => clearInterval(interval);\n    }\n  }, [screen, loadingProgress, loadingMax, loadingTimer]);\n  useEffect(() => {\n    if (screen === 'loading' && loadingTimer > 0) {\n      const timer = setTimeout(() => setLoadingTimer(loadingTimer - 1), 1000);\n      return () => clearTimeout(timer);\n    } else if (screen === 'loading' && loadingTimer === 0) {\n      setScreen('game');\n    }\n  }, [screen, loadingTimer]);\n\n  // Таймер\n  useEffect(() => {\n    if (phase === 'playing' && timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n    if (phase === 'playing' && timeLeft === 0) {\n      setPossibleWords(usedWords.filter(word => word.length >= 3 && canFormWordOnBoard(word, board)));\n      setSelectedCells([]);\n      setCurrentWord(\"\");\n      setPhase('results');\n      setTimeLeft(3); // 3 секунды на результаты (можно увеличить)\n    }\n    if (phase === 'results' && timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n    if (phase === 'results' && timeLeft === 0) {\n      setPhase('analyzer');\n      setTimeLeft(PAUSE_DURATION); // 15 секунд анализатор\n    }\n    if (phase === 'analyzer' && timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n    if (phase === 'analyzer' && timeLeft === 0) {\n      // Новый раунд\n      const words = getRandomWords(6, gameDictionary);\n      const board = generateBoard({\n        name: \"\",\n        reward: \"\",\n        words\n      });\n      const allPossibleWords = findAllWordsOnBoard(board).filter(word => word.length >= 3);\n      setUsedWords(allPossibleWords);\n      setBoard(board);\n      setFoundWords([]);\n      setPhase('playing');\n      setTimeLeft(ROUND_DURATION);\n    }\n  }, [timeLeft, phase, board]);\n\n  // Обработка завершения пути (свайп/drag)\n  const handlePathComplete = path => {\n    if (path.length < 3) {\n      setMessage(uiStrings.ошибки.минимумБукв);\n      setFlashColor('red');\n      setTimeout(() => setFlashColor(null), 300);\n      setTimeout(() => {\n        setMessage(\"\");\n        setSelectedCells([]);\n        setCurrentWord(\"\");\n      }, 350);\n      return;\n    }\n    const word = path.map(([r, c]) => board[r][c].letter).join(\"\");\n    const allWords = findAllWordsOnBoard(board).filter(word => word.length >= 3);\n    if (foundWords.includes(word)) {\n      setMessage(uiStrings.ошибки.ужеВводилось);\n      setFlashColor('red');\n      setTimeout(() => setFlashColor(null), 300);\n      setTimeout(() => {\n        setMessage(\"\");\n        setSelectedCells([]);\n        setCurrentWord(\"\");\n      }, 350);\n      return;\n    }\n    if (!allWords.includes(word) || !isWordInDictionary(word)) {\n      setMessage(uiStrings.ошибки.нетСлова);\n      setFlashColor('red');\n      setTimeout(() => setFlashColor(null), 300);\n      setTimeout(() => {\n        setMessage(\"\");\n        setSelectedCells([]);\n        setCurrentWord(\"\");\n      }, 350);\n      return;\n    }\n    // Подсчёт очков по бонусам букв\n    let wordScore = 0;\n    path.forEach(([r, c]) => {\n      const letter = board[r][c].letter.toUpperCase();\n      wordScore += letterBonuses[letter] || 0;\n    });\n    setScore(score + wordScore);\n    setFoundWords([...foundWords, word]);\n    setMessage(`+${wordScore} очков`);\n    setFlashColor('green');\n    setTimeout(() => setFlashColor(null), 300);\n    setTimeout(() => {\n      setMessage(\"\");\n      setSelectedCells([]);\n      setCurrentWord(\"\");\n    }, 350);\n  };\n\n  // Проверка слова при завершении выбора (например, тап по последней клетке или авто)\n  useEffect(() => {\n    // Проверяем только если длина слова >= 3\n    if (currentWord.length >= 3) {\n      // Проверяем, есть ли слово в возможных\n      const allWords = findAllWordsOnBoard(board);\n      if (allWords.includes(currentWord) && !foundWords.includes(currentWord)) {\n        setFoundWords([...foundWords, currentWord]);\n        setFlashColor('green');\n        setTimeout(() => setFlashColor(null), 300);\n        setTimeout(() => {\n          setSelectedCells([]);\n          setCurrentWord(\"\");\n        }, 350);\n      } else if (currentWord.length > 3 && !allWords.includes(currentWord)) {\n        setFlashColor('red');\n        setTimeout(() => setFlashColor(null), 300);\n        setTimeout(() => {\n          setSelectedCells([]);\n          setCurrentWord(\"\");\n        }, 350);\n      }\n    }\n  }, [currentWord]);\n  if (screen === 'welcome') {\n    // Свайп-старт по слову СТАРТ\n    const handleStartPath = path => {\n      const word = path.map(([r, c]) => startBoard[r][c].letter).join(\"\");\n      if (word === START_WORD) {\n        setStartFlashColor('green');\n        setTimeout(() => {\n          // Генерируем поле и считаем количество слов\n          const words = getRandomWords(6, gameDictionary);\n          const board = generateBoard({\n            name: \"\",\n            reward: \"\",\n            words\n          });\n          const allPossibleWords = findAllWordsOnBoard(board);\n          setLoadingMax(allPossibleWords.length);\n          setLoadingProgress(0);\n          setLoadingTimer(5);\n          setScreen('loading');\n          setStartSelected([]);\n          setStartFlashColor(null);\n        }, 350);\n      } else {\n        setStartFlashColor('red');\n        setTimeout(() => {\n          setStartSelected([]);\n          setStartFlashColor(null);\n        }, 350);\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: 'sans-serif',\n        padding: 24,\n        maxWidth: 600,\n        margin: '0 auto',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0424\\u0443\\u043D\\u0434\\u0430\\u043C\\u0435\\u043D\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          margin: '32px 0 16px 0'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            minWidth: 260\n          },\n          children: /*#__PURE__*/_jsxDEV(GameBoard, {\n            board: startBoard,\n            selectedCells: startSelected,\n            onPathComplete: handleStartPath,\n            onDragUpdate: setStartSelected,\n            flashColor: startFlashColor,\n            columnsCount: START_WORD.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: 16,\n          color: '#888',\n          marginBottom: 32\n        },\n        children: \"\\u041F\\u0440\\u043E\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043F\\u043E \\u0431\\u0443\\u043A\\u0432\\u0430\\u043C, \\u0447\\u0442\\u043E\\u0431\\u044B \\u043D\\u0430\\u0447\\u0430\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          margin: 12,\n          padding: '12px 32px',\n          fontSize: 18,\n          cursor: 'pointer'\n        },\n        onClick: () => setScreen('help'),\n        children: \"\\u0421\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this);\n  }\n  if (screen === 'loading') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: 'sans-serif',\n        padding: 24,\n        maxWidth: 600,\n        margin: '0 auto',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u043F\\u043E\\u043B\\u044F...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: 32,\n          margin: '32px 0',\n          color: '#1976d2',\n          fontWeight: 700\n        },\n        children: loadingProgress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: 18,\n          marginBottom: 12\n        },\n        children: [\"\\u0411\\u0443\\u0434\\u0435\\u0442 \\u0434\\u043E\\u0441\\u0442\\u0443\\u043F\\u043D\\u043E \\u0441\\u043B\\u043E\\u0432: \", loadingMax]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: 16,\n          color: '#888'\n        },\n        children: [\"\\u041E\\u0441\\u0442\\u0430\\u043B\\u043E\\u0441\\u044C \\u0441\\u0435\\u043A\\u0443\\u043D\\u0434: \", loadingTimer]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this);\n  }\n  if (screen === 'help') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: 'sans-serif',\n        padding: 24,\n        maxWidth: 600,\n        margin: '0 auto',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0424\\u0443\\u043D\\u0434\\u0430\\u043C\\u0435\\u043D\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: 20,\n          margin: '32px 0'\n        },\n        children: \"\\u0421\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430 \\u0431\\u0443\\u0434\\u0435\\u0442 \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u0430 \\u043F\\u043E\\u0437\\u0436\\u0435.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          margin: 12,\n          padding: '12px 32px',\n          fontSize: 18,\n          cursor: 'pointer'\n        },\n        onClick: () => setScreen('welcome'),\n        children: \"\\u041D\\u0430\\u0437\\u0430\\u0434\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 7\n    }, this);\n  }\n  // Экран игры и анализатора\n  if (phase === 'analyzer') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: 'sans-serif',\n        padding: 24,\n        maxWidth: 600,\n        margin: '0 auto',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0410\\u043D\\u0430\\u043B\\u0438\\u0437\\u0430\\u0442\\u043E\\u0440 \\u043F\\u043E\\u043B\\u044F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: 18,\n          margin: '16px 0'\n        },\n        children: [\"\\u041D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E \\u0441\\u043B\\u043E\\u0432: \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: usedWords.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 71\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: 16,\n          color: '#1976d2',\n          marginBottom: 12\n        },\n        children: [\"\\u0414\\u043E \\u043D\\u0430\\u0447\\u0430\\u043B\\u0430 \\u0438\\u0433\\u0440\\u044B: \", timeLeft, \" \\u0441\\u0435\\u043A.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '12px 0',\n          padding: '8px',\n          background: '#f5f5f5',\n          borderRadius: 8,\n          fontSize: 14,\n          color: '#333',\n          maxHeight: 120,\n          overflowY: 'auto'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"\\u0412\\u0441\\u0435 \\u0441\\u043B\\u043E\\u0432\\u0430 \\u043D\\u0430 \\u043F\\u043E\\u043B\\u0435:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            gap: 8\n          },\n          children: usedWords.map(word => /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              background: '#e0e0e0',\n              borderRadius: 4,\n              padding: '2px 6px',\n              margin: 2\n            },\n            children: word\n          }, word, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 7\n    }, this);\n  }\n  // Экран игры\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontFamily: 'sans-serif',\n      padding: 24,\n      maxWidth: 600,\n      margin: '0 auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0424\\u0443\\u043D\\u0434\\u0430\\u043C\\u0435\\u043D\\u0442\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: 20,\n        fontWeight: 600,\n        marginBottom: 8\n      },\n      children: [phase === 'playing' ? uiStrings.игра.заголовок : uiStrings.результаты.заголовок, ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontSize: 18,\n          fontWeight: 400,\n          color: '#1976d2'\n        },\n        children: [timeLeft, \" \\u0441\\u0435\\u043A.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        minHeight: 32,\n        color: message.includes(uiStrings.прочее.очков) ? 'green' : 'red',\n        fontWeight: 500\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 8\n      },\n      children: [uiStrings.игра.очки, \": \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '12px 0',\n        padding: '8px',\n        background: '#f5f5f5',\n        borderRadius: 8,\n        fontSize: 14,\n        color: '#333',\n        maxHeight: 120,\n        overflowY: 'auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\"\\u0412\\u0441\\u0435 \\u0441\\u043B\\u043E\\u0432\\u0430 \\u043D\\u0430 \\u043F\\u043E\\u043B\\u0435 (\", usedWords.length, \"):\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: 8\n        },\n        children: usedWords.map(word => /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            background: '#e0e0e0',\n            borderRadius: 4,\n            padding: '2px 6px',\n            margin: 2\n          },\n          children: word\n        }, word, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n      board: board,\n      selectedCells: selectedCells,\n      onPathComplete: phase === 'playing' ? handlePathComplete : undefined,\n      onDragUpdate: phase === 'playing' ? setSelectedCells : undefined,\n      flashColor: flashColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 7\n    }, this), phase === 'results' && /*#__PURE__*/_jsxDEV(Results, {\n      foundWords: foundWords,\n      possibleWords: possibleWords,\n      leaderboard: leaderboard,\n      usedWords: usedWords\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 382,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"w+0Jj8Qg7d6RDu7QU6Zf9INJlAs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","GameBoard","Results","generateBoard","findAllWordsOnBoard","ROUND_DURATION","PAUSE_DURATION","letterBonuses","isWordInDictionary","gameDictionary","uiStrings","canFormWordOnBoard","jsxDEV","_jsxDEV","getRandomWords","count","dictionary","shuffled","sort","Math","random","slice","App","_s","screen","setScreen","START_WORD","startBoard","map","letter","idx","bonus","row","col","startFlashColor","setStartFlashColor","startSelected","setStartSelected","loadingProgress","setLoadingProgress","loadingMax","setLoadingMax","loadingTimer","setLoadingTimer","usedWords","setUsedWords","FIELD_SIZE","MIN_WORDS","MAX_ATTEMPTS","board","setBoard","bestBoard","bestWords","maxWords","allLetters","join","toUpperCase","split","letterFreq","forEach","frequentLetters","Object","keys","a","b","longWords","filter","word","length","longWordLetters","push","console","log","attempts","letters","i","rand","longIndex","floor","freqIndex","min","randIndex","matrix","r","c","rawBonus","possibleWords","timeLeft","setTimeLeft","foundWords","setFoundWords","score","setScore","message","setMessage","selectedCells","setSelectedCells","currentWord","setCurrentWord","flashColor","setFlashColor","phase","setPhase","setPossibleWords","leaderboard","name","step","ceil","interval","setInterval","prev","clearInterval","timer","setTimeout","clearTimeout","words","reward","allPossibleWords","handlePathComplete","path","ошибки","минимумБукв","allWords","includes","ужеВводилось","нетСлова","wordScore","handleStartPath","style","fontFamily","padding","maxWidth","margin","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","minWidth","onPathComplete","onDragUpdate","columnsCount","fontSize","color","marginBottom","cursor","onClick","fontWeight","background","borderRadius","maxHeight","overflowY","flexWrap","gap","игра","заголовок","результаты","minHeight","прочее","очков","очки","undefined","_c","$RefreshReg$"],"sources":["C:/vsc/dament/src/App.tsx"],"sourcesContent":["\r\nimport React, { useState, useEffect } from \"react\";\r\nimport type { Cell as CellType } from \"./anagramGenerator\";\r\nimport GameBoard from \"./GameBoard\";\r\nimport Timer from \"./Timer\";\r\n// import WordInput from \"./WordInput\";\r\nimport Results from \"./Results\";\r\n// Импортируем игровую логику\r\nimport { generateBoard, findAllWordsOnBoard, ROUND_DURATION, PAUSE_DURATION, Cell, letterBonuses } from \"./anagramGenerator\";\r\nimport { BonusType } from \"./anagramGenerator\";\r\nimport { isWordInDictionary, gameDictionary } from \"./dictionary\";\r\nimport uiStrings from './ui-strings-categorized.json';\r\nimport { canFormWordOnBoard } from \"./anagramGenerator\";\r\n\r\n\r\n\r\nconst getRandomWords = (count: number, dictionary: string[]): string[] => {\r\n  const shuffled = [...dictionary].sort(() => Math.random() - 0.5);\r\n  return shuffled.slice(0, count);\r\n};\r\n\r\nconst App: React.FC = () => {\r\n  const [screen, setScreen] = useState<'welcome' | 'loading' | 'game' | 'help'>('welcome');\r\n  // Для свайп-старта\r\n  const START_WORD = 'СТАРТ';\r\n  // Слово СТАРТ в одну горизонтальную линию (1x5)\r\n  const startBoard: CellType[][] = [\r\n    [...START_WORD].map((letter, idx) => ({ letter, bonus: 'none', row: 0, col: idx }))\r\n  ];\r\n  const [startFlashColor, setStartFlashColor] = useState<string | null>(null);\r\n  const [startSelected, setStartSelected] = useState<Array<[number, number]>>([]);\r\n  const [loadingProgress, setLoadingProgress] = useState<number>(0);\r\n  const [loadingMax, setLoadingMax] = useState<number>(0);\r\n  const [loadingTimer, setLoadingTimer] = useState<number>(5);\r\n  const [usedWords, setUsedWords] = useState<string[]>([]);\r\n  // Параметры генерации\r\n  const FIELD_SIZE = 4; // размер поля (4x4)\r\n  const MIN_WORDS = 15; // минимальное количество слов (снизили с 20)\r\n  const MAX_ATTEMPTS = 500; // увеличили количество попыток\r\n\r\n  const [board, setBoard] = useState<Cell[][]>(() => {\r\n    // Новый генератор: ищем поле с максимальным количеством слов\r\n    let bestBoard: Cell[][] | null = null;\r\n    let bestWords: string[] = [];\r\n    let maxWords = 0;\r\n    \r\n    // Создаём список частых букв из словаря для лучшей генерации\r\n    const allLetters = gameDictionary.join('').toUpperCase().split('');\r\n    const letterFreq: Record<string, number> = {};\r\n    allLetters.forEach(letter => letterFreq[letter] = (letterFreq[letter] || 0) + 1);\r\n    const frequentLetters = Object.keys(letterFreq).sort((a, b) => letterFreq[b] - letterFreq[a]);\r\n    \r\n    // Анализируем длинные слова для получения хороших комбинаций букв\r\n    const longWords = gameDictionary.filter(word => word.length >= 5 && word.length <= 8);\r\n    const longWordLetters: string[] = [];\r\n    longWords.slice(0, 50).forEach(word => { // берём первые 50 длинных слов\r\n      longWordLetters.push(...word.toUpperCase().split(''));\r\n    });\r\n    \r\n    console.log(\"Генерируем поле, попыток:\", MAX_ATTEMPTS);\r\n    \r\n    for (let attempts = 0; attempts < MAX_ATTEMPTS; attempts++) {\r\n      // Генерируем поле с учётом частоты букв и длинных слов\r\n      const letters: string[] = [];\r\n      for (let i = 0; i < FIELD_SIZE * FIELD_SIZE; i++) {\r\n        const rand = Math.random();\r\n        if (rand < 0.3 && longWordLetters.length > 0) {\r\n          // 30% - буквы из длинных слов\r\n          const longIndex = Math.floor(Math.random() * longWordLetters.length);\r\n          letters.push(longWordLetters[longIndex]);\r\n        } else if (rand < 0.8) {\r\n          // 50% - частые буквы\r\n          const freqIndex = Math.floor(Math.random() * Math.min(10, frequentLetters.length));\r\n          letters.push(frequentLetters[freqIndex]);\r\n        } else {\r\n          // 20% - случайные буквы\r\n          const randIndex = Math.floor(Math.random() * frequentLetters.length);\r\n          letters.push(frequentLetters[randIndex]);\r\n        }\r\n      }\r\n      \r\n      // Преобразуем в матрицу Cell[][] с бонусами\r\n      const matrix: Cell[][] = [];\r\n      for (let r = 0; r < FIELD_SIZE; r++) {\r\n        matrix.push(letters.slice(r * FIELD_SIZE, (r + 1) * FIELD_SIZE).map((letter, c) => {\r\n          let rawBonus = letterBonuses[letter.toUpperCase()];\r\n          let bonus: BonusType = typeof rawBonus === 'string' ? rawBonus : 'none';\r\n          return {\r\n            letter,\r\n            row: r,\r\n            col: c,\r\n            bonus\r\n          };\r\n        }));\r\n      }\r\n      // Находим все слова\r\n      const possibleWords: string[] = findAllWordsOnBoard(matrix);\r\n      if (possibleWords.length > maxWords) {\r\n        bestBoard = matrix;\r\n        bestWords = possibleWords;\r\n        maxWords = possibleWords.length;\r\n        console.log(`Попытка ${attempts}: найдено ${maxWords} слов`);\r\n        // Если нашли поле с достаточным количеством слов — сразу используем\r\n        if (maxWords >= MIN_WORDS) {\r\n          console.log(\"Достигнуто минимальное количество слов, выбираем это поле\");\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(`Финальное поле: ${maxWords} слов`);\r\n    setUsedWords(bestWords);\r\n    \r\n    // Если не удалось — возвращаем случайное поле\r\n    if (!bestBoard) {\r\n      console.log(\"Не удалось найти поле с нужным количеством слов, генерируем случайное\");\r\n      const letters: string[] = [];\r\n      for (let i = 0; i < FIELD_SIZE * FIELD_SIZE; i++) {\r\n        const randIndex = Math.floor(Math.random() * gameDictionary.join('').length);\r\n        letters.push(gameDictionary.join('')[randIndex]);\r\n      }\r\n      const matrix: Cell[][] = [];\r\n      for (let r = 0; r < FIELD_SIZE; r++) {\r\n        matrix.push(letters.slice(r * FIELD_SIZE, (r + 1) * FIELD_SIZE).map((letter, c) => {\r\n          let rawBonus = letterBonuses[letter.toUpperCase()];\r\n          let bonus: BonusType = typeof rawBonus === 'string' ? rawBonus : 'none';\r\n          return {\r\n            letter,\r\n            row: r,\r\n            col: c,\r\n            bonus\r\n          };\r\n        }));\r\n      }\r\n      return matrix;\r\n    }\r\n    return bestBoard;\r\n  });\r\n  const [timeLeft, setTimeLeft] = useState<number>(ROUND_DURATION);\r\n  const [foundWords, setFoundWords] = useState<string[]>([]);\r\n  const [score, setScore] = useState<number>(0);\r\n  const [message, setMessage] = useState<string>(\"\");\r\n  const [selectedCells, setSelectedCells] = useState<Array<[number, number]>>([]);\r\n  const [currentWord, setCurrentWord] = useState<string>(\"\");\r\n  const [flashColor, setFlashColor] = useState<string | null>(null);\r\n  const [phase, setPhase] = useState<'playing' | 'results' | 'analyzer'>('playing');\r\n  const [possibleWords, setPossibleWords] = useState<string[]>([]);\r\n  const leaderboard = [\r\n    { name: \"Вы\", score }\r\n  ];\r\n\r\n  // useEffect для анимации загрузки (теперь строго после всех useState)\r\n  useEffect(() => {\r\n    if (screen === 'loading' && loadingProgress < loadingMax && loadingTimer > 0) {\r\n      const step = Math.ceil(loadingMax / (loadingTimer * 20));\r\n      const interval = setInterval(() => {\r\n        setLoadingProgress(prev => Math.min(prev + step, loadingMax));\r\n      }, 50);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [screen, loadingProgress, loadingMax, loadingTimer]);\r\n\r\n  useEffect(() => {\r\n    if (screen === 'loading' && loadingTimer > 0) {\r\n      const timer = setTimeout(() => setLoadingTimer(loadingTimer - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    } else if (screen === 'loading' && loadingTimer === 0) {\r\n      setScreen('game');\r\n    }\r\n  }, [screen, loadingTimer]);\r\n\r\n  // useEffect для анимации загрузки\r\n  useEffect(() => {\r\n    if (screen === 'loading' && loadingProgress < loadingMax && loadingTimer > 0) {\r\n      const step = Math.ceil(loadingMax / (loadingTimer * 20));\r\n      const interval = setInterval(() => {\r\n        setLoadingProgress(prev => Math.min(prev + step, loadingMax));\r\n      }, 50);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [screen, loadingProgress, loadingMax, loadingTimer]);\r\n\r\n  useEffect(() => {\r\n    if (screen === 'loading' && loadingTimer > 0) {\r\n      const timer = setTimeout(() => setLoadingTimer(loadingTimer - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    } else if (screen === 'loading' && loadingTimer === 0) {\r\n      setScreen('game');\r\n    }\r\n  }, [screen, loadingTimer]);\r\n\r\n  // Таймер\r\n  useEffect(() => {\r\n    if (phase === 'playing' && timeLeft > 0) {\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'playing' && timeLeft === 0) {\r\n      setPossibleWords(usedWords.filter(word => word.length >= 3 && canFormWordOnBoard(word, board)));\r\n      setSelectedCells([]);\r\n      setCurrentWord(\"\");\r\n      setPhase('results');\r\n      setTimeLeft(3); // 3 секунды на результаты (можно увеличить)\r\n    }\r\n    if (phase === 'results' && timeLeft > 0) {\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'results' && timeLeft === 0) {\r\n      setPhase('analyzer');\r\n      setTimeLeft(PAUSE_DURATION); // 15 секунд анализатор\r\n    }\r\n    if (phase === 'analyzer' && timeLeft > 0) {\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n    if (phase === 'analyzer' && timeLeft === 0) {\r\n      // Новый раунд\r\n      const words = getRandomWords(6, gameDictionary);\r\n      const board = generateBoard({ name: \"\", reward: \"\", words });\r\n      const allPossibleWords = findAllWordsOnBoard(board).filter(word => word.length >= 3);\r\n      setUsedWords(allPossibleWords);\r\n      setBoard(board);\r\n      setFoundWords([]);\r\n      setPhase('playing');\r\n      setTimeLeft(ROUND_DURATION);\r\n    }\r\n  }, [timeLeft, phase, board]);\r\n\r\n\r\n\r\n  // Обработка завершения пути (свайп/drag)\r\n  const handlePathComplete = (path: Array<[number, number]>) => {\r\n    if (path.length < 3) {\r\n      setMessage(uiStrings.ошибки.минимумБукв);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    const word = path.map(([r, c]) => board[r][c].letter).join(\"\");\r\n    const allWords = findAllWordsOnBoard(board).filter(word => word.length >= 3);\r\n    if (foundWords.includes(word)) {\r\n      setMessage(uiStrings.ошибки.ужеВводилось);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    if (!allWords.includes(word) || !isWordInDictionary(word)) {\r\n      setMessage(uiStrings.ошибки.нетСлова);\r\n      setFlashColor('red');\r\n      setTimeout(() => setFlashColor(null), 300);\r\n      setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n      return;\r\n    }\r\n    // Подсчёт очков по бонусам букв\r\n    let wordScore = 0;\r\n    path.forEach(([r, c]) => {\r\n      const letter = board[r][c].letter.toUpperCase();\r\n      wordScore += letterBonuses[letter] || 0;\r\n    });\r\n    setScore(score + wordScore);\r\n    setFoundWords([...foundWords, word]);\r\n    setMessage(`+${wordScore} очков`);\r\n    setFlashColor('green');\r\n    setTimeout(() => setFlashColor(null), 300);\r\n    setTimeout(() => { setMessage(\"\"); setSelectedCells([]); setCurrentWord(\"\"); }, 350);\r\n  };\r\n\r\n  // Проверка слова при завершении выбора (например, тап по последней клетке или авто)\r\n  useEffect(() => {\r\n    // Проверяем только если длина слова >= 3\r\n    if (currentWord.length >= 3) {\r\n      // Проверяем, есть ли слово в возможных\r\n      const allWords = findAllWordsOnBoard(board);\r\n      if (allWords.includes(currentWord) && !foundWords.includes(currentWord)) {\r\n        setFoundWords([...foundWords, currentWord]);\r\n        setFlashColor('green');\r\n        setTimeout(() => setFlashColor(null), 300);\r\n        setTimeout(() => {\r\n          setSelectedCells([]);\r\n          setCurrentWord(\"\");\r\n        }, 350);\r\n      } else if (currentWord.length > 3 && !allWords.includes(currentWord)) {\r\n        setFlashColor('red');\r\n        setTimeout(() => setFlashColor(null), 300);\r\n        setTimeout(() => {\r\n          setSelectedCells([]);\r\n          setCurrentWord(\"\");\r\n        }, 350);\r\n      }\r\n    }\r\n  }, [currentWord]);\r\n\r\n  if (screen === 'welcome') {\r\n    // Свайп-старт по слову СТАРТ\r\n    const handleStartPath = (path: Array<[number, number]>) => {\r\n      const word = path.map(([r, c]) => startBoard[r][c].letter).join(\"\");\r\n      if (word === START_WORD) {\r\n        setStartFlashColor('green');\r\n        setTimeout(() => {\r\n          // Генерируем поле и считаем количество слов\r\n          const words = getRandomWords(6, gameDictionary);\r\n          const board = generateBoard({ name: \"\", reward: \"\", words });\r\n          const allPossibleWords = findAllWordsOnBoard(board);\r\n          setLoadingMax(allPossibleWords.length);\r\n          setLoadingProgress(0);\r\n          setLoadingTimer(5);\r\n          setScreen('loading');\r\n          setStartSelected([]);\r\n          setStartFlashColor(null);\r\n        }, 350);\r\n      } else {\r\n        setStartFlashColor('red');\r\n        setTimeout(() => {\r\n          setStartSelected([]);\r\n          setStartFlashColor(null);\r\n        }, 350);\r\n      }\r\n    };\r\n    return (\r\n      <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto', textAlign: 'center' }}>\r\n        <h1>Фундамент</h1>\r\n        <div style={{ display: 'flex', justifyContent: 'center', margin: '32px 0 16px 0' }}>\r\n          <div style={{ minWidth: 260 }}>\r\n            <GameBoard\r\n              board={startBoard}\r\n              selectedCells={startSelected}\r\n              onPathComplete={handleStartPath}\r\n              onDragUpdate={setStartSelected}\r\n              flashColor={startFlashColor}\r\n              columnsCount={START_WORD.length}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div style={{ fontSize: 16, color: '#888', marginBottom: 32 }}>Проведите по буквам, чтобы начать</div>\r\n        <button style={{ margin: 12, padding: '12px 32px', fontSize: 18, cursor: 'pointer' }} onClick={() => setScreen('help')}>Справка</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (screen === 'loading') {\r\n    return (\r\n      <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto', textAlign: 'center' }}>\r\n        <h2>Загрузка поля...</h2>\r\n        <div style={{ fontSize: 32, margin: '32px 0', color: '#1976d2', fontWeight: 700 }}>{loadingProgress}</div>\r\n        <div style={{ fontSize: 18, marginBottom: 12 }}>Будет доступно слов: {loadingMax}</div>\r\n        <div style={{ fontSize: 16, color: '#888' }}>Осталось секунд: {loadingTimer}</div>\r\n      </div>\r\n    );\r\n  }\r\n  if (screen === 'help') {\r\n    return (\r\n      <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto', textAlign: 'center' }}>\r\n        <h1>Фундамент</h1>\r\n        <div style={{ fontSize: 20, margin: '32px 0' }}>Справка будет добавлена позже.</div>\r\n        <button style={{ margin: 12, padding: '12px 32px', fontSize: 18, cursor: 'pointer' }} onClick={() => setScreen('welcome')}>Назад</button>\r\n      </div>\r\n    );\r\n  }\r\n  // Экран игры и анализатора\r\n  if (phase === 'analyzer') {\r\n    return (\r\n      <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto', textAlign: 'center' }}>\r\n        <h2>Анализатор поля</h2>\r\n        <div style={{ fontSize: 18, margin: '16px 0' }}>Найдено слов: <b>{usedWords.length}</b></div>\r\n        <div style={{ fontSize: 16, color: '#1976d2', marginBottom: 12 }}>До начала игры: {timeLeft} сек.</div>\r\n        <div style={{ margin: '12px 0', padding: '8px', background: '#f5f5f5', borderRadius: 8, fontSize: 14, color: '#333', maxHeight: 120, overflowY: 'auto' }}>\r\n          <b>Все слова на поле:</b>\r\n          <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8 }}>\r\n            {usedWords.map(word => (\r\n              <span key={word} style={{ background: '#e0e0e0', borderRadius: 4, padding: '2px 6px', margin: 2 }}>{word}</span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  // Экран игры\r\n  return (\r\n    <div style={{ fontFamily: 'sans-serif', padding: 24, maxWidth: 600, margin: '0 auto' }}>\r\n      <h1>Фундамент</h1>\r\n      <div style={{ fontSize: 20, fontWeight: 600, marginBottom: 8 }}>\r\n        {phase === 'playing' ? uiStrings.игра.заголовок : uiStrings.результаты.заголовок}\r\n        {' '}\r\n        <span style={{ fontSize: 18, fontWeight: 400, color: '#1976d2' }}>\r\n          {timeLeft} сек.\r\n        </span>\r\n      </div>\r\n      <div style={{ minHeight: 32, color: message.includes(uiStrings.прочее.очков) ? 'green' : 'red', fontWeight: 500 }}>{message}</div>\r\n      <div style={{ marginBottom: 8 }}>{uiStrings.игра.очки}: {score}</div>\r\n      {/* ОТЛАДКА: выводим все возможные слова на этом поле */}\r\n      <div style={{ margin: '12px 0', padding: '8px', background: '#f5f5f5', borderRadius: 8, fontSize: 14, color: '#333', maxHeight: 120, overflowY: 'auto' }}>\r\n        <b>Все слова на поле ({usedWords.length}):</b>\r\n        <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8 }}>\r\n          {usedWords.map(word => (\r\n            <span key={word} style={{ background: '#e0e0e0', borderRadius: 4, padding: '2px 6px', margin: 2 }}>{word}</span>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <GameBoard \r\n        board={board} \r\n        selectedCells={selectedCells}\r\n        onPathComplete={phase === 'playing' ? handlePathComplete : undefined}\r\n        onDragUpdate={phase === 'playing' ? setSelectedCells : undefined}\r\n        flashColor={flashColor}\r\n      />\r\n      {phase === 'results' && (\r\n        <Results \r\n          foundWords={foundWords} \r\n          possibleWords={possibleWords} \r\n          leaderboard={leaderboard}\r\n          usedWords={usedWords}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}